/*
Bitrise API

Official REST API for Bitrise.io

API version: 0.1
Contact: letsconnect@bitrise.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the V0ProjectFileStorageUploadParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V0ProjectFileStorageUploadParams{}

// V0ProjectFileStorageUploadParams struct for V0ProjectFileStorageUploadParams
type V0ProjectFileStorageUploadParams struct {
	UploadFileName string `json:"upload_file_name"`
	UploadFileSize int32 `json:"upload_file_size"`
	UserEnvKey string `json:"user_env_key"`
}

type _V0ProjectFileStorageUploadParams V0ProjectFileStorageUploadParams

// NewV0ProjectFileStorageUploadParams instantiates a new V0ProjectFileStorageUploadParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV0ProjectFileStorageUploadParams(uploadFileName string, uploadFileSize int32, userEnvKey string) *V0ProjectFileStorageUploadParams {
	this := V0ProjectFileStorageUploadParams{}
	this.UploadFileName = uploadFileName
	this.UploadFileSize = uploadFileSize
	this.UserEnvKey = userEnvKey
	return &this
}

// NewV0ProjectFileStorageUploadParamsWithDefaults instantiates a new V0ProjectFileStorageUploadParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV0ProjectFileStorageUploadParamsWithDefaults() *V0ProjectFileStorageUploadParams {
	this := V0ProjectFileStorageUploadParams{}
	return &this
}

// GetUploadFileName returns the UploadFileName field value
func (o *V0ProjectFileStorageUploadParams) GetUploadFileName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UploadFileName
}

// GetUploadFileNameOk returns a tuple with the UploadFileName field value
// and a boolean to check if the value has been set.
func (o *V0ProjectFileStorageUploadParams) GetUploadFileNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UploadFileName, true
}

// SetUploadFileName sets field value
func (o *V0ProjectFileStorageUploadParams) SetUploadFileName(v string) {
	o.UploadFileName = v
}

// GetUploadFileSize returns the UploadFileSize field value
func (o *V0ProjectFileStorageUploadParams) GetUploadFileSize() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.UploadFileSize
}

// GetUploadFileSizeOk returns a tuple with the UploadFileSize field value
// and a boolean to check if the value has been set.
func (o *V0ProjectFileStorageUploadParams) GetUploadFileSizeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UploadFileSize, true
}

// SetUploadFileSize sets field value
func (o *V0ProjectFileStorageUploadParams) SetUploadFileSize(v int32) {
	o.UploadFileSize = v
}

// GetUserEnvKey returns the UserEnvKey field value
func (o *V0ProjectFileStorageUploadParams) GetUserEnvKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserEnvKey
}

// GetUserEnvKeyOk returns a tuple with the UserEnvKey field value
// and a boolean to check if the value has been set.
func (o *V0ProjectFileStorageUploadParams) GetUserEnvKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserEnvKey, true
}

// SetUserEnvKey sets field value
func (o *V0ProjectFileStorageUploadParams) SetUserEnvKey(v string) {
	o.UserEnvKey = v
}

func (o V0ProjectFileStorageUploadParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V0ProjectFileStorageUploadParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["upload_file_name"] = o.UploadFileName
	toSerialize["upload_file_size"] = o.UploadFileSize
	toSerialize["user_env_key"] = o.UserEnvKey
	return toSerialize, nil
}

func (o *V0ProjectFileStorageUploadParams) UnmarshalJSON(bytes []byte) (err error) {
    // This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"upload_file_name",
		"upload_file_size",
		"user_env_key",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varV0ProjectFileStorageUploadParams := _V0ProjectFileStorageUploadParams{}

	err = json.Unmarshal(bytes, &varV0ProjectFileStorageUploadParams)

	if err != nil {
		return err
	}

	*o = V0ProjectFileStorageUploadParams(varV0ProjectFileStorageUploadParams)

	return err
}

type NullableV0ProjectFileStorageUploadParams struct {
	value *V0ProjectFileStorageUploadParams
	isSet bool
}

func (v NullableV0ProjectFileStorageUploadParams) Get() *V0ProjectFileStorageUploadParams {
	return v.value
}

func (v *NullableV0ProjectFileStorageUploadParams) Set(val *V0ProjectFileStorageUploadParams) {
	v.value = val
	v.isSet = true
}

func (v NullableV0ProjectFileStorageUploadParams) IsSet() bool {
	return v.isSet
}

func (v *NullableV0ProjectFileStorageUploadParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV0ProjectFileStorageUploadParams(val *V0ProjectFileStorageUploadParams) *NullableV0ProjectFileStorageUploadParams {
	return &NullableV0ProjectFileStorageUploadParams{value: val, isSet: true}
}

func (v NullableV0ProjectFileStorageUploadParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV0ProjectFileStorageUploadParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


