/*
Bitrise API

Official REST API for Bitrise.io

API version: 0.1
Contact: letsconnect@bitrise.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the AddonsPlan type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AddonsPlan{}

// AddonsPlan struct for AddonsPlan
type AddonsPlan struct {
	Features []AddonsFeature `json:"features,omitempty"`
	Id *string `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	Price *int32 `json:"price,omitempty"`
}

// NewAddonsPlan instantiates a new AddonsPlan object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddonsPlan() *AddonsPlan {
	this := AddonsPlan{}
	return &this
}

// NewAddonsPlanWithDefaults instantiates a new AddonsPlan object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddonsPlanWithDefaults() *AddonsPlan {
	this := AddonsPlan{}
	return &this
}

// GetFeatures returns the Features field value if set, zero value otherwise.
func (o *AddonsPlan) GetFeatures() []AddonsFeature {
	if o == nil || IsNil(o.Features) {
		var ret []AddonsFeature
		return ret
	}
	return o.Features
}

// GetFeaturesOk returns a tuple with the Features field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddonsPlan) GetFeaturesOk() ([]AddonsFeature, bool) {
	if o == nil || IsNil(o.Features) {
		return nil, false
	}
	return o.Features, true
}

// HasFeatures returns a boolean if a field has been set.
func (o *AddonsPlan) HasFeatures() bool {
	if o != nil && !IsNil(o.Features) {
		return true
	}

	return false
}

// SetFeatures gets a reference to the given []AddonsFeature and assigns it to the Features field.
func (o *AddonsPlan) SetFeatures(v []AddonsFeature) {
	o.Features = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *AddonsPlan) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddonsPlan) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *AddonsPlan) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *AddonsPlan) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *AddonsPlan) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddonsPlan) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *AddonsPlan) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *AddonsPlan) SetName(v string) {
	o.Name = &v
}

// GetPrice returns the Price field value if set, zero value otherwise.
func (o *AddonsPlan) GetPrice() int32 {
	if o == nil || IsNil(o.Price) {
		var ret int32
		return ret
	}
	return *o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddonsPlan) GetPriceOk() (*int32, bool) {
	if o == nil || IsNil(o.Price) {
		return nil, false
	}
	return o.Price, true
}

// HasPrice returns a boolean if a field has been set.
func (o *AddonsPlan) HasPrice() bool {
	if o != nil && !IsNil(o.Price) {
		return true
	}

	return false
}

// SetPrice gets a reference to the given int32 and assigns it to the Price field.
func (o *AddonsPlan) SetPrice(v int32) {
	o.Price = &v
}

func (o AddonsPlan) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AddonsPlan) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Features) {
		toSerialize["features"] = o.Features
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Price) {
		toSerialize["price"] = o.Price
	}
	return toSerialize, nil
}

type NullableAddonsPlan struct {
	value *AddonsPlan
	isSet bool
}

func (v NullableAddonsPlan) Get() *AddonsPlan {
	return v.value
}

func (v *NullableAddonsPlan) Set(val *AddonsPlan) {
	v.value = val
	v.isSet = true
}

func (v NullableAddonsPlan) IsSet() bool {
	return v.isSet
}

func (v *NullableAddonsPlan) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddonsPlan(val *AddonsPlan) *NullableAddonsPlan {
	return &NullableAddonsPlan{value: val, isSet: true}
}

func (v NullableAddonsPlan) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddonsPlan) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


