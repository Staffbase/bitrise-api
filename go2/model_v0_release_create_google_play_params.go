/*
Bitrise API

Official REST API for Bitrise.io

API version: 0.1
Contact: letsconnect@bitrise.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the V0ReleaseCreateGooglePlayParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V0ReleaseCreateGooglePlayParams{}

// V0ReleaseCreateGooglePlayParams struct for V0ReleaseCreateGooglePlayParams
type V0ReleaseCreateGooglePlayParams struct {
	// Indicates whether or not to upload every release candidate build automatically to the Google Play Console (default: `false`)
	AutomaticPlayConsoleUpload *bool `json:"automatic_play_console_upload,omitempty"`
	// An internal description of the release; it won't be propagated to the App Store (default: empty)
	Description *string `json:"description,omitempty"`
	// The name/version of the release (e.g. `1.2`)
	Name string `json:"name"`
	// The package name of the app to be released
	PackageName string `json:"package_name"`
	// The branch used for building the release candidate (default: empty)
	ReleaseBranch *string `json:"release_branch,omitempty"`
	// The Slack webhook URL to use for sending Slack notifications (default: empty)
	SlackWebhookUrl *string `json:"slack_webhook_url,omitempty"`
	// The Teams webhook URL to use for sending MS Teams notifications (default: empty)
	TeamsWebhookUrl *string `json:"teams_webhook_url,omitempty"`
	// The workflow used for building the release candidate (default: empty)
	Workflow *string `json:"workflow,omitempty"`
}

type _V0ReleaseCreateGooglePlayParams V0ReleaseCreateGooglePlayParams

// NewV0ReleaseCreateGooglePlayParams instantiates a new V0ReleaseCreateGooglePlayParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV0ReleaseCreateGooglePlayParams(name string, packageName string) *V0ReleaseCreateGooglePlayParams {
	this := V0ReleaseCreateGooglePlayParams{}
	this.Name = name
	this.PackageName = packageName
	return &this
}

// NewV0ReleaseCreateGooglePlayParamsWithDefaults instantiates a new V0ReleaseCreateGooglePlayParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV0ReleaseCreateGooglePlayParamsWithDefaults() *V0ReleaseCreateGooglePlayParams {
	this := V0ReleaseCreateGooglePlayParams{}
	return &this
}

// GetAutomaticPlayConsoleUpload returns the AutomaticPlayConsoleUpload field value if set, zero value otherwise.
func (o *V0ReleaseCreateGooglePlayParams) GetAutomaticPlayConsoleUpload() bool {
	if o == nil || IsNil(o.AutomaticPlayConsoleUpload) {
		var ret bool
		return ret
	}
	return *o.AutomaticPlayConsoleUpload
}

// GetAutomaticPlayConsoleUploadOk returns a tuple with the AutomaticPlayConsoleUpload field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0ReleaseCreateGooglePlayParams) GetAutomaticPlayConsoleUploadOk() (*bool, bool) {
	if o == nil || IsNil(o.AutomaticPlayConsoleUpload) {
		return nil, false
	}
	return o.AutomaticPlayConsoleUpload, true
}

// HasAutomaticPlayConsoleUpload returns a boolean if a field has been set.
func (o *V0ReleaseCreateGooglePlayParams) HasAutomaticPlayConsoleUpload() bool {
	if o != nil && !IsNil(o.AutomaticPlayConsoleUpload) {
		return true
	}

	return false
}

// SetAutomaticPlayConsoleUpload gets a reference to the given bool and assigns it to the AutomaticPlayConsoleUpload field.
func (o *V0ReleaseCreateGooglePlayParams) SetAutomaticPlayConsoleUpload(v bool) {
	o.AutomaticPlayConsoleUpload = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *V0ReleaseCreateGooglePlayParams) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0ReleaseCreateGooglePlayParams) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *V0ReleaseCreateGooglePlayParams) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *V0ReleaseCreateGooglePlayParams) SetDescription(v string) {
	o.Description = &v
}

// GetName returns the Name field value
func (o *V0ReleaseCreateGooglePlayParams) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *V0ReleaseCreateGooglePlayParams) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *V0ReleaseCreateGooglePlayParams) SetName(v string) {
	o.Name = v
}

// GetPackageName returns the PackageName field value
func (o *V0ReleaseCreateGooglePlayParams) GetPackageName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PackageName
}

// GetPackageNameOk returns a tuple with the PackageName field value
// and a boolean to check if the value has been set.
func (o *V0ReleaseCreateGooglePlayParams) GetPackageNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PackageName, true
}

// SetPackageName sets field value
func (o *V0ReleaseCreateGooglePlayParams) SetPackageName(v string) {
	o.PackageName = v
}

// GetReleaseBranch returns the ReleaseBranch field value if set, zero value otherwise.
func (o *V0ReleaseCreateGooglePlayParams) GetReleaseBranch() string {
	if o == nil || IsNil(o.ReleaseBranch) {
		var ret string
		return ret
	}
	return *o.ReleaseBranch
}

// GetReleaseBranchOk returns a tuple with the ReleaseBranch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0ReleaseCreateGooglePlayParams) GetReleaseBranchOk() (*string, bool) {
	if o == nil || IsNil(o.ReleaseBranch) {
		return nil, false
	}
	return o.ReleaseBranch, true
}

// HasReleaseBranch returns a boolean if a field has been set.
func (o *V0ReleaseCreateGooglePlayParams) HasReleaseBranch() bool {
	if o != nil && !IsNil(o.ReleaseBranch) {
		return true
	}

	return false
}

// SetReleaseBranch gets a reference to the given string and assigns it to the ReleaseBranch field.
func (o *V0ReleaseCreateGooglePlayParams) SetReleaseBranch(v string) {
	o.ReleaseBranch = &v
}

// GetSlackWebhookUrl returns the SlackWebhookUrl field value if set, zero value otherwise.
func (o *V0ReleaseCreateGooglePlayParams) GetSlackWebhookUrl() string {
	if o == nil || IsNil(o.SlackWebhookUrl) {
		var ret string
		return ret
	}
	return *o.SlackWebhookUrl
}

// GetSlackWebhookUrlOk returns a tuple with the SlackWebhookUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0ReleaseCreateGooglePlayParams) GetSlackWebhookUrlOk() (*string, bool) {
	if o == nil || IsNil(o.SlackWebhookUrl) {
		return nil, false
	}
	return o.SlackWebhookUrl, true
}

// HasSlackWebhookUrl returns a boolean if a field has been set.
func (o *V0ReleaseCreateGooglePlayParams) HasSlackWebhookUrl() bool {
	if o != nil && !IsNil(o.SlackWebhookUrl) {
		return true
	}

	return false
}

// SetSlackWebhookUrl gets a reference to the given string and assigns it to the SlackWebhookUrl field.
func (o *V0ReleaseCreateGooglePlayParams) SetSlackWebhookUrl(v string) {
	o.SlackWebhookUrl = &v
}

// GetTeamsWebhookUrl returns the TeamsWebhookUrl field value if set, zero value otherwise.
func (o *V0ReleaseCreateGooglePlayParams) GetTeamsWebhookUrl() string {
	if o == nil || IsNil(o.TeamsWebhookUrl) {
		var ret string
		return ret
	}
	return *o.TeamsWebhookUrl
}

// GetTeamsWebhookUrlOk returns a tuple with the TeamsWebhookUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0ReleaseCreateGooglePlayParams) GetTeamsWebhookUrlOk() (*string, bool) {
	if o == nil || IsNil(o.TeamsWebhookUrl) {
		return nil, false
	}
	return o.TeamsWebhookUrl, true
}

// HasTeamsWebhookUrl returns a boolean if a field has been set.
func (o *V0ReleaseCreateGooglePlayParams) HasTeamsWebhookUrl() bool {
	if o != nil && !IsNil(o.TeamsWebhookUrl) {
		return true
	}

	return false
}

// SetTeamsWebhookUrl gets a reference to the given string and assigns it to the TeamsWebhookUrl field.
func (o *V0ReleaseCreateGooglePlayParams) SetTeamsWebhookUrl(v string) {
	o.TeamsWebhookUrl = &v
}

// GetWorkflow returns the Workflow field value if set, zero value otherwise.
func (o *V0ReleaseCreateGooglePlayParams) GetWorkflow() string {
	if o == nil || IsNil(o.Workflow) {
		var ret string
		return ret
	}
	return *o.Workflow
}

// GetWorkflowOk returns a tuple with the Workflow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0ReleaseCreateGooglePlayParams) GetWorkflowOk() (*string, bool) {
	if o == nil || IsNil(o.Workflow) {
		return nil, false
	}
	return o.Workflow, true
}

// HasWorkflow returns a boolean if a field has been set.
func (o *V0ReleaseCreateGooglePlayParams) HasWorkflow() bool {
	if o != nil && !IsNil(o.Workflow) {
		return true
	}

	return false
}

// SetWorkflow gets a reference to the given string and assigns it to the Workflow field.
func (o *V0ReleaseCreateGooglePlayParams) SetWorkflow(v string) {
	o.Workflow = &v
}

func (o V0ReleaseCreateGooglePlayParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V0ReleaseCreateGooglePlayParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AutomaticPlayConsoleUpload) {
		toSerialize["automatic_play_console_upload"] = o.AutomaticPlayConsoleUpload
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["name"] = o.Name
	toSerialize["package_name"] = o.PackageName
	if !IsNil(o.ReleaseBranch) {
		toSerialize["release_branch"] = o.ReleaseBranch
	}
	if !IsNil(o.SlackWebhookUrl) {
		toSerialize["slack_webhook_url"] = o.SlackWebhookUrl
	}
	if !IsNil(o.TeamsWebhookUrl) {
		toSerialize["teams_webhook_url"] = o.TeamsWebhookUrl
	}
	if !IsNil(o.Workflow) {
		toSerialize["workflow"] = o.Workflow
	}
	return toSerialize, nil
}

func (o *V0ReleaseCreateGooglePlayParams) UnmarshalJSON(bytes []byte) (err error) {
    // This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"package_name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varV0ReleaseCreateGooglePlayParams := _V0ReleaseCreateGooglePlayParams{}

	err = json.Unmarshal(bytes, &varV0ReleaseCreateGooglePlayParams)

	if err != nil {
		return err
	}

	*o = V0ReleaseCreateGooglePlayParams(varV0ReleaseCreateGooglePlayParams)

	return err
}

type NullableV0ReleaseCreateGooglePlayParams struct {
	value *V0ReleaseCreateGooglePlayParams
	isSet bool
}

func (v NullableV0ReleaseCreateGooglePlayParams) Get() *V0ReleaseCreateGooglePlayParams {
	return v.value
}

func (v *NullableV0ReleaseCreateGooglePlayParams) Set(val *V0ReleaseCreateGooglePlayParams) {
	v.value = val
	v.isSet = true
}

func (v NullableV0ReleaseCreateGooglePlayParams) IsSet() bool {
	return v.isSet
}

func (v *NullableV0ReleaseCreateGooglePlayParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV0ReleaseCreateGooglePlayParams(val *V0ReleaseCreateGooglePlayParams) *NullableV0ReleaseCreateGooglePlayParams {
	return &NullableV0ReleaseCreateGooglePlayParams{value: val, isSet: true}
}

func (v NullableV0ReleaseCreateGooglePlayParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV0ReleaseCreateGooglePlayParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


