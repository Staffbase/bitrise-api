/*
Bitrise API

Official REST API for Bitrise.io

API version: 0.1
Contact: letsconnect@bitrise.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the V0ProjectFileStorageDocumentUpdateParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V0ProjectFileStorageDocumentUpdateParams{}

// V0ProjectFileStorageDocumentUpdateParams struct for V0ProjectFileStorageDocumentUpdateParams
type V0ProjectFileStorageDocumentUpdateParams struct {
	ExposedMetaDatastore []int32 `json:"exposed_meta_datastore,omitempty"`
	IsExpose *bool `json:"is_expose,omitempty"`
	IsProtected *bool `json:"is_protected,omitempty"`
	Processed *bool `json:"processed,omitempty"`
	UserEnvKey *string `json:"user_env_key,omitempty"`
}

// NewV0ProjectFileStorageDocumentUpdateParams instantiates a new V0ProjectFileStorageDocumentUpdateParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV0ProjectFileStorageDocumentUpdateParams() *V0ProjectFileStorageDocumentUpdateParams {
	this := V0ProjectFileStorageDocumentUpdateParams{}
	return &this
}

// NewV0ProjectFileStorageDocumentUpdateParamsWithDefaults instantiates a new V0ProjectFileStorageDocumentUpdateParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV0ProjectFileStorageDocumentUpdateParamsWithDefaults() *V0ProjectFileStorageDocumentUpdateParams {
	this := V0ProjectFileStorageDocumentUpdateParams{}
	return &this
}

// GetExposedMetaDatastore returns the ExposedMetaDatastore field value if set, zero value otherwise.
func (o *V0ProjectFileStorageDocumentUpdateParams) GetExposedMetaDatastore() []int32 {
	if o == nil || IsNil(o.ExposedMetaDatastore) {
		var ret []int32
		return ret
	}
	return o.ExposedMetaDatastore
}

// GetExposedMetaDatastoreOk returns a tuple with the ExposedMetaDatastore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0ProjectFileStorageDocumentUpdateParams) GetExposedMetaDatastoreOk() ([]int32, bool) {
	if o == nil || IsNil(o.ExposedMetaDatastore) {
		return nil, false
	}
	return o.ExposedMetaDatastore, true
}

// HasExposedMetaDatastore returns a boolean if a field has been set.
func (o *V0ProjectFileStorageDocumentUpdateParams) HasExposedMetaDatastore() bool {
	if o != nil && !IsNil(o.ExposedMetaDatastore) {
		return true
	}

	return false
}

// SetExposedMetaDatastore gets a reference to the given []int32 and assigns it to the ExposedMetaDatastore field.
func (o *V0ProjectFileStorageDocumentUpdateParams) SetExposedMetaDatastore(v []int32) {
	o.ExposedMetaDatastore = v
}

// GetIsExpose returns the IsExpose field value if set, zero value otherwise.
func (o *V0ProjectFileStorageDocumentUpdateParams) GetIsExpose() bool {
	if o == nil || IsNil(o.IsExpose) {
		var ret bool
		return ret
	}
	return *o.IsExpose
}

// GetIsExposeOk returns a tuple with the IsExpose field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0ProjectFileStorageDocumentUpdateParams) GetIsExposeOk() (*bool, bool) {
	if o == nil || IsNil(o.IsExpose) {
		return nil, false
	}
	return o.IsExpose, true
}

// HasIsExpose returns a boolean if a field has been set.
func (o *V0ProjectFileStorageDocumentUpdateParams) HasIsExpose() bool {
	if o != nil && !IsNil(o.IsExpose) {
		return true
	}

	return false
}

// SetIsExpose gets a reference to the given bool and assigns it to the IsExpose field.
func (o *V0ProjectFileStorageDocumentUpdateParams) SetIsExpose(v bool) {
	o.IsExpose = &v
}

// GetIsProtected returns the IsProtected field value if set, zero value otherwise.
func (o *V0ProjectFileStorageDocumentUpdateParams) GetIsProtected() bool {
	if o == nil || IsNil(o.IsProtected) {
		var ret bool
		return ret
	}
	return *o.IsProtected
}

// GetIsProtectedOk returns a tuple with the IsProtected field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0ProjectFileStorageDocumentUpdateParams) GetIsProtectedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsProtected) {
		return nil, false
	}
	return o.IsProtected, true
}

// HasIsProtected returns a boolean if a field has been set.
func (o *V0ProjectFileStorageDocumentUpdateParams) HasIsProtected() bool {
	if o != nil && !IsNil(o.IsProtected) {
		return true
	}

	return false
}

// SetIsProtected gets a reference to the given bool and assigns it to the IsProtected field.
func (o *V0ProjectFileStorageDocumentUpdateParams) SetIsProtected(v bool) {
	o.IsProtected = &v
}

// GetProcessed returns the Processed field value if set, zero value otherwise.
func (o *V0ProjectFileStorageDocumentUpdateParams) GetProcessed() bool {
	if o == nil || IsNil(o.Processed) {
		var ret bool
		return ret
	}
	return *o.Processed
}

// GetProcessedOk returns a tuple with the Processed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0ProjectFileStorageDocumentUpdateParams) GetProcessedOk() (*bool, bool) {
	if o == nil || IsNil(o.Processed) {
		return nil, false
	}
	return o.Processed, true
}

// HasProcessed returns a boolean if a field has been set.
func (o *V0ProjectFileStorageDocumentUpdateParams) HasProcessed() bool {
	if o != nil && !IsNil(o.Processed) {
		return true
	}

	return false
}

// SetProcessed gets a reference to the given bool and assigns it to the Processed field.
func (o *V0ProjectFileStorageDocumentUpdateParams) SetProcessed(v bool) {
	o.Processed = &v
}

// GetUserEnvKey returns the UserEnvKey field value if set, zero value otherwise.
func (o *V0ProjectFileStorageDocumentUpdateParams) GetUserEnvKey() string {
	if o == nil || IsNil(o.UserEnvKey) {
		var ret string
		return ret
	}
	return *o.UserEnvKey
}

// GetUserEnvKeyOk returns a tuple with the UserEnvKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0ProjectFileStorageDocumentUpdateParams) GetUserEnvKeyOk() (*string, bool) {
	if o == nil || IsNil(o.UserEnvKey) {
		return nil, false
	}
	return o.UserEnvKey, true
}

// HasUserEnvKey returns a boolean if a field has been set.
func (o *V0ProjectFileStorageDocumentUpdateParams) HasUserEnvKey() bool {
	if o != nil && !IsNil(o.UserEnvKey) {
		return true
	}

	return false
}

// SetUserEnvKey gets a reference to the given string and assigns it to the UserEnvKey field.
func (o *V0ProjectFileStorageDocumentUpdateParams) SetUserEnvKey(v string) {
	o.UserEnvKey = &v
}

func (o V0ProjectFileStorageDocumentUpdateParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V0ProjectFileStorageDocumentUpdateParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ExposedMetaDatastore) {
		toSerialize["exposed_meta_datastore"] = o.ExposedMetaDatastore
	}
	if !IsNil(o.IsExpose) {
		toSerialize["is_expose"] = o.IsExpose
	}
	if !IsNil(o.IsProtected) {
		toSerialize["is_protected"] = o.IsProtected
	}
	if !IsNil(o.Processed) {
		toSerialize["processed"] = o.Processed
	}
	if !IsNil(o.UserEnvKey) {
		toSerialize["user_env_key"] = o.UserEnvKey
	}
	return toSerialize, nil
}

type NullableV0ProjectFileStorageDocumentUpdateParams struct {
	value *V0ProjectFileStorageDocumentUpdateParams
	isSet bool
}

func (v NullableV0ProjectFileStorageDocumentUpdateParams) Get() *V0ProjectFileStorageDocumentUpdateParams {
	return v.value
}

func (v *NullableV0ProjectFileStorageDocumentUpdateParams) Set(val *V0ProjectFileStorageDocumentUpdateParams) {
	v.value = val
	v.isSet = true
}

func (v NullableV0ProjectFileStorageDocumentUpdateParams) IsSet() bool {
	return v.isSet
}

func (v *NullableV0ProjectFileStorageDocumentUpdateParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV0ProjectFileStorageDocumentUpdateParams(val *V0ProjectFileStorageDocumentUpdateParams) *NullableV0ProjectFileStorageDocumentUpdateParams {
	return &NullableV0ProjectFileStorageDocumentUpdateParams{value: val, isSet: true}
}

func (v NullableV0ProjectFileStorageDocumentUpdateParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV0ProjectFileStorageDocumentUpdateParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


