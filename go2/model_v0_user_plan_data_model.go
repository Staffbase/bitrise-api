/*
Bitrise API

Official REST API for Bitrise.io

API version: 0.1
Contact: letsconnect@bitrise.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the V0UserPlanDataModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V0UserPlanDataModel{}

// V0UserPlanDataModel struct for V0UserPlanDataModel
type V0UserPlanDataModel struct {
	CurrentPlan *V0PlanDataModel `json:"current_plan,omitempty"`
	PendingPlan *V0PlanDataModel `json:"pending_plan,omitempty"`
	TrialExpiresAt *string `json:"trial_expires_at,omitempty"`
}

// NewV0UserPlanDataModel instantiates a new V0UserPlanDataModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV0UserPlanDataModel() *V0UserPlanDataModel {
	this := V0UserPlanDataModel{}
	return &this
}

// NewV0UserPlanDataModelWithDefaults instantiates a new V0UserPlanDataModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV0UserPlanDataModelWithDefaults() *V0UserPlanDataModel {
	this := V0UserPlanDataModel{}
	return &this
}

// GetCurrentPlan returns the CurrentPlan field value if set, zero value otherwise.
func (o *V0UserPlanDataModel) GetCurrentPlan() V0PlanDataModel {
	if o == nil || IsNil(o.CurrentPlan) {
		var ret V0PlanDataModel
		return ret
	}
	return *o.CurrentPlan
}

// GetCurrentPlanOk returns a tuple with the CurrentPlan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0UserPlanDataModel) GetCurrentPlanOk() (*V0PlanDataModel, bool) {
	if o == nil || IsNil(o.CurrentPlan) {
		return nil, false
	}
	return o.CurrentPlan, true
}

// HasCurrentPlan returns a boolean if a field has been set.
func (o *V0UserPlanDataModel) HasCurrentPlan() bool {
	if o != nil && !IsNil(o.CurrentPlan) {
		return true
	}

	return false
}

// SetCurrentPlan gets a reference to the given V0PlanDataModel and assigns it to the CurrentPlan field.
func (o *V0UserPlanDataModel) SetCurrentPlan(v V0PlanDataModel) {
	o.CurrentPlan = &v
}

// GetPendingPlan returns the PendingPlan field value if set, zero value otherwise.
func (o *V0UserPlanDataModel) GetPendingPlan() V0PlanDataModel {
	if o == nil || IsNil(o.PendingPlan) {
		var ret V0PlanDataModel
		return ret
	}
	return *o.PendingPlan
}

// GetPendingPlanOk returns a tuple with the PendingPlan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0UserPlanDataModel) GetPendingPlanOk() (*V0PlanDataModel, bool) {
	if o == nil || IsNil(o.PendingPlan) {
		return nil, false
	}
	return o.PendingPlan, true
}

// HasPendingPlan returns a boolean if a field has been set.
func (o *V0UserPlanDataModel) HasPendingPlan() bool {
	if o != nil && !IsNil(o.PendingPlan) {
		return true
	}

	return false
}

// SetPendingPlan gets a reference to the given V0PlanDataModel and assigns it to the PendingPlan field.
func (o *V0UserPlanDataModel) SetPendingPlan(v V0PlanDataModel) {
	o.PendingPlan = &v
}

// GetTrialExpiresAt returns the TrialExpiresAt field value if set, zero value otherwise.
func (o *V0UserPlanDataModel) GetTrialExpiresAt() string {
	if o == nil || IsNil(o.TrialExpiresAt) {
		var ret string
		return ret
	}
	return *o.TrialExpiresAt
}

// GetTrialExpiresAtOk returns a tuple with the TrialExpiresAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0UserPlanDataModel) GetTrialExpiresAtOk() (*string, bool) {
	if o == nil || IsNil(o.TrialExpiresAt) {
		return nil, false
	}
	return o.TrialExpiresAt, true
}

// HasTrialExpiresAt returns a boolean if a field has been set.
func (o *V0UserPlanDataModel) HasTrialExpiresAt() bool {
	if o != nil && !IsNil(o.TrialExpiresAt) {
		return true
	}

	return false
}

// SetTrialExpiresAt gets a reference to the given string and assigns it to the TrialExpiresAt field.
func (o *V0UserPlanDataModel) SetTrialExpiresAt(v string) {
	o.TrialExpiresAt = &v
}

func (o V0UserPlanDataModel) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V0UserPlanDataModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CurrentPlan) {
		toSerialize["current_plan"] = o.CurrentPlan
	}
	if !IsNil(o.PendingPlan) {
		toSerialize["pending_plan"] = o.PendingPlan
	}
	if !IsNil(o.TrialExpiresAt) {
		toSerialize["trial_expires_at"] = o.TrialExpiresAt
	}
	return toSerialize, nil
}

type NullableV0UserPlanDataModel struct {
	value *V0UserPlanDataModel
	isSet bool
}

func (v NullableV0UserPlanDataModel) Get() *V0UserPlanDataModel {
	return v.value
}

func (v *NullableV0UserPlanDataModel) Set(val *V0UserPlanDataModel) {
	v.value = val
	v.isSet = true
}

func (v NullableV0UserPlanDataModel) IsSet() bool {
	return v.isSet
}

func (v *NullableV0UserPlanDataModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV0UserPlanDataModel(val *V0UserPlanDataModel) *NullableV0UserPlanDataModel {
	return &NullableV0UserPlanDataModel{value: val, isSet: true}
}

func (v NullableV0UserPlanDataModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV0UserPlanDataModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


