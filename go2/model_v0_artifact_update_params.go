/*
Bitrise API

Official REST API for Bitrise.io

API version: 0.1
Contact: letsconnect@bitrise.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the V0ArtifactUpdateParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V0ArtifactUpdateParams{}

// V0ArtifactUpdateParams struct for V0ArtifactUpdateParams
type V0ArtifactUpdateParams struct {
	IsPublicPageEnabled bool `json:"is_public_page_enabled"`
}

type _V0ArtifactUpdateParams V0ArtifactUpdateParams

// NewV0ArtifactUpdateParams instantiates a new V0ArtifactUpdateParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV0ArtifactUpdateParams(isPublicPageEnabled bool) *V0ArtifactUpdateParams {
	this := V0ArtifactUpdateParams{}
	this.IsPublicPageEnabled = isPublicPageEnabled
	return &this
}

// NewV0ArtifactUpdateParamsWithDefaults instantiates a new V0ArtifactUpdateParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV0ArtifactUpdateParamsWithDefaults() *V0ArtifactUpdateParams {
	this := V0ArtifactUpdateParams{}
	return &this
}

// GetIsPublicPageEnabled returns the IsPublicPageEnabled field value
func (o *V0ArtifactUpdateParams) GetIsPublicPageEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsPublicPageEnabled
}

// GetIsPublicPageEnabledOk returns a tuple with the IsPublicPageEnabled field value
// and a boolean to check if the value has been set.
func (o *V0ArtifactUpdateParams) GetIsPublicPageEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsPublicPageEnabled, true
}

// SetIsPublicPageEnabled sets field value
func (o *V0ArtifactUpdateParams) SetIsPublicPageEnabled(v bool) {
	o.IsPublicPageEnabled = v
}

func (o V0ArtifactUpdateParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V0ArtifactUpdateParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["is_public_page_enabled"] = o.IsPublicPageEnabled
	return toSerialize, nil
}

func (o *V0ArtifactUpdateParams) UnmarshalJSON(bytes []byte) (err error) {
    // This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"is_public_page_enabled",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varV0ArtifactUpdateParams := _V0ArtifactUpdateParams{}

	err = json.Unmarshal(bytes, &varV0ArtifactUpdateParams)

	if err != nil {
		return err
	}

	*o = V0ArtifactUpdateParams(varV0ArtifactUpdateParams)

	return err
}

type NullableV0ArtifactUpdateParams struct {
	value *V0ArtifactUpdateParams
	isSet bool
}

func (v NullableV0ArtifactUpdateParams) Get() *V0ArtifactUpdateParams {
	return v.value
}

func (v *NullableV0ArtifactUpdateParams) Set(val *V0ArtifactUpdateParams) {
	v.value = val
	v.isSet = true
}

func (v NullableV0ArtifactUpdateParams) IsSet() bool {
	return v.isSet
}

func (v *NullableV0ArtifactUpdateParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV0ArtifactUpdateParams(val *V0ArtifactUpdateParams) *NullableV0ArtifactUpdateParams {
	return &NullableV0ArtifactUpdateParams{value: val, isSet: true}
}

func (v NullableV0ArtifactUpdateParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV0ArtifactUpdateParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


