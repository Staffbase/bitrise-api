/*
Bitrise API

Official REST API for Bitrise.io

API version: 0.1
Contact: letsconnect@bitrise.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the NullsInt64 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NullsInt64{}

// NullsInt64 struct for NullsInt64
type NullsInt64 struct {
	Int64 *int32 `json:"int64,omitempty"`
	// Valid is true if Int64 is not NULL
	Valid *bool `json:"valid,omitempty"`
}

// NewNullsInt64 instantiates a new NullsInt64 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNullsInt64() *NullsInt64 {
	this := NullsInt64{}
	return &this
}

// NewNullsInt64WithDefaults instantiates a new NullsInt64 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNullsInt64WithDefaults() *NullsInt64 {
	this := NullsInt64{}
	return &this
}

// GetInt64 returns the Int64 field value if set, zero value otherwise.
func (o *NullsInt64) GetInt64() int32 {
	if o == nil || IsNil(o.Int64) {
		var ret int32
		return ret
	}
	return *o.Int64
}

// GetInt64Ok returns a tuple with the Int64 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NullsInt64) GetInt64Ok() (*int32, bool) {
	if o == nil || IsNil(o.Int64) {
		return nil, false
	}
	return o.Int64, true
}

// HasInt64 returns a boolean if a field has been set.
func (o *NullsInt64) HasInt64() bool {
	if o != nil && !IsNil(o.Int64) {
		return true
	}

	return false
}

// SetInt64 gets a reference to the given int32 and assigns it to the Int64 field.
func (o *NullsInt64) SetInt64(v int32) {
	o.Int64 = &v
}

// GetValid returns the Valid field value if set, zero value otherwise.
func (o *NullsInt64) GetValid() bool {
	if o == nil || IsNil(o.Valid) {
		var ret bool
		return ret
	}
	return *o.Valid
}

// GetValidOk returns a tuple with the Valid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NullsInt64) GetValidOk() (*bool, bool) {
	if o == nil || IsNil(o.Valid) {
		return nil, false
	}
	return o.Valid, true
}

// HasValid returns a boolean if a field has been set.
func (o *NullsInt64) HasValid() bool {
	if o != nil && !IsNil(o.Valid) {
		return true
	}

	return false
}

// SetValid gets a reference to the given bool and assigns it to the Valid field.
func (o *NullsInt64) SetValid(v bool) {
	o.Valid = &v
}

func (o NullsInt64) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NullsInt64) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Int64) {
		toSerialize["int64"] = o.Int64
	}
	if !IsNil(o.Valid) {
		toSerialize["valid"] = o.Valid
	}
	return toSerialize, nil
}

type NullableNullsInt64 struct {
	value *NullsInt64
	isSet bool
}

func (v NullableNullsInt64) Get() *NullsInt64 {
	return v.value
}

func (v *NullableNullsInt64) Set(val *NullsInt64) {
	v.value = val
	v.isSet = true
}

func (v NullableNullsInt64) IsSet() bool {
	return v.isSet
}

func (v *NullableNullsInt64) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNullsInt64(val *NullsInt64) *NullableNullsInt64 {
	return &NullableNullsInt64{value: val, isSet: true}
}

func (v NullableNullsInt64) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNullsInt64) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


