/*
Bitrise API

Official REST API for Bitrise.io

API version: 0.1
Contact: letsconnect@bitrise.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the AddonsFeature type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AddonsFeature{}

// AddonsFeature struct for AddonsFeature
type AddonsFeature struct {
	Available *bool `json:"available,omitempty"`
	Description *string `json:"description,omitempty"`
	Quantity *string `json:"quantity,omitempty"`
}

// NewAddonsFeature instantiates a new AddonsFeature object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddonsFeature() *AddonsFeature {
	this := AddonsFeature{}
	return &this
}

// NewAddonsFeatureWithDefaults instantiates a new AddonsFeature object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddonsFeatureWithDefaults() *AddonsFeature {
	this := AddonsFeature{}
	return &this
}

// GetAvailable returns the Available field value if set, zero value otherwise.
func (o *AddonsFeature) GetAvailable() bool {
	if o == nil || IsNil(o.Available) {
		var ret bool
		return ret
	}
	return *o.Available
}

// GetAvailableOk returns a tuple with the Available field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddonsFeature) GetAvailableOk() (*bool, bool) {
	if o == nil || IsNil(o.Available) {
		return nil, false
	}
	return o.Available, true
}

// HasAvailable returns a boolean if a field has been set.
func (o *AddonsFeature) HasAvailable() bool {
	if o != nil && !IsNil(o.Available) {
		return true
	}

	return false
}

// SetAvailable gets a reference to the given bool and assigns it to the Available field.
func (o *AddonsFeature) SetAvailable(v bool) {
	o.Available = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *AddonsFeature) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddonsFeature) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *AddonsFeature) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *AddonsFeature) SetDescription(v string) {
	o.Description = &v
}

// GetQuantity returns the Quantity field value if set, zero value otherwise.
func (o *AddonsFeature) GetQuantity() string {
	if o == nil || IsNil(o.Quantity) {
		var ret string
		return ret
	}
	return *o.Quantity
}

// GetQuantityOk returns a tuple with the Quantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AddonsFeature) GetQuantityOk() (*string, bool) {
	if o == nil || IsNil(o.Quantity) {
		return nil, false
	}
	return o.Quantity, true
}

// HasQuantity returns a boolean if a field has been set.
func (o *AddonsFeature) HasQuantity() bool {
	if o != nil && !IsNil(o.Quantity) {
		return true
	}

	return false
}

// SetQuantity gets a reference to the given string and assigns it to the Quantity field.
func (o *AddonsFeature) SetQuantity(v string) {
	o.Quantity = &v
}

func (o AddonsFeature) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AddonsFeature) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Available) {
		toSerialize["available"] = o.Available
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Quantity) {
		toSerialize["quantity"] = o.Quantity
	}
	return toSerialize, nil
}

type NullableAddonsFeature struct {
	value *AddonsFeature
	isSet bool
}

func (v NullableAddonsFeature) Get() *AddonsFeature {
	return v.value
}

func (v *NullableAddonsFeature) Set(val *AddonsFeature) {
	v.value = val
	v.isSet = true
}

func (v NullableAddonsFeature) IsSet() bool {
	return v.isSet
}

func (v *NullableAddonsFeature) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddonsFeature(val *AddonsFeature) *NullableAddonsFeature {
	return &NullableAddonsFeature{value: val, isSet: true}
}

func (v NullableAddonsFeature) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddonsFeature) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


