/*
Bitrise API

Official REST API for Bitrise.io

API version: 0.1
Contact: letsconnect@bitrise.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the V0BuildAbortParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V0BuildAbortParams{}

// V0BuildAbortParams struct for V0BuildAbortParams
type V0BuildAbortParams struct {
	AbortReason string `json:"abort_reason"`
	AbortWithSuccess bool `json:"abort_with_success"`
	SkipNotifications bool `json:"skip_notifications"`
}

type _V0BuildAbortParams V0BuildAbortParams

// NewV0BuildAbortParams instantiates a new V0BuildAbortParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV0BuildAbortParams(abortReason string, abortWithSuccess bool, skipNotifications bool) *V0BuildAbortParams {
	this := V0BuildAbortParams{}
	this.AbortReason = abortReason
	this.AbortWithSuccess = abortWithSuccess
	this.SkipNotifications = skipNotifications
	return &this
}

// NewV0BuildAbortParamsWithDefaults instantiates a new V0BuildAbortParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV0BuildAbortParamsWithDefaults() *V0BuildAbortParams {
	this := V0BuildAbortParams{}
	return &this
}

// GetAbortReason returns the AbortReason field value
func (o *V0BuildAbortParams) GetAbortReason() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AbortReason
}

// GetAbortReasonOk returns a tuple with the AbortReason field value
// and a boolean to check if the value has been set.
func (o *V0BuildAbortParams) GetAbortReasonOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AbortReason, true
}

// SetAbortReason sets field value
func (o *V0BuildAbortParams) SetAbortReason(v string) {
	o.AbortReason = v
}

// GetAbortWithSuccess returns the AbortWithSuccess field value
func (o *V0BuildAbortParams) GetAbortWithSuccess() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.AbortWithSuccess
}

// GetAbortWithSuccessOk returns a tuple with the AbortWithSuccess field value
// and a boolean to check if the value has been set.
func (o *V0BuildAbortParams) GetAbortWithSuccessOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AbortWithSuccess, true
}

// SetAbortWithSuccess sets field value
func (o *V0BuildAbortParams) SetAbortWithSuccess(v bool) {
	o.AbortWithSuccess = v
}

// GetSkipNotifications returns the SkipNotifications field value
func (o *V0BuildAbortParams) GetSkipNotifications() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.SkipNotifications
}

// GetSkipNotificationsOk returns a tuple with the SkipNotifications field value
// and a boolean to check if the value has been set.
func (o *V0BuildAbortParams) GetSkipNotificationsOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SkipNotifications, true
}

// SetSkipNotifications sets field value
func (o *V0BuildAbortParams) SetSkipNotifications(v bool) {
	o.SkipNotifications = v
}

func (o V0BuildAbortParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V0BuildAbortParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["abort_reason"] = o.AbortReason
	toSerialize["abort_with_success"] = o.AbortWithSuccess
	toSerialize["skip_notifications"] = o.SkipNotifications
	return toSerialize, nil
}

func (o *V0BuildAbortParams) UnmarshalJSON(bytes []byte) (err error) {
    // This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"abort_reason",
		"abort_with_success",
		"skip_notifications",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varV0BuildAbortParams := _V0BuildAbortParams{}

	err = json.Unmarshal(bytes, &varV0BuildAbortParams)

	if err != nil {
		return err
	}

	*o = V0BuildAbortParams(varV0BuildAbortParams)

	return err
}

type NullableV0BuildAbortParams struct {
	value *V0BuildAbortParams
	isSet bool
}

func (v NullableV0BuildAbortParams) Get() *V0BuildAbortParams {
	return v.value
}

func (v *NullableV0BuildAbortParams) Set(val *V0BuildAbortParams) {
	v.value = val
	v.isSet = true
}

func (v NullableV0BuildAbortParams) IsSet() bool {
	return v.isSet
}

func (v *NullableV0BuildAbortParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV0BuildAbortParams(val *V0BuildAbortParams) *NullableV0BuildAbortParams {
	return &NullableV0BuildAbortParams{value: val, isSet: true}
}

func (v NullableV0BuildAbortParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV0BuildAbortParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


