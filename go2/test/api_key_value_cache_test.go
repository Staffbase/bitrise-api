/*
Bitrise API

Testing KeyValueCacheAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/staffbase/bitrise-api"
)

func Test_openapi_KeyValueCacheAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test KeyValueCacheAPIService CacheItemDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var appSlug string
		var cacheItemId string

		httpRes, err := apiClient.KeyValueCacheAPI.CacheItemDelete(context.Background(), appSlug, cacheItemId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test KeyValueCacheAPIService CacheItemDeleteAll", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var appSlug string

		httpRes, err := apiClient.KeyValueCacheAPI.CacheItemDeleteAll(context.Background(), appSlug).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test KeyValueCacheAPIService CacheItemDownload", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var appSlug string
		var cacheItemId string

		resp, httpRes, err := apiClient.KeyValueCacheAPI.CacheItemDownload(context.Background(), appSlug, cacheItemId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test KeyValueCacheAPIService CacheList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var appSlug string

		resp, httpRes, err := apiClient.KeyValueCacheAPI.CacheList(context.Background(), appSlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
