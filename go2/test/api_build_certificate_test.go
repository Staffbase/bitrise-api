/*
Bitrise API

Testing BuildCertificateAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/staffbase/bitrise-api"
)

func Test_openapi_BuildCertificateAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test BuildCertificateAPIService BuildCertificateConfirm", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var appSlug string
		var buildCertificateSlug string

		resp, httpRes, err := apiClient.BuildCertificateAPI.BuildCertificateConfirm(context.Background(), appSlug, buildCertificateSlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BuildCertificateAPIService BuildCertificateCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var appSlug string

		resp, httpRes, err := apiClient.BuildCertificateAPI.BuildCertificateCreate(context.Background(), appSlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BuildCertificateAPIService BuildCertificateDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var appSlug string
		var buildCertificateSlug string

		resp, httpRes, err := apiClient.BuildCertificateAPI.BuildCertificateDelete(context.Background(), appSlug, buildCertificateSlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BuildCertificateAPIService BuildCertificateList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var appSlug string

		resp, httpRes, err := apiClient.BuildCertificateAPI.BuildCertificateList(context.Background(), appSlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BuildCertificateAPIService BuildCertificateShow", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var appSlug string
		var buildCertificateSlug string

		resp, httpRes, err := apiClient.BuildCertificateAPI.BuildCertificateShow(context.Background(), appSlug, buildCertificateSlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BuildCertificateAPIService BuildCertificateUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var appSlug string
		var buildCertificateSlug string

		resp, httpRes, err := apiClient.BuildCertificateAPI.BuildCertificateUpdate(context.Background(), appSlug, buildCertificateSlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
