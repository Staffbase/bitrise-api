/*
Bitrise API

Testing ApplicationAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/staffbase/bitrise-api"
)

func Test_openapi_ApplicationAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ApplicationAPIService AppConfigDatastoreShow", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var appSlug string

		resp, httpRes, err := apiClient.ApplicationAPI.AppConfigDatastoreShow(context.Background(), appSlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ApplicationAPIService AppDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var appSlug string

		resp, httpRes, err := apiClient.ApplicationAPI.AppDelete(context.Background(), appSlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ApplicationAPIService AppList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ApplicationAPI.AppList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ApplicationAPIService AppListByOrganization", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgSlug string

		resp, httpRes, err := apiClient.ApplicationAPI.AppListByOrganization(context.Background(), orgSlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ApplicationAPIService AppListByUser", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userSlug string

		resp, httpRes, err := apiClient.ApplicationAPI.AppListByUser(context.Background(), userSlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ApplicationAPIService AppNotifications", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var appSlug string

		resp, httpRes, err := apiClient.ApplicationAPI.AppNotifications(context.Background(), appSlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ApplicationAPIService AppRolesQuery", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var appSlug string
		var roleName string

		resp, httpRes, err := apiClient.ApplicationAPI.AppRolesQuery(context.Background(), appSlug, roleName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ApplicationAPIService AppRolesUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var appSlug string
		var roleName string

		resp, httpRes, err := apiClient.ApplicationAPI.AppRolesUpdate(context.Background(), appSlug, roleName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ApplicationAPIService AppShow", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var appSlug string

		resp, httpRes, err := apiClient.ApplicationAPI.AppShow(context.Background(), appSlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ApplicationAPIService AppUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var appSlug string

		resp, httpRes, err := apiClient.ApplicationAPI.AppUpdate(context.Background(), appSlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ApplicationAPIService BranchList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var appSlug string

		resp, httpRes, err := apiClient.ApplicationAPI.BranchList(context.Background(), appSlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
