/*
Bitrise API

Testing PipelinesAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/staffbase/bitrise-api"
)

func Test_openapi_PipelinesAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test PipelinesAPIService PipelineAbort", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var appSlug string
		var pipelineId string

		httpRes, err := apiClient.PipelinesAPI.PipelineAbort(context.Background(), appSlug, pipelineId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PipelinesAPIService PipelineList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var appSlug string

		resp, httpRes, err := apiClient.PipelinesAPI.PipelineList(context.Background(), appSlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PipelinesAPIService PipelineListAll", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PipelinesAPI.PipelineListAll(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PipelinesAPIService PipelineRebuild", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var appSlug string
		var pipelineId string

		httpRes, err := apiClient.PipelinesAPI.PipelineRebuild(context.Background(), appSlug, pipelineId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PipelinesAPIService PipelineShow", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var appSlug string
		var pipelineId string

		resp, httpRes, err := apiClient.PipelinesAPI.PipelineShow(context.Background(), appSlug, pipelineId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
