/*
Bitrise API

Official REST API for Bitrise.io

API version: 0.1
Contact: letsconnect@bitrise.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the V0SSHKeyUploadParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V0SSHKeyUploadParams{}

// V0SSHKeyUploadParams struct for V0SSHKeyUploadParams
type V0SSHKeyUploadParams struct {
	// The private part of the SSH key you would like to use
	AuthSshPrivateKey string `json:"auth_ssh_private_key"`
	// The public part of the SSH key you would like to use
	AuthSshPublicKey string `json:"auth_ssh_public_key"`
	// If it's set to true, the provided SSH key will be registered at the provider of the application
	IsRegisterKeyIntoProviderService *bool `json:"is_register_key_into_provider_service,omitempty"`
}

type _V0SSHKeyUploadParams V0SSHKeyUploadParams

// NewV0SSHKeyUploadParams instantiates a new V0SSHKeyUploadParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV0SSHKeyUploadParams(authSshPrivateKey string, authSshPublicKey string) *V0SSHKeyUploadParams {
	this := V0SSHKeyUploadParams{}
	this.AuthSshPrivateKey = authSshPrivateKey
	this.AuthSshPublicKey = authSshPublicKey
	return &this
}

// NewV0SSHKeyUploadParamsWithDefaults instantiates a new V0SSHKeyUploadParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV0SSHKeyUploadParamsWithDefaults() *V0SSHKeyUploadParams {
	this := V0SSHKeyUploadParams{}
	return &this
}

// GetAuthSshPrivateKey returns the AuthSshPrivateKey field value
func (o *V0SSHKeyUploadParams) GetAuthSshPrivateKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AuthSshPrivateKey
}

// GetAuthSshPrivateKeyOk returns a tuple with the AuthSshPrivateKey field value
// and a boolean to check if the value has been set.
func (o *V0SSHKeyUploadParams) GetAuthSshPrivateKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AuthSshPrivateKey, true
}

// SetAuthSshPrivateKey sets field value
func (o *V0SSHKeyUploadParams) SetAuthSshPrivateKey(v string) {
	o.AuthSshPrivateKey = v
}

// GetAuthSshPublicKey returns the AuthSshPublicKey field value
func (o *V0SSHKeyUploadParams) GetAuthSshPublicKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AuthSshPublicKey
}

// GetAuthSshPublicKeyOk returns a tuple with the AuthSshPublicKey field value
// and a boolean to check if the value has been set.
func (o *V0SSHKeyUploadParams) GetAuthSshPublicKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AuthSshPublicKey, true
}

// SetAuthSshPublicKey sets field value
func (o *V0SSHKeyUploadParams) SetAuthSshPublicKey(v string) {
	o.AuthSshPublicKey = v
}

// GetIsRegisterKeyIntoProviderService returns the IsRegisterKeyIntoProviderService field value if set, zero value otherwise.
func (o *V0SSHKeyUploadParams) GetIsRegisterKeyIntoProviderService() bool {
	if o == nil || IsNil(o.IsRegisterKeyIntoProviderService) {
		var ret bool
		return ret
	}
	return *o.IsRegisterKeyIntoProviderService
}

// GetIsRegisterKeyIntoProviderServiceOk returns a tuple with the IsRegisterKeyIntoProviderService field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0SSHKeyUploadParams) GetIsRegisterKeyIntoProviderServiceOk() (*bool, bool) {
	if o == nil || IsNil(o.IsRegisterKeyIntoProviderService) {
		return nil, false
	}
	return o.IsRegisterKeyIntoProviderService, true
}

// HasIsRegisterKeyIntoProviderService returns a boolean if a field has been set.
func (o *V0SSHKeyUploadParams) HasIsRegisterKeyIntoProviderService() bool {
	if o != nil && !IsNil(o.IsRegisterKeyIntoProviderService) {
		return true
	}

	return false
}

// SetIsRegisterKeyIntoProviderService gets a reference to the given bool and assigns it to the IsRegisterKeyIntoProviderService field.
func (o *V0SSHKeyUploadParams) SetIsRegisterKeyIntoProviderService(v bool) {
	o.IsRegisterKeyIntoProviderService = &v
}

func (o V0SSHKeyUploadParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V0SSHKeyUploadParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["auth_ssh_private_key"] = o.AuthSshPrivateKey
	toSerialize["auth_ssh_public_key"] = o.AuthSshPublicKey
	if !IsNil(o.IsRegisterKeyIntoProviderService) {
		toSerialize["is_register_key_into_provider_service"] = o.IsRegisterKeyIntoProviderService
	}
	return toSerialize, nil
}

func (o *V0SSHKeyUploadParams) UnmarshalJSON(bytes []byte) (err error) {
    // This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"auth_ssh_private_key",
		"auth_ssh_public_key",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varV0SSHKeyUploadParams := _V0SSHKeyUploadParams{}

	err = json.Unmarshal(bytes, &varV0SSHKeyUploadParams)

	if err != nil {
		return err
	}

	*o = V0SSHKeyUploadParams(varV0SSHKeyUploadParams)

	return err
}

type NullableV0SSHKeyUploadParams struct {
	value *V0SSHKeyUploadParams
	isSet bool
}

func (v NullableV0SSHKeyUploadParams) Get() *V0SSHKeyUploadParams {
	return v.value
}

func (v *NullableV0SSHKeyUploadParams) Set(val *V0SSHKeyUploadParams) {
	v.value = val
	v.isSet = true
}

func (v NullableV0SSHKeyUploadParams) IsSet() bool {
	return v.isSet
}

func (v *NullableV0SSHKeyUploadParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV0SSHKeyUploadParams(val *V0SSHKeyUploadParams) *NullableV0SSHKeyUploadParams {
	return &NullableV0SSHKeyUploadParams{value: val, isSet: true}
}

func (v NullableV0SSHKeyUploadParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV0SSHKeyUploadParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


