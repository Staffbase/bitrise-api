/*
Bitrise API

Official REST API for Bitrise.io

API version: 0.1
Contact: letsconnect@bitrise.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the V0AppUploadParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V0AppUploadParams{}

// V0AppUploadParams struct for V0AppUploadParams
type V0AppUploadParams struct {
	// The default branch of the repository. If it's not specified, it will be `master`.
	DefaultBranchName *string `json:"default_branch_name,omitempty"`
	// [Deprecated] You no longer need to provide this field.
	GitOwner *string `json:"git_owner,omitempty"`
	// [Deprecated] You no longer need to provide this field.
	GitRepoSlug *string `json:"git_repo_slug,omitempty"`
	// If `true` then the repository visibility setting will be public, in case of `false` it will be private
	IsPublic bool `json:"is_public"`
	// Toggles whether manual approval should be enabled for the app's builds. If it's not specified, it will be `true`.
	ManualApprovalEnabled *bool `json:"manual_approval_enabled,omitempty"`
	// The slug of the organization, who will be the owner of the application. If it's not specified, then the authenticated user will be the owner.
	OrganizationSlug *string `json:"organization_slug,omitempty"`
	// The git provider you are using, it can be `github`, `bitbucket`, `gitlab`, `gitlab-self-hosted` or `custom`
	Provider *string `json:"provider,omitempty"`
	// The URL of your repository
	RepoUrl string `json:"repo_url"`
	// The title of the application. If it's not specified, it will be the git repository's name.
	Title *string `json:"title,omitempty"`
	// [Deprecated] You no longer need to provide this field.
	Type *string `json:"type,omitempty"`
}

type _V0AppUploadParams V0AppUploadParams

// NewV0AppUploadParams instantiates a new V0AppUploadParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV0AppUploadParams(isPublic bool, repoUrl string) *V0AppUploadParams {
	this := V0AppUploadParams{}
	this.IsPublic = isPublic
	this.RepoUrl = repoUrl
	return &this
}

// NewV0AppUploadParamsWithDefaults instantiates a new V0AppUploadParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV0AppUploadParamsWithDefaults() *V0AppUploadParams {
	this := V0AppUploadParams{}
	return &this
}

// GetDefaultBranchName returns the DefaultBranchName field value if set, zero value otherwise.
func (o *V0AppUploadParams) GetDefaultBranchName() string {
	if o == nil || IsNil(o.DefaultBranchName) {
		var ret string
		return ret
	}
	return *o.DefaultBranchName
}

// GetDefaultBranchNameOk returns a tuple with the DefaultBranchName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0AppUploadParams) GetDefaultBranchNameOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultBranchName) {
		return nil, false
	}
	return o.DefaultBranchName, true
}

// HasDefaultBranchName returns a boolean if a field has been set.
func (o *V0AppUploadParams) HasDefaultBranchName() bool {
	if o != nil && !IsNil(o.DefaultBranchName) {
		return true
	}

	return false
}

// SetDefaultBranchName gets a reference to the given string and assigns it to the DefaultBranchName field.
func (o *V0AppUploadParams) SetDefaultBranchName(v string) {
	o.DefaultBranchName = &v
}

// GetGitOwner returns the GitOwner field value if set, zero value otherwise.
func (o *V0AppUploadParams) GetGitOwner() string {
	if o == nil || IsNil(o.GitOwner) {
		var ret string
		return ret
	}
	return *o.GitOwner
}

// GetGitOwnerOk returns a tuple with the GitOwner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0AppUploadParams) GetGitOwnerOk() (*string, bool) {
	if o == nil || IsNil(o.GitOwner) {
		return nil, false
	}
	return o.GitOwner, true
}

// HasGitOwner returns a boolean if a field has been set.
func (o *V0AppUploadParams) HasGitOwner() bool {
	if o != nil && !IsNil(o.GitOwner) {
		return true
	}

	return false
}

// SetGitOwner gets a reference to the given string and assigns it to the GitOwner field.
func (o *V0AppUploadParams) SetGitOwner(v string) {
	o.GitOwner = &v
}

// GetGitRepoSlug returns the GitRepoSlug field value if set, zero value otherwise.
func (o *V0AppUploadParams) GetGitRepoSlug() string {
	if o == nil || IsNil(o.GitRepoSlug) {
		var ret string
		return ret
	}
	return *o.GitRepoSlug
}

// GetGitRepoSlugOk returns a tuple with the GitRepoSlug field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0AppUploadParams) GetGitRepoSlugOk() (*string, bool) {
	if o == nil || IsNil(o.GitRepoSlug) {
		return nil, false
	}
	return o.GitRepoSlug, true
}

// HasGitRepoSlug returns a boolean if a field has been set.
func (o *V0AppUploadParams) HasGitRepoSlug() bool {
	if o != nil && !IsNil(o.GitRepoSlug) {
		return true
	}

	return false
}

// SetGitRepoSlug gets a reference to the given string and assigns it to the GitRepoSlug field.
func (o *V0AppUploadParams) SetGitRepoSlug(v string) {
	o.GitRepoSlug = &v
}

// GetIsPublic returns the IsPublic field value
func (o *V0AppUploadParams) GetIsPublic() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsPublic
}

// GetIsPublicOk returns a tuple with the IsPublic field value
// and a boolean to check if the value has been set.
func (o *V0AppUploadParams) GetIsPublicOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsPublic, true
}

// SetIsPublic sets field value
func (o *V0AppUploadParams) SetIsPublic(v bool) {
	o.IsPublic = v
}

// GetManualApprovalEnabled returns the ManualApprovalEnabled field value if set, zero value otherwise.
func (o *V0AppUploadParams) GetManualApprovalEnabled() bool {
	if o == nil || IsNil(o.ManualApprovalEnabled) {
		var ret bool
		return ret
	}
	return *o.ManualApprovalEnabled
}

// GetManualApprovalEnabledOk returns a tuple with the ManualApprovalEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0AppUploadParams) GetManualApprovalEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.ManualApprovalEnabled) {
		return nil, false
	}
	return o.ManualApprovalEnabled, true
}

// HasManualApprovalEnabled returns a boolean if a field has been set.
func (o *V0AppUploadParams) HasManualApprovalEnabled() bool {
	if o != nil && !IsNil(o.ManualApprovalEnabled) {
		return true
	}

	return false
}

// SetManualApprovalEnabled gets a reference to the given bool and assigns it to the ManualApprovalEnabled field.
func (o *V0AppUploadParams) SetManualApprovalEnabled(v bool) {
	o.ManualApprovalEnabled = &v
}

// GetOrganizationSlug returns the OrganizationSlug field value if set, zero value otherwise.
func (o *V0AppUploadParams) GetOrganizationSlug() string {
	if o == nil || IsNil(o.OrganizationSlug) {
		var ret string
		return ret
	}
	return *o.OrganizationSlug
}

// GetOrganizationSlugOk returns a tuple with the OrganizationSlug field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0AppUploadParams) GetOrganizationSlugOk() (*string, bool) {
	if o == nil || IsNil(o.OrganizationSlug) {
		return nil, false
	}
	return o.OrganizationSlug, true
}

// HasOrganizationSlug returns a boolean if a field has been set.
func (o *V0AppUploadParams) HasOrganizationSlug() bool {
	if o != nil && !IsNil(o.OrganizationSlug) {
		return true
	}

	return false
}

// SetOrganizationSlug gets a reference to the given string and assigns it to the OrganizationSlug field.
func (o *V0AppUploadParams) SetOrganizationSlug(v string) {
	o.OrganizationSlug = &v
}

// GetProvider returns the Provider field value if set, zero value otherwise.
func (o *V0AppUploadParams) GetProvider() string {
	if o == nil || IsNil(o.Provider) {
		var ret string
		return ret
	}
	return *o.Provider
}

// GetProviderOk returns a tuple with the Provider field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0AppUploadParams) GetProviderOk() (*string, bool) {
	if o == nil || IsNil(o.Provider) {
		return nil, false
	}
	return o.Provider, true
}

// HasProvider returns a boolean if a field has been set.
func (o *V0AppUploadParams) HasProvider() bool {
	if o != nil && !IsNil(o.Provider) {
		return true
	}

	return false
}

// SetProvider gets a reference to the given string and assigns it to the Provider field.
func (o *V0AppUploadParams) SetProvider(v string) {
	o.Provider = &v
}

// GetRepoUrl returns the RepoUrl field value
func (o *V0AppUploadParams) GetRepoUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RepoUrl
}

// GetRepoUrlOk returns a tuple with the RepoUrl field value
// and a boolean to check if the value has been set.
func (o *V0AppUploadParams) GetRepoUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RepoUrl, true
}

// SetRepoUrl sets field value
func (o *V0AppUploadParams) SetRepoUrl(v string) {
	o.RepoUrl = v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *V0AppUploadParams) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0AppUploadParams) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *V0AppUploadParams) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *V0AppUploadParams) SetTitle(v string) {
	o.Title = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *V0AppUploadParams) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0AppUploadParams) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *V0AppUploadParams) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *V0AppUploadParams) SetType(v string) {
	o.Type = &v
}

func (o V0AppUploadParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V0AppUploadParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DefaultBranchName) {
		toSerialize["default_branch_name"] = o.DefaultBranchName
	}
	if !IsNil(o.GitOwner) {
		toSerialize["git_owner"] = o.GitOwner
	}
	if !IsNil(o.GitRepoSlug) {
		toSerialize["git_repo_slug"] = o.GitRepoSlug
	}
	toSerialize["is_public"] = o.IsPublic
	if !IsNil(o.ManualApprovalEnabled) {
		toSerialize["manual_approval_enabled"] = o.ManualApprovalEnabled
	}
	if !IsNil(o.OrganizationSlug) {
		toSerialize["organization_slug"] = o.OrganizationSlug
	}
	if !IsNil(o.Provider) {
		toSerialize["provider"] = o.Provider
	}
	toSerialize["repo_url"] = o.RepoUrl
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

func (o *V0AppUploadParams) UnmarshalJSON(bytes []byte) (err error) {
    // This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"is_public",
		"repo_url",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varV0AppUploadParams := _V0AppUploadParams{}

	err = json.Unmarshal(bytes, &varV0AppUploadParams)

	if err != nil {
		return err
	}

	*o = V0AppUploadParams(varV0AppUploadParams)

	return err
}

type NullableV0AppUploadParams struct {
	value *V0AppUploadParams
	isSet bool
}

func (v NullableV0AppUploadParams) Get() *V0AppUploadParams {
	return v.value
}

func (v *NullableV0AppUploadParams) Set(val *V0AppUploadParams) {
	v.value = val
	v.isSet = true
}

func (v NullableV0AppUploadParams) IsSet() bool {
	return v.isSet
}

func (v *NullableV0AppUploadParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV0AppUploadParams(val *V0AppUploadParams) *NullableV0AppUploadParams {
	return &NullableV0AppUploadParams{value: val, isSet: true}
}

func (v NullableV0AppUploadParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV0AppUploadParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


