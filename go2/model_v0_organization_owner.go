/*
Bitrise API

Official REST API for Bitrise.io

API version: 0.1
Contact: letsconnect@bitrise.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the V0OrganizationOwner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V0OrganizationOwner{}

// V0OrganizationOwner struct for V0OrganizationOwner
type V0OrganizationOwner struct {
	Email *string `json:"email,omitempty"`
	Slug *string `json:"slug,omitempty"`
	Username *string `json:"username,omitempty"`
}

// NewV0OrganizationOwner instantiates a new V0OrganizationOwner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV0OrganizationOwner() *V0OrganizationOwner {
	this := V0OrganizationOwner{}
	return &this
}

// NewV0OrganizationOwnerWithDefaults instantiates a new V0OrganizationOwner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV0OrganizationOwnerWithDefaults() *V0OrganizationOwner {
	this := V0OrganizationOwner{}
	return &this
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *V0OrganizationOwner) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0OrganizationOwner) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *V0OrganizationOwner) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *V0OrganizationOwner) SetEmail(v string) {
	o.Email = &v
}

// GetSlug returns the Slug field value if set, zero value otherwise.
func (o *V0OrganizationOwner) GetSlug() string {
	if o == nil || IsNil(o.Slug) {
		var ret string
		return ret
	}
	return *o.Slug
}

// GetSlugOk returns a tuple with the Slug field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0OrganizationOwner) GetSlugOk() (*string, bool) {
	if o == nil || IsNil(o.Slug) {
		return nil, false
	}
	return o.Slug, true
}

// HasSlug returns a boolean if a field has been set.
func (o *V0OrganizationOwner) HasSlug() bool {
	if o != nil && !IsNil(o.Slug) {
		return true
	}

	return false
}

// SetSlug gets a reference to the given string and assigns it to the Slug field.
func (o *V0OrganizationOwner) SetSlug(v string) {
	o.Slug = &v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *V0OrganizationOwner) GetUsername() string {
	if o == nil || IsNil(o.Username) {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V0OrganizationOwner) GetUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.Username) {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *V0OrganizationOwner) HasUsername() bool {
	if o != nil && !IsNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *V0OrganizationOwner) SetUsername(v string) {
	o.Username = &v
}

func (o V0OrganizationOwner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V0OrganizationOwner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !IsNil(o.Slug) {
		toSerialize["slug"] = o.Slug
	}
	if !IsNil(o.Username) {
		toSerialize["username"] = o.Username
	}
	return toSerialize, nil
}

type NullableV0OrganizationOwner struct {
	value *V0OrganizationOwner
	isSet bool
}

func (v NullableV0OrganizationOwner) Get() *V0OrganizationOwner {
	return v.value
}

func (v *NullableV0OrganizationOwner) Set(val *V0OrganizationOwner) {
	v.value = val
	v.isSet = true
}

func (v NullableV0OrganizationOwner) IsSet() bool {
	return v.isSet
}

func (v *NullableV0OrganizationOwner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV0OrganizationOwner(val *V0OrganizationOwner) *NullableV0OrganizationOwner {
	return &NullableV0OrganizationOwner{value: val, isSet: true}
}

func (v NullableV0OrganizationOwner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV0OrganizationOwner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


