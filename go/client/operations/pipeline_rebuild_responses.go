// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Staffbase/bitrise-api/go/models"
)

// PipelineRebuildReader is a Reader for the PipelineRebuild structure.
type PipelineRebuildReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PipelineRebuildReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPipelineRebuildOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPipelineRebuildBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPipelineRebuildUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPipelineRebuildNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 412:
		result := NewPipelineRebuildPreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPipelineRebuildInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPipelineRebuildOK creates a PipelineRebuildOK with default headers values
func NewPipelineRebuildOK() *PipelineRebuildOK {
	return &PipelineRebuildOK{}
}

/*
PipelineRebuildOK describes a response with status code 200, with default header values.

OK
*/
type PipelineRebuildOK struct {
}

// IsSuccess returns true when this pipeline rebuild o k response has a 2xx status code
func (o *PipelineRebuildOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this pipeline rebuild o k response has a 3xx status code
func (o *PipelineRebuildOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this pipeline rebuild o k response has a 4xx status code
func (o *PipelineRebuildOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this pipeline rebuild o k response has a 5xx status code
func (o *PipelineRebuildOK) IsServerError() bool {
	return false
}

// IsCode returns true when this pipeline rebuild o k response a status code equal to that given
func (o *PipelineRebuildOK) IsCode(code int) bool {
	return code == 200
}

func (o *PipelineRebuildOK) Error() string {
	return fmt.Sprintf("[POST /apps/{app-slug}/pipelines/{pipeline-id}/rebuild][%d] pipelineRebuildOK ", 200)
}

func (o *PipelineRebuildOK) String() string {
	return fmt.Sprintf("[POST /apps/{app-slug}/pipelines/{pipeline-id}/rebuild][%d] pipelineRebuildOK ", 200)
}

func (o *PipelineRebuildOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPipelineRebuildBadRequest creates a PipelineRebuildBadRequest with default headers values
func NewPipelineRebuildBadRequest() *PipelineRebuildBadRequest {
	return &PipelineRebuildBadRequest{}
}

/*
PipelineRebuildBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type PipelineRebuildBadRequest struct {
	Payload *models.ServiceStandardErrorRespModel
}

// IsSuccess returns true when this pipeline rebuild bad request response has a 2xx status code
func (o *PipelineRebuildBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this pipeline rebuild bad request response has a 3xx status code
func (o *PipelineRebuildBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this pipeline rebuild bad request response has a 4xx status code
func (o *PipelineRebuildBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this pipeline rebuild bad request response has a 5xx status code
func (o *PipelineRebuildBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this pipeline rebuild bad request response a status code equal to that given
func (o *PipelineRebuildBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *PipelineRebuildBadRequest) Error() string {
	return fmt.Sprintf("[POST /apps/{app-slug}/pipelines/{pipeline-id}/rebuild][%d] pipelineRebuildBadRequest  %+v", 400, o.Payload)
}

func (o *PipelineRebuildBadRequest) String() string {
	return fmt.Sprintf("[POST /apps/{app-slug}/pipelines/{pipeline-id}/rebuild][%d] pipelineRebuildBadRequest  %+v", 400, o.Payload)
}

func (o *PipelineRebuildBadRequest) GetPayload() *models.ServiceStandardErrorRespModel {
	return o.Payload
}

func (o *PipelineRebuildBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ServiceStandardErrorRespModel)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPipelineRebuildUnauthorized creates a PipelineRebuildUnauthorized with default headers values
func NewPipelineRebuildUnauthorized() *PipelineRebuildUnauthorized {
	return &PipelineRebuildUnauthorized{}
}

/*
PipelineRebuildUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type PipelineRebuildUnauthorized struct {
	Payload *models.ServiceStandardErrorRespModel
}

// IsSuccess returns true when this pipeline rebuild unauthorized response has a 2xx status code
func (o *PipelineRebuildUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this pipeline rebuild unauthorized response has a 3xx status code
func (o *PipelineRebuildUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this pipeline rebuild unauthorized response has a 4xx status code
func (o *PipelineRebuildUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this pipeline rebuild unauthorized response has a 5xx status code
func (o *PipelineRebuildUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this pipeline rebuild unauthorized response a status code equal to that given
func (o *PipelineRebuildUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *PipelineRebuildUnauthorized) Error() string {
	return fmt.Sprintf("[POST /apps/{app-slug}/pipelines/{pipeline-id}/rebuild][%d] pipelineRebuildUnauthorized  %+v", 401, o.Payload)
}

func (o *PipelineRebuildUnauthorized) String() string {
	return fmt.Sprintf("[POST /apps/{app-slug}/pipelines/{pipeline-id}/rebuild][%d] pipelineRebuildUnauthorized  %+v", 401, o.Payload)
}

func (o *PipelineRebuildUnauthorized) GetPayload() *models.ServiceStandardErrorRespModel {
	return o.Payload
}

func (o *PipelineRebuildUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ServiceStandardErrorRespModel)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPipelineRebuildNotFound creates a PipelineRebuildNotFound with default headers values
func NewPipelineRebuildNotFound() *PipelineRebuildNotFound {
	return &PipelineRebuildNotFound{}
}

/*
PipelineRebuildNotFound describes a response with status code 404, with default header values.

Not Found
*/
type PipelineRebuildNotFound struct {
	Payload *models.ServiceStandardErrorRespModel
}

// IsSuccess returns true when this pipeline rebuild not found response has a 2xx status code
func (o *PipelineRebuildNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this pipeline rebuild not found response has a 3xx status code
func (o *PipelineRebuildNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this pipeline rebuild not found response has a 4xx status code
func (o *PipelineRebuildNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this pipeline rebuild not found response has a 5xx status code
func (o *PipelineRebuildNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this pipeline rebuild not found response a status code equal to that given
func (o *PipelineRebuildNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *PipelineRebuildNotFound) Error() string {
	return fmt.Sprintf("[POST /apps/{app-slug}/pipelines/{pipeline-id}/rebuild][%d] pipelineRebuildNotFound  %+v", 404, o.Payload)
}

func (o *PipelineRebuildNotFound) String() string {
	return fmt.Sprintf("[POST /apps/{app-slug}/pipelines/{pipeline-id}/rebuild][%d] pipelineRebuildNotFound  %+v", 404, o.Payload)
}

func (o *PipelineRebuildNotFound) GetPayload() *models.ServiceStandardErrorRespModel {
	return o.Payload
}

func (o *PipelineRebuildNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ServiceStandardErrorRespModel)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPipelineRebuildPreconditionFailed creates a PipelineRebuildPreconditionFailed with default headers values
func NewPipelineRebuildPreconditionFailed() *PipelineRebuildPreconditionFailed {
	return &PipelineRebuildPreconditionFailed{}
}

/*
PipelineRebuildPreconditionFailed describes a response with status code 412, with default header values.

Precondition Failed
*/
type PipelineRebuildPreconditionFailed struct {
	Payload *models.ServiceStandardErrorRespModel
}

// IsSuccess returns true when this pipeline rebuild precondition failed response has a 2xx status code
func (o *PipelineRebuildPreconditionFailed) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this pipeline rebuild precondition failed response has a 3xx status code
func (o *PipelineRebuildPreconditionFailed) IsRedirect() bool {
	return false
}

// IsClientError returns true when this pipeline rebuild precondition failed response has a 4xx status code
func (o *PipelineRebuildPreconditionFailed) IsClientError() bool {
	return true
}

// IsServerError returns true when this pipeline rebuild precondition failed response has a 5xx status code
func (o *PipelineRebuildPreconditionFailed) IsServerError() bool {
	return false
}

// IsCode returns true when this pipeline rebuild precondition failed response a status code equal to that given
func (o *PipelineRebuildPreconditionFailed) IsCode(code int) bool {
	return code == 412
}

func (o *PipelineRebuildPreconditionFailed) Error() string {
	return fmt.Sprintf("[POST /apps/{app-slug}/pipelines/{pipeline-id}/rebuild][%d] pipelineRebuildPreconditionFailed  %+v", 412, o.Payload)
}

func (o *PipelineRebuildPreconditionFailed) String() string {
	return fmt.Sprintf("[POST /apps/{app-slug}/pipelines/{pipeline-id}/rebuild][%d] pipelineRebuildPreconditionFailed  %+v", 412, o.Payload)
}

func (o *PipelineRebuildPreconditionFailed) GetPayload() *models.ServiceStandardErrorRespModel {
	return o.Payload
}

func (o *PipelineRebuildPreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ServiceStandardErrorRespModel)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPipelineRebuildInternalServerError creates a PipelineRebuildInternalServerError with default headers values
func NewPipelineRebuildInternalServerError() *PipelineRebuildInternalServerError {
	return &PipelineRebuildInternalServerError{}
}

/*
PipelineRebuildInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type PipelineRebuildInternalServerError struct {
	Payload *models.ServiceStandardErrorRespModel
}

// IsSuccess returns true when this pipeline rebuild internal server error response has a 2xx status code
func (o *PipelineRebuildInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this pipeline rebuild internal server error response has a 3xx status code
func (o *PipelineRebuildInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this pipeline rebuild internal server error response has a 4xx status code
func (o *PipelineRebuildInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this pipeline rebuild internal server error response has a 5xx status code
func (o *PipelineRebuildInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this pipeline rebuild internal server error response a status code equal to that given
func (o *PipelineRebuildInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *PipelineRebuildInternalServerError) Error() string {
	return fmt.Sprintf("[POST /apps/{app-slug}/pipelines/{pipeline-id}/rebuild][%d] pipelineRebuildInternalServerError  %+v", 500, o.Payload)
}

func (o *PipelineRebuildInternalServerError) String() string {
	return fmt.Sprintf("[POST /apps/{app-slug}/pipelines/{pipeline-id}/rebuild][%d] pipelineRebuildInternalServerError  %+v", 500, o.Payload)
}

func (o *PipelineRebuildInternalServerError) GetPayload() *models.ServiceStandardErrorRespModel {
	return o.Payload
}

func (o *PipelineRebuildInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ServiceStandardErrorRespModel)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
