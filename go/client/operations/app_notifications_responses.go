// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Staffbase/bitrise-api/go/models"
)

// AppNotificationsReader is a Reader for the AppNotifications structure.
type AppNotificationsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AppNotificationsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAppNotificationsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewAppNotificationsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewAppNotificationsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewAppNotificationsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewAppNotificationsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewAppNotificationsOK creates a AppNotificationsOK with default headers values
func NewAppNotificationsOK() *AppNotificationsOK {
	return &AppNotificationsOK{}
}

/*
AppNotificationsOK describes a response with status code 200, with default header values.

OK
*/
type AppNotificationsOK struct {
	Payload *models.V0AppNotificationSettingsUpdateResponse
}

// IsSuccess returns true when this app notifications o k response has a 2xx status code
func (o *AppNotificationsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this app notifications o k response has a 3xx status code
func (o *AppNotificationsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this app notifications o k response has a 4xx status code
func (o *AppNotificationsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this app notifications o k response has a 5xx status code
func (o *AppNotificationsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this app notifications o k response a status code equal to that given
func (o *AppNotificationsOK) IsCode(code int) bool {
	return code == 200
}

func (o *AppNotificationsOK) Error() string {
	return fmt.Sprintf("[PATCH /apps/{app-slug}/update-email-notifications][%d] appNotificationsOK  %+v", 200, o.Payload)
}

func (o *AppNotificationsOK) String() string {
	return fmt.Sprintf("[PATCH /apps/{app-slug}/update-email-notifications][%d] appNotificationsOK  %+v", 200, o.Payload)
}

func (o *AppNotificationsOK) GetPayload() *models.V0AppNotificationSettingsUpdateResponse {
	return o.Payload
}

func (o *AppNotificationsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.V0AppNotificationSettingsUpdateResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAppNotificationsBadRequest creates a AppNotificationsBadRequest with default headers values
func NewAppNotificationsBadRequest() *AppNotificationsBadRequest {
	return &AppNotificationsBadRequest{}
}

/*
AppNotificationsBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type AppNotificationsBadRequest struct {
	Payload *models.ServiceStandardErrorRespModel
}

// IsSuccess returns true when this app notifications bad request response has a 2xx status code
func (o *AppNotificationsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this app notifications bad request response has a 3xx status code
func (o *AppNotificationsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this app notifications bad request response has a 4xx status code
func (o *AppNotificationsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this app notifications bad request response has a 5xx status code
func (o *AppNotificationsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this app notifications bad request response a status code equal to that given
func (o *AppNotificationsBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *AppNotificationsBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /apps/{app-slug}/update-email-notifications][%d] appNotificationsBadRequest  %+v", 400, o.Payload)
}

func (o *AppNotificationsBadRequest) String() string {
	return fmt.Sprintf("[PATCH /apps/{app-slug}/update-email-notifications][%d] appNotificationsBadRequest  %+v", 400, o.Payload)
}

func (o *AppNotificationsBadRequest) GetPayload() *models.ServiceStandardErrorRespModel {
	return o.Payload
}

func (o *AppNotificationsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ServiceStandardErrorRespModel)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAppNotificationsUnauthorized creates a AppNotificationsUnauthorized with default headers values
func NewAppNotificationsUnauthorized() *AppNotificationsUnauthorized {
	return &AppNotificationsUnauthorized{}
}

/*
AppNotificationsUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type AppNotificationsUnauthorized struct {
	Payload *models.ServiceStandardErrorRespModel
}

// IsSuccess returns true when this app notifications unauthorized response has a 2xx status code
func (o *AppNotificationsUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this app notifications unauthorized response has a 3xx status code
func (o *AppNotificationsUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this app notifications unauthorized response has a 4xx status code
func (o *AppNotificationsUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this app notifications unauthorized response has a 5xx status code
func (o *AppNotificationsUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this app notifications unauthorized response a status code equal to that given
func (o *AppNotificationsUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *AppNotificationsUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /apps/{app-slug}/update-email-notifications][%d] appNotificationsUnauthorized  %+v", 401, o.Payload)
}

func (o *AppNotificationsUnauthorized) String() string {
	return fmt.Sprintf("[PATCH /apps/{app-slug}/update-email-notifications][%d] appNotificationsUnauthorized  %+v", 401, o.Payload)
}

func (o *AppNotificationsUnauthorized) GetPayload() *models.ServiceStandardErrorRespModel {
	return o.Payload
}

func (o *AppNotificationsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ServiceStandardErrorRespModel)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAppNotificationsNotFound creates a AppNotificationsNotFound with default headers values
func NewAppNotificationsNotFound() *AppNotificationsNotFound {
	return &AppNotificationsNotFound{}
}

/*
AppNotificationsNotFound describes a response with status code 404, with default header values.

Not Found
*/
type AppNotificationsNotFound struct {
	Payload *models.ServiceStandardErrorRespModel
}

// IsSuccess returns true when this app notifications not found response has a 2xx status code
func (o *AppNotificationsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this app notifications not found response has a 3xx status code
func (o *AppNotificationsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this app notifications not found response has a 4xx status code
func (o *AppNotificationsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this app notifications not found response has a 5xx status code
func (o *AppNotificationsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this app notifications not found response a status code equal to that given
func (o *AppNotificationsNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *AppNotificationsNotFound) Error() string {
	return fmt.Sprintf("[PATCH /apps/{app-slug}/update-email-notifications][%d] appNotificationsNotFound  %+v", 404, o.Payload)
}

func (o *AppNotificationsNotFound) String() string {
	return fmt.Sprintf("[PATCH /apps/{app-slug}/update-email-notifications][%d] appNotificationsNotFound  %+v", 404, o.Payload)
}

func (o *AppNotificationsNotFound) GetPayload() *models.ServiceStandardErrorRespModel {
	return o.Payload
}

func (o *AppNotificationsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ServiceStandardErrorRespModel)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAppNotificationsInternalServerError creates a AppNotificationsInternalServerError with default headers values
func NewAppNotificationsInternalServerError() *AppNotificationsInternalServerError {
	return &AppNotificationsInternalServerError{}
}

/*
AppNotificationsInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type AppNotificationsInternalServerError struct {
	Payload *models.ServiceStandardErrorRespModel
}

// IsSuccess returns true when this app notifications internal server error response has a 2xx status code
func (o *AppNotificationsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this app notifications internal server error response has a 3xx status code
func (o *AppNotificationsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this app notifications internal server error response has a 4xx status code
func (o *AppNotificationsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this app notifications internal server error response has a 5xx status code
func (o *AppNotificationsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this app notifications internal server error response a status code equal to that given
func (o *AppNotificationsInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *AppNotificationsInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /apps/{app-slug}/update-email-notifications][%d] appNotificationsInternalServerError  %+v", 500, o.Payload)
}

func (o *AppNotificationsInternalServerError) String() string {
	return fmt.Sprintf("[PATCH /apps/{app-slug}/update-email-notifications][%d] appNotificationsInternalServerError  %+v", 500, o.Payload)
}

func (o *AppNotificationsInternalServerError) GetPayload() *models.ServiceStandardErrorRespModel {
	return o.Payload
}

func (o *AppNotificationsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ServiceStandardErrorRespModel)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
