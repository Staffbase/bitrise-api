// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewPipelineListAllParams creates a new PipelineListAllParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewPipelineListAllParams() *PipelineListAllParams {
	return &PipelineListAllParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewPipelineListAllParamsWithTimeout creates a new PipelineListAllParams object
// with the ability to set a timeout on a request.
func NewPipelineListAllParamsWithTimeout(timeout time.Duration) *PipelineListAllParams {
	return &PipelineListAllParams{
		timeout: timeout,
	}
}

// NewPipelineListAllParamsWithContext creates a new PipelineListAllParams object
// with the ability to set a context for a request.
func NewPipelineListAllParamsWithContext(ctx context.Context) *PipelineListAllParams {
	return &PipelineListAllParams{
		Context: ctx,
	}
}

// NewPipelineListAllParamsWithHTTPClient creates a new PipelineListAllParams object
// with the ability to set a custom HTTPClient for a request.
func NewPipelineListAllParamsWithHTTPClient(client *http.Client) *PipelineListAllParams {
	return &PipelineListAllParams{
		HTTPClient: client,
	}
}

/*
PipelineListAllParams contains all the parameters to send to the API endpoint

	for the pipeline list all operation.

	Typically these are written to a http.Request.
*/
type PipelineListAllParams struct {

	/* Limit.

	   Max number of elements per page (default: 10)
	*/
	Limit *int64

	/* Next.

	   Getting pipelines/standalone builds before the given parameter (RFC3339 time format)
	*/
	Next *string

	/* OwnerSlug.

	   The slug of the owner of the app or apps
	*/
	OwnerSlug *string

	/* Status.

	   The status of the pipelines/standalone build: initializing, on_hold, running, succeeded, failed, aborted, succeeded_with_abort
	*/
	Status *int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the pipeline list all params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PipelineListAllParams) WithDefaults() *PipelineListAllParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the pipeline list all params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PipelineListAllParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the pipeline list all params
func (o *PipelineListAllParams) WithTimeout(timeout time.Duration) *PipelineListAllParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the pipeline list all params
func (o *PipelineListAllParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the pipeline list all params
func (o *PipelineListAllParams) WithContext(ctx context.Context) *PipelineListAllParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the pipeline list all params
func (o *PipelineListAllParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the pipeline list all params
func (o *PipelineListAllParams) WithHTTPClient(client *http.Client) *PipelineListAllParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the pipeline list all params
func (o *PipelineListAllParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithLimit adds the limit to the pipeline list all params
func (o *PipelineListAllParams) WithLimit(limit *int64) *PipelineListAllParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the pipeline list all params
func (o *PipelineListAllParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithNext adds the next to the pipeline list all params
func (o *PipelineListAllParams) WithNext(next *string) *PipelineListAllParams {
	o.SetNext(next)
	return o
}

// SetNext adds the next to the pipeline list all params
func (o *PipelineListAllParams) SetNext(next *string) {
	o.Next = next
}

// WithOwnerSlug adds the ownerSlug to the pipeline list all params
func (o *PipelineListAllParams) WithOwnerSlug(ownerSlug *string) *PipelineListAllParams {
	o.SetOwnerSlug(ownerSlug)
	return o
}

// SetOwnerSlug adds the ownerSlug to the pipeline list all params
func (o *PipelineListAllParams) SetOwnerSlug(ownerSlug *string) {
	o.OwnerSlug = ownerSlug
}

// WithStatus adds the status to the pipeline list all params
func (o *PipelineListAllParams) WithStatus(status *int64) *PipelineListAllParams {
	o.SetStatus(status)
	return o
}

// SetStatus adds the status to the pipeline list all params
func (o *PipelineListAllParams) SetStatus(status *int64) {
	o.Status = status
}

// WriteToRequest writes these params to a swagger request
func (o *PipelineListAllParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Limit != nil {

		// query param limit
		var qrLimit int64

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.Next != nil {

		// query param next
		var qrNext string

		if o.Next != nil {
			qrNext = *o.Next
		}
		qNext := qrNext
		if qNext != "" {

			if err := r.SetQueryParam("next", qNext); err != nil {
				return err
			}
		}
	}

	if o.OwnerSlug != nil {

		// query param owner_slug
		var qrOwnerSlug string

		if o.OwnerSlug != nil {
			qrOwnerSlug = *o.OwnerSlug
		}
		qOwnerSlug := qrOwnerSlug
		if qOwnerSlug != "" {

			if err := r.SetQueryParam("owner_slug", qOwnerSlug); err != nil {
				return err
			}
		}
	}

	if o.Status != nil {

		// query param status
		var qrStatus int64

		if o.Status != nil {
			qrStatus = *o.Status
		}
		qStatus := swag.FormatInt64(qrStatus)
		if qStatus != "" {

			if err := r.SetQueryParam("status", qStatus); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
