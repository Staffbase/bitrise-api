// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Staffbase/bitrise-api/go/models"
)

// AppUpdateReader is a Reader for the AppUpdate structure.
type AppUpdateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AppUpdateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAppUpdateOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewAppUpdateBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewAppUpdateUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewAppUpdateNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewAppUpdateInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PATCH /apps/{app-slug}] app-update", response, response.Code())
	}
}

// NewAppUpdateOK creates a AppUpdateOK with default headers values
func NewAppUpdateOK() *AppUpdateOK {
	return &AppUpdateOK{}
}

/*
AppUpdateOK describes a response with status code 200, with default header values.

OK
*/
type AppUpdateOK struct {
	Payload *models.V0AppUpdateRespModel
}

// IsSuccess returns true when this app update o k response has a 2xx status code
func (o *AppUpdateOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this app update o k response has a 3xx status code
func (o *AppUpdateOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this app update o k response has a 4xx status code
func (o *AppUpdateOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this app update o k response has a 5xx status code
func (o *AppUpdateOK) IsServerError() bool {
	return false
}

// IsCode returns true when this app update o k response a status code equal to that given
func (o *AppUpdateOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the app update o k response
func (o *AppUpdateOK) Code() int {
	return 200
}

func (o *AppUpdateOK) Error() string {
	return fmt.Sprintf("[PATCH /apps/{app-slug}][%d] appUpdateOK  %+v", 200, o.Payload)
}

func (o *AppUpdateOK) String() string {
	return fmt.Sprintf("[PATCH /apps/{app-slug}][%d] appUpdateOK  %+v", 200, o.Payload)
}

func (o *AppUpdateOK) GetPayload() *models.V0AppUpdateRespModel {
	return o.Payload
}

func (o *AppUpdateOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.V0AppUpdateRespModel)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAppUpdateBadRequest creates a AppUpdateBadRequest with default headers values
func NewAppUpdateBadRequest() *AppUpdateBadRequest {
	return &AppUpdateBadRequest{}
}

/*
AppUpdateBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type AppUpdateBadRequest struct {
	Payload *models.ServiceStandardErrorRespModel
}

// IsSuccess returns true when this app update bad request response has a 2xx status code
func (o *AppUpdateBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this app update bad request response has a 3xx status code
func (o *AppUpdateBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this app update bad request response has a 4xx status code
func (o *AppUpdateBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this app update bad request response has a 5xx status code
func (o *AppUpdateBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this app update bad request response a status code equal to that given
func (o *AppUpdateBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the app update bad request response
func (o *AppUpdateBadRequest) Code() int {
	return 400
}

func (o *AppUpdateBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /apps/{app-slug}][%d] appUpdateBadRequest  %+v", 400, o.Payload)
}

func (o *AppUpdateBadRequest) String() string {
	return fmt.Sprintf("[PATCH /apps/{app-slug}][%d] appUpdateBadRequest  %+v", 400, o.Payload)
}

func (o *AppUpdateBadRequest) GetPayload() *models.ServiceStandardErrorRespModel {
	return o.Payload
}

func (o *AppUpdateBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ServiceStandardErrorRespModel)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAppUpdateUnauthorized creates a AppUpdateUnauthorized with default headers values
func NewAppUpdateUnauthorized() *AppUpdateUnauthorized {
	return &AppUpdateUnauthorized{}
}

/*
AppUpdateUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type AppUpdateUnauthorized struct {
	Payload *models.ServiceStandardErrorRespModel
}

// IsSuccess returns true when this app update unauthorized response has a 2xx status code
func (o *AppUpdateUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this app update unauthorized response has a 3xx status code
func (o *AppUpdateUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this app update unauthorized response has a 4xx status code
func (o *AppUpdateUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this app update unauthorized response has a 5xx status code
func (o *AppUpdateUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this app update unauthorized response a status code equal to that given
func (o *AppUpdateUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the app update unauthorized response
func (o *AppUpdateUnauthorized) Code() int {
	return 401
}

func (o *AppUpdateUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /apps/{app-slug}][%d] appUpdateUnauthorized  %+v", 401, o.Payload)
}

func (o *AppUpdateUnauthorized) String() string {
	return fmt.Sprintf("[PATCH /apps/{app-slug}][%d] appUpdateUnauthorized  %+v", 401, o.Payload)
}

func (o *AppUpdateUnauthorized) GetPayload() *models.ServiceStandardErrorRespModel {
	return o.Payload
}

func (o *AppUpdateUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ServiceStandardErrorRespModel)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAppUpdateNotFound creates a AppUpdateNotFound with default headers values
func NewAppUpdateNotFound() *AppUpdateNotFound {
	return &AppUpdateNotFound{}
}

/*
AppUpdateNotFound describes a response with status code 404, with default header values.

Not Found
*/
type AppUpdateNotFound struct {
	Payload *models.ServiceStandardErrorRespModel
}

// IsSuccess returns true when this app update not found response has a 2xx status code
func (o *AppUpdateNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this app update not found response has a 3xx status code
func (o *AppUpdateNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this app update not found response has a 4xx status code
func (o *AppUpdateNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this app update not found response has a 5xx status code
func (o *AppUpdateNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this app update not found response a status code equal to that given
func (o *AppUpdateNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the app update not found response
func (o *AppUpdateNotFound) Code() int {
	return 404
}

func (o *AppUpdateNotFound) Error() string {
	return fmt.Sprintf("[PATCH /apps/{app-slug}][%d] appUpdateNotFound  %+v", 404, o.Payload)
}

func (o *AppUpdateNotFound) String() string {
	return fmt.Sprintf("[PATCH /apps/{app-slug}][%d] appUpdateNotFound  %+v", 404, o.Payload)
}

func (o *AppUpdateNotFound) GetPayload() *models.ServiceStandardErrorRespModel {
	return o.Payload
}

func (o *AppUpdateNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ServiceStandardErrorRespModel)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAppUpdateInternalServerError creates a AppUpdateInternalServerError with default headers values
func NewAppUpdateInternalServerError() *AppUpdateInternalServerError {
	return &AppUpdateInternalServerError{}
}

/*
AppUpdateInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type AppUpdateInternalServerError struct {
	Payload *models.ServiceStandardErrorRespModel
}

// IsSuccess returns true when this app update internal server error response has a 2xx status code
func (o *AppUpdateInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this app update internal server error response has a 3xx status code
func (o *AppUpdateInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this app update internal server error response has a 4xx status code
func (o *AppUpdateInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this app update internal server error response has a 5xx status code
func (o *AppUpdateInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this app update internal server error response a status code equal to that given
func (o *AppUpdateInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the app update internal server error response
func (o *AppUpdateInternalServerError) Code() int {
	return 500
}

func (o *AppUpdateInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /apps/{app-slug}][%d] appUpdateInternalServerError  %+v", 500, o.Payload)
}

func (o *AppUpdateInternalServerError) String() string {
	return fmt.Sprintf("[PATCH /apps/{app-slug}][%d] appUpdateInternalServerError  %+v", 500, o.Payload)
}

func (o *AppUpdateInternalServerError) GetPayload() *models.ServiceStandardErrorRespModel {
	return o.Payload
}

func (o *AppUpdateInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ServiceStandardErrorRespModel)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
