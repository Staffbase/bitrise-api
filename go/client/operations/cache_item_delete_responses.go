// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Staffbase/bitrise-api/go/models"
)

// CacheItemDeleteReader is a Reader for the CacheItemDelete structure.
type CacheItemDeleteReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CacheItemDeleteReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCacheItemDeleteOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCacheItemDeleteBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewCacheItemDeleteUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCacheItemDeleteNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCacheItemDeleteInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /apps/{app-slug}/cache-items/{cache-item-id}] cache-item-delete", response, response.Code())
	}
}

// NewCacheItemDeleteOK creates a CacheItemDeleteOK with default headers values
func NewCacheItemDeleteOK() *CacheItemDeleteOK {
	return &CacheItemDeleteOK{}
}

/*
CacheItemDeleteOK describes a response with status code 200, with default header values.

OK
*/
type CacheItemDeleteOK struct {
}

// IsSuccess returns true when this cache item delete o k response has a 2xx status code
func (o *CacheItemDeleteOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this cache item delete o k response has a 3xx status code
func (o *CacheItemDeleteOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cache item delete o k response has a 4xx status code
func (o *CacheItemDeleteOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this cache item delete o k response has a 5xx status code
func (o *CacheItemDeleteOK) IsServerError() bool {
	return false
}

// IsCode returns true when this cache item delete o k response a status code equal to that given
func (o *CacheItemDeleteOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the cache item delete o k response
func (o *CacheItemDeleteOK) Code() int {
	return 200
}

func (o *CacheItemDeleteOK) Error() string {
	return fmt.Sprintf("[DELETE /apps/{app-slug}/cache-items/{cache-item-id}][%d] cacheItemDeleteOK ", 200)
}

func (o *CacheItemDeleteOK) String() string {
	return fmt.Sprintf("[DELETE /apps/{app-slug}/cache-items/{cache-item-id}][%d] cacheItemDeleteOK ", 200)
}

func (o *CacheItemDeleteOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCacheItemDeleteBadRequest creates a CacheItemDeleteBadRequest with default headers values
func NewCacheItemDeleteBadRequest() *CacheItemDeleteBadRequest {
	return &CacheItemDeleteBadRequest{}
}

/*
CacheItemDeleteBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type CacheItemDeleteBadRequest struct {
	Payload *models.ServiceStandardErrorRespModel
}

// IsSuccess returns true when this cache item delete bad request response has a 2xx status code
func (o *CacheItemDeleteBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this cache item delete bad request response has a 3xx status code
func (o *CacheItemDeleteBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cache item delete bad request response has a 4xx status code
func (o *CacheItemDeleteBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this cache item delete bad request response has a 5xx status code
func (o *CacheItemDeleteBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this cache item delete bad request response a status code equal to that given
func (o *CacheItemDeleteBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the cache item delete bad request response
func (o *CacheItemDeleteBadRequest) Code() int {
	return 400
}

func (o *CacheItemDeleteBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /apps/{app-slug}/cache-items/{cache-item-id}][%d] cacheItemDeleteBadRequest  %+v", 400, o.Payload)
}

func (o *CacheItemDeleteBadRequest) String() string {
	return fmt.Sprintf("[DELETE /apps/{app-slug}/cache-items/{cache-item-id}][%d] cacheItemDeleteBadRequest  %+v", 400, o.Payload)
}

func (o *CacheItemDeleteBadRequest) GetPayload() *models.ServiceStandardErrorRespModel {
	return o.Payload
}

func (o *CacheItemDeleteBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ServiceStandardErrorRespModel)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCacheItemDeleteUnauthorized creates a CacheItemDeleteUnauthorized with default headers values
func NewCacheItemDeleteUnauthorized() *CacheItemDeleteUnauthorized {
	return &CacheItemDeleteUnauthorized{}
}

/*
CacheItemDeleteUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type CacheItemDeleteUnauthorized struct {
	Payload *models.ServiceStandardErrorRespModel
}

// IsSuccess returns true when this cache item delete unauthorized response has a 2xx status code
func (o *CacheItemDeleteUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this cache item delete unauthorized response has a 3xx status code
func (o *CacheItemDeleteUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cache item delete unauthorized response has a 4xx status code
func (o *CacheItemDeleteUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this cache item delete unauthorized response has a 5xx status code
func (o *CacheItemDeleteUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this cache item delete unauthorized response a status code equal to that given
func (o *CacheItemDeleteUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the cache item delete unauthorized response
func (o *CacheItemDeleteUnauthorized) Code() int {
	return 401
}

func (o *CacheItemDeleteUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /apps/{app-slug}/cache-items/{cache-item-id}][%d] cacheItemDeleteUnauthorized  %+v", 401, o.Payload)
}

func (o *CacheItemDeleteUnauthorized) String() string {
	return fmt.Sprintf("[DELETE /apps/{app-slug}/cache-items/{cache-item-id}][%d] cacheItemDeleteUnauthorized  %+v", 401, o.Payload)
}

func (o *CacheItemDeleteUnauthorized) GetPayload() *models.ServiceStandardErrorRespModel {
	return o.Payload
}

func (o *CacheItemDeleteUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ServiceStandardErrorRespModel)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCacheItemDeleteNotFound creates a CacheItemDeleteNotFound with default headers values
func NewCacheItemDeleteNotFound() *CacheItemDeleteNotFound {
	return &CacheItemDeleteNotFound{}
}

/*
CacheItemDeleteNotFound describes a response with status code 404, with default header values.

Not Found
*/
type CacheItemDeleteNotFound struct {
	Payload *models.ServiceStandardErrorRespModel
}

// IsSuccess returns true when this cache item delete not found response has a 2xx status code
func (o *CacheItemDeleteNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this cache item delete not found response has a 3xx status code
func (o *CacheItemDeleteNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cache item delete not found response has a 4xx status code
func (o *CacheItemDeleteNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this cache item delete not found response has a 5xx status code
func (o *CacheItemDeleteNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this cache item delete not found response a status code equal to that given
func (o *CacheItemDeleteNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the cache item delete not found response
func (o *CacheItemDeleteNotFound) Code() int {
	return 404
}

func (o *CacheItemDeleteNotFound) Error() string {
	return fmt.Sprintf("[DELETE /apps/{app-slug}/cache-items/{cache-item-id}][%d] cacheItemDeleteNotFound  %+v", 404, o.Payload)
}

func (o *CacheItemDeleteNotFound) String() string {
	return fmt.Sprintf("[DELETE /apps/{app-slug}/cache-items/{cache-item-id}][%d] cacheItemDeleteNotFound  %+v", 404, o.Payload)
}

func (o *CacheItemDeleteNotFound) GetPayload() *models.ServiceStandardErrorRespModel {
	return o.Payload
}

func (o *CacheItemDeleteNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ServiceStandardErrorRespModel)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCacheItemDeleteInternalServerError creates a CacheItemDeleteInternalServerError with default headers values
func NewCacheItemDeleteInternalServerError() *CacheItemDeleteInternalServerError {
	return &CacheItemDeleteInternalServerError{}
}

/*
CacheItemDeleteInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type CacheItemDeleteInternalServerError struct {
	Payload *models.ServiceStandardErrorRespModel
}

// IsSuccess returns true when this cache item delete internal server error response has a 2xx status code
func (o *CacheItemDeleteInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this cache item delete internal server error response has a 3xx status code
func (o *CacheItemDeleteInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cache item delete internal server error response has a 4xx status code
func (o *CacheItemDeleteInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this cache item delete internal server error response has a 5xx status code
func (o *CacheItemDeleteInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this cache item delete internal server error response a status code equal to that given
func (o *CacheItemDeleteInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the cache item delete internal server error response
func (o *CacheItemDeleteInternalServerError) Code() int {
	return 500
}

func (o *CacheItemDeleteInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /apps/{app-slug}/cache-items/{cache-item-id}][%d] cacheItemDeleteInternalServerError  %+v", 500, o.Payload)
}

func (o *CacheItemDeleteInternalServerError) String() string {
	return fmt.Sprintf("[DELETE /apps/{app-slug}/cache-items/{cache-item-id}][%d] cacheItemDeleteInternalServerError  %+v", 500, o.Payload)
}

func (o *CacheItemDeleteInternalServerError) GetPayload() *models.ServiceStandardErrorRespModel {
	return o.Payload
}

func (o *CacheItemDeleteInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ServiceStandardErrorRespModel)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
