// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Staffbase/bitrise-api/go/models"
)

// ArtifactUpdateReader is a Reader for the ArtifactUpdate structure.
type ArtifactUpdateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ArtifactUpdateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewArtifactUpdateOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewArtifactUpdateBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewArtifactUpdateUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewArtifactUpdateNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewArtifactUpdateInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewArtifactUpdateOK creates a ArtifactUpdateOK with default headers values
func NewArtifactUpdateOK() *ArtifactUpdateOK {
	return &ArtifactUpdateOK{}
}

/*
ArtifactUpdateOK describes a response with status code 200, with default header values.

OK
*/
type ArtifactUpdateOK struct {
	Payload *models.V0ArtifactShowResponseModel
}

// IsSuccess returns true when this artifact update o k response has a 2xx status code
func (o *ArtifactUpdateOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this artifact update o k response has a 3xx status code
func (o *ArtifactUpdateOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this artifact update o k response has a 4xx status code
func (o *ArtifactUpdateOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this artifact update o k response has a 5xx status code
func (o *ArtifactUpdateOK) IsServerError() bool {
	return false
}

// IsCode returns true when this artifact update o k response a status code equal to that given
func (o *ArtifactUpdateOK) IsCode(code int) bool {
	return code == 200
}

func (o *ArtifactUpdateOK) Error() string {
	return fmt.Sprintf("[PATCH /apps/{app-slug}/builds/{build-slug}/artifacts/{artifact-slug}][%d] artifactUpdateOK  %+v", 200, o.Payload)
}

func (o *ArtifactUpdateOK) String() string {
	return fmt.Sprintf("[PATCH /apps/{app-slug}/builds/{build-slug}/artifacts/{artifact-slug}][%d] artifactUpdateOK  %+v", 200, o.Payload)
}

func (o *ArtifactUpdateOK) GetPayload() *models.V0ArtifactShowResponseModel {
	return o.Payload
}

func (o *ArtifactUpdateOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.V0ArtifactShowResponseModel)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewArtifactUpdateBadRequest creates a ArtifactUpdateBadRequest with default headers values
func NewArtifactUpdateBadRequest() *ArtifactUpdateBadRequest {
	return &ArtifactUpdateBadRequest{}
}

/*
ArtifactUpdateBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type ArtifactUpdateBadRequest struct {
	Payload *models.ServiceStandardErrorRespModel
}

// IsSuccess returns true when this artifact update bad request response has a 2xx status code
func (o *ArtifactUpdateBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this artifact update bad request response has a 3xx status code
func (o *ArtifactUpdateBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this artifact update bad request response has a 4xx status code
func (o *ArtifactUpdateBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this artifact update bad request response has a 5xx status code
func (o *ArtifactUpdateBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this artifact update bad request response a status code equal to that given
func (o *ArtifactUpdateBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *ArtifactUpdateBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /apps/{app-slug}/builds/{build-slug}/artifacts/{artifact-slug}][%d] artifactUpdateBadRequest  %+v", 400, o.Payload)
}

func (o *ArtifactUpdateBadRequest) String() string {
	return fmt.Sprintf("[PATCH /apps/{app-slug}/builds/{build-slug}/artifacts/{artifact-slug}][%d] artifactUpdateBadRequest  %+v", 400, o.Payload)
}

func (o *ArtifactUpdateBadRequest) GetPayload() *models.ServiceStandardErrorRespModel {
	return o.Payload
}

func (o *ArtifactUpdateBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ServiceStandardErrorRespModel)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewArtifactUpdateUnauthorized creates a ArtifactUpdateUnauthorized with default headers values
func NewArtifactUpdateUnauthorized() *ArtifactUpdateUnauthorized {
	return &ArtifactUpdateUnauthorized{}
}

/*
ArtifactUpdateUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type ArtifactUpdateUnauthorized struct {
	Payload *models.ServiceStandardErrorRespModel
}

// IsSuccess returns true when this artifact update unauthorized response has a 2xx status code
func (o *ArtifactUpdateUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this artifact update unauthorized response has a 3xx status code
func (o *ArtifactUpdateUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this artifact update unauthorized response has a 4xx status code
func (o *ArtifactUpdateUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this artifact update unauthorized response has a 5xx status code
func (o *ArtifactUpdateUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this artifact update unauthorized response a status code equal to that given
func (o *ArtifactUpdateUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *ArtifactUpdateUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /apps/{app-slug}/builds/{build-slug}/artifacts/{artifact-slug}][%d] artifactUpdateUnauthorized  %+v", 401, o.Payload)
}

func (o *ArtifactUpdateUnauthorized) String() string {
	return fmt.Sprintf("[PATCH /apps/{app-slug}/builds/{build-slug}/artifacts/{artifact-slug}][%d] artifactUpdateUnauthorized  %+v", 401, o.Payload)
}

func (o *ArtifactUpdateUnauthorized) GetPayload() *models.ServiceStandardErrorRespModel {
	return o.Payload
}

func (o *ArtifactUpdateUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ServiceStandardErrorRespModel)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewArtifactUpdateNotFound creates a ArtifactUpdateNotFound with default headers values
func NewArtifactUpdateNotFound() *ArtifactUpdateNotFound {
	return &ArtifactUpdateNotFound{}
}

/*
ArtifactUpdateNotFound describes a response with status code 404, with default header values.

Not Found
*/
type ArtifactUpdateNotFound struct {
	Payload *models.ServiceStandardErrorRespModel
}

// IsSuccess returns true when this artifact update not found response has a 2xx status code
func (o *ArtifactUpdateNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this artifact update not found response has a 3xx status code
func (o *ArtifactUpdateNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this artifact update not found response has a 4xx status code
func (o *ArtifactUpdateNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this artifact update not found response has a 5xx status code
func (o *ArtifactUpdateNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this artifact update not found response a status code equal to that given
func (o *ArtifactUpdateNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *ArtifactUpdateNotFound) Error() string {
	return fmt.Sprintf("[PATCH /apps/{app-slug}/builds/{build-slug}/artifacts/{artifact-slug}][%d] artifactUpdateNotFound  %+v", 404, o.Payload)
}

func (o *ArtifactUpdateNotFound) String() string {
	return fmt.Sprintf("[PATCH /apps/{app-slug}/builds/{build-slug}/artifacts/{artifact-slug}][%d] artifactUpdateNotFound  %+v", 404, o.Payload)
}

func (o *ArtifactUpdateNotFound) GetPayload() *models.ServiceStandardErrorRespModel {
	return o.Payload
}

func (o *ArtifactUpdateNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ServiceStandardErrorRespModel)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewArtifactUpdateInternalServerError creates a ArtifactUpdateInternalServerError with default headers values
func NewArtifactUpdateInternalServerError() *ArtifactUpdateInternalServerError {
	return &ArtifactUpdateInternalServerError{}
}

/*
ArtifactUpdateInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type ArtifactUpdateInternalServerError struct {
	Payload *models.ServiceStandardErrorRespModel
}

// IsSuccess returns true when this artifact update internal server error response has a 2xx status code
func (o *ArtifactUpdateInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this artifact update internal server error response has a 3xx status code
func (o *ArtifactUpdateInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this artifact update internal server error response has a 4xx status code
func (o *ArtifactUpdateInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this artifact update internal server error response has a 5xx status code
func (o *ArtifactUpdateInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this artifact update internal server error response a status code equal to that given
func (o *ArtifactUpdateInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *ArtifactUpdateInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /apps/{app-slug}/builds/{build-slug}/artifacts/{artifact-slug}][%d] artifactUpdateInternalServerError  %+v", 500, o.Payload)
}

func (o *ArtifactUpdateInternalServerError) String() string {
	return fmt.Sprintf("[PATCH /apps/{app-slug}/builds/{build-slug}/artifacts/{artifact-slug}][%d] artifactUpdateInternalServerError  %+v", 500, o.Payload)
}

func (o *ArtifactUpdateInternalServerError) GetPayload() *models.ServiceStandardErrorRespModel {
	return o.Payload
}

func (o *ArtifactUpdateInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ServiceStandardErrorRespModel)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
