// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Staffbase/bitrise-api/go/models"
)

// CacheItemDeleteAllReader is a Reader for the CacheItemDeleteAll structure.
type CacheItemDeleteAllReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CacheItemDeleteAllReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCacheItemDeleteAllOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCacheItemDeleteAllBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewCacheItemDeleteAllUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCacheItemDeleteAllNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCacheItemDeleteAllInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCacheItemDeleteAllOK creates a CacheItemDeleteAllOK with default headers values
func NewCacheItemDeleteAllOK() *CacheItemDeleteAllOK {
	return &CacheItemDeleteAllOK{}
}

/*
CacheItemDeleteAllOK describes a response with status code 200, with default header values.

OK
*/
type CacheItemDeleteAllOK struct {
}

// IsSuccess returns true when this cache item delete all o k response has a 2xx status code
func (o *CacheItemDeleteAllOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this cache item delete all o k response has a 3xx status code
func (o *CacheItemDeleteAllOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cache item delete all o k response has a 4xx status code
func (o *CacheItemDeleteAllOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this cache item delete all o k response has a 5xx status code
func (o *CacheItemDeleteAllOK) IsServerError() bool {
	return false
}

// IsCode returns true when this cache item delete all o k response a status code equal to that given
func (o *CacheItemDeleteAllOK) IsCode(code int) bool {
	return code == 200
}

func (o *CacheItemDeleteAllOK) Error() string {
	return fmt.Sprintf("[DELETE /apps/{app-slug}/cache-items][%d] cacheItemDeleteAllOK ", 200)
}

func (o *CacheItemDeleteAllOK) String() string {
	return fmt.Sprintf("[DELETE /apps/{app-slug}/cache-items][%d] cacheItemDeleteAllOK ", 200)
}

func (o *CacheItemDeleteAllOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCacheItemDeleteAllBadRequest creates a CacheItemDeleteAllBadRequest with default headers values
func NewCacheItemDeleteAllBadRequest() *CacheItemDeleteAllBadRequest {
	return &CacheItemDeleteAllBadRequest{}
}

/*
CacheItemDeleteAllBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type CacheItemDeleteAllBadRequest struct {
	Payload *models.ServiceStandardErrorRespModel
}

// IsSuccess returns true when this cache item delete all bad request response has a 2xx status code
func (o *CacheItemDeleteAllBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this cache item delete all bad request response has a 3xx status code
func (o *CacheItemDeleteAllBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cache item delete all bad request response has a 4xx status code
func (o *CacheItemDeleteAllBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this cache item delete all bad request response has a 5xx status code
func (o *CacheItemDeleteAllBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this cache item delete all bad request response a status code equal to that given
func (o *CacheItemDeleteAllBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *CacheItemDeleteAllBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /apps/{app-slug}/cache-items][%d] cacheItemDeleteAllBadRequest  %+v", 400, o.Payload)
}

func (o *CacheItemDeleteAllBadRequest) String() string {
	return fmt.Sprintf("[DELETE /apps/{app-slug}/cache-items][%d] cacheItemDeleteAllBadRequest  %+v", 400, o.Payload)
}

func (o *CacheItemDeleteAllBadRequest) GetPayload() *models.ServiceStandardErrorRespModel {
	return o.Payload
}

func (o *CacheItemDeleteAllBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ServiceStandardErrorRespModel)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCacheItemDeleteAllUnauthorized creates a CacheItemDeleteAllUnauthorized with default headers values
func NewCacheItemDeleteAllUnauthorized() *CacheItemDeleteAllUnauthorized {
	return &CacheItemDeleteAllUnauthorized{}
}

/*
CacheItemDeleteAllUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type CacheItemDeleteAllUnauthorized struct {
	Payload *models.ServiceStandardErrorRespModel
}

// IsSuccess returns true when this cache item delete all unauthorized response has a 2xx status code
func (o *CacheItemDeleteAllUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this cache item delete all unauthorized response has a 3xx status code
func (o *CacheItemDeleteAllUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cache item delete all unauthorized response has a 4xx status code
func (o *CacheItemDeleteAllUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this cache item delete all unauthorized response has a 5xx status code
func (o *CacheItemDeleteAllUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this cache item delete all unauthorized response a status code equal to that given
func (o *CacheItemDeleteAllUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *CacheItemDeleteAllUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /apps/{app-slug}/cache-items][%d] cacheItemDeleteAllUnauthorized  %+v", 401, o.Payload)
}

func (o *CacheItemDeleteAllUnauthorized) String() string {
	return fmt.Sprintf("[DELETE /apps/{app-slug}/cache-items][%d] cacheItemDeleteAllUnauthorized  %+v", 401, o.Payload)
}

func (o *CacheItemDeleteAllUnauthorized) GetPayload() *models.ServiceStandardErrorRespModel {
	return o.Payload
}

func (o *CacheItemDeleteAllUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ServiceStandardErrorRespModel)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCacheItemDeleteAllNotFound creates a CacheItemDeleteAllNotFound with default headers values
func NewCacheItemDeleteAllNotFound() *CacheItemDeleteAllNotFound {
	return &CacheItemDeleteAllNotFound{}
}

/*
CacheItemDeleteAllNotFound describes a response with status code 404, with default header values.

Not Found
*/
type CacheItemDeleteAllNotFound struct {
	Payload *models.ServiceStandardErrorRespModel
}

// IsSuccess returns true when this cache item delete all not found response has a 2xx status code
func (o *CacheItemDeleteAllNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this cache item delete all not found response has a 3xx status code
func (o *CacheItemDeleteAllNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cache item delete all not found response has a 4xx status code
func (o *CacheItemDeleteAllNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this cache item delete all not found response has a 5xx status code
func (o *CacheItemDeleteAllNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this cache item delete all not found response a status code equal to that given
func (o *CacheItemDeleteAllNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *CacheItemDeleteAllNotFound) Error() string {
	return fmt.Sprintf("[DELETE /apps/{app-slug}/cache-items][%d] cacheItemDeleteAllNotFound  %+v", 404, o.Payload)
}

func (o *CacheItemDeleteAllNotFound) String() string {
	return fmt.Sprintf("[DELETE /apps/{app-slug}/cache-items][%d] cacheItemDeleteAllNotFound  %+v", 404, o.Payload)
}

func (o *CacheItemDeleteAllNotFound) GetPayload() *models.ServiceStandardErrorRespModel {
	return o.Payload
}

func (o *CacheItemDeleteAllNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ServiceStandardErrorRespModel)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCacheItemDeleteAllInternalServerError creates a CacheItemDeleteAllInternalServerError with default headers values
func NewCacheItemDeleteAllInternalServerError() *CacheItemDeleteAllInternalServerError {
	return &CacheItemDeleteAllInternalServerError{}
}

/*
CacheItemDeleteAllInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type CacheItemDeleteAllInternalServerError struct {
	Payload *models.ServiceStandardErrorRespModel
}

// IsSuccess returns true when this cache item delete all internal server error response has a 2xx status code
func (o *CacheItemDeleteAllInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this cache item delete all internal server error response has a 3xx status code
func (o *CacheItemDeleteAllInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cache item delete all internal server error response has a 4xx status code
func (o *CacheItemDeleteAllInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this cache item delete all internal server error response has a 5xx status code
func (o *CacheItemDeleteAllInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this cache item delete all internal server error response a status code equal to that given
func (o *CacheItemDeleteAllInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *CacheItemDeleteAllInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /apps/{app-slug}/cache-items][%d] cacheItemDeleteAllInternalServerError  %+v", 500, o.Payload)
}

func (o *CacheItemDeleteAllInternalServerError) String() string {
	return fmt.Sprintf("[DELETE /apps/{app-slug}/cache-items][%d] cacheItemDeleteAllInternalServerError  %+v", 500, o.Payload)
}

func (o *CacheItemDeleteAllInternalServerError) GetPayload() *models.ServiceStandardErrorRespModel {
	return o.Payload
}

func (o *CacheItemDeleteAllInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ServiceStandardErrorRespModel)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
