// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Staffbase/bitrise-api/go/models"
)

// UserAddonTokensDeleteReader is a Reader for the UserAddonTokensDelete structure.
type UserAddonTokensDeleteReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UserAddonTokensDeleteReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUserAddonTokensDeleteOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUserAddonTokensDeleteBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUserAddonTokensDeleteUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUserAddonTokensDeleteNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUserAddonTokensDeleteInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUserAddonTokensDeleteOK creates a UserAddonTokensDeleteOK with default headers values
func NewUserAddonTokensDeleteOK() *UserAddonTokensDeleteOK {
	return &UserAddonTokensDeleteOK{}
}

/*
UserAddonTokensDeleteOK describes a response with status code 200, with default header values.

OK
*/
type UserAddonTokensDeleteOK struct {
}

// IsSuccess returns true when this user addon tokens delete o k response has a 2xx status code
func (o *UserAddonTokensDeleteOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this user addon tokens delete o k response has a 3xx status code
func (o *UserAddonTokensDeleteOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this user addon tokens delete o k response has a 4xx status code
func (o *UserAddonTokensDeleteOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this user addon tokens delete o k response has a 5xx status code
func (o *UserAddonTokensDeleteOK) IsServerError() bool {
	return false
}

// IsCode returns true when this user addon tokens delete o k response a status code equal to that given
func (o *UserAddonTokensDeleteOK) IsCode(code int) bool {
	return code == 200
}

func (o *UserAddonTokensDeleteOK) Error() string {
	return fmt.Sprintf("[DELETE /me/addon-tokens/{addon-id}][%d] userAddonTokensDeleteOK ", 200)
}

func (o *UserAddonTokensDeleteOK) String() string {
	return fmt.Sprintf("[DELETE /me/addon-tokens/{addon-id}][%d] userAddonTokensDeleteOK ", 200)
}

func (o *UserAddonTokensDeleteOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUserAddonTokensDeleteBadRequest creates a UserAddonTokensDeleteBadRequest with default headers values
func NewUserAddonTokensDeleteBadRequest() *UserAddonTokensDeleteBadRequest {
	return &UserAddonTokensDeleteBadRequest{}
}

/*
UserAddonTokensDeleteBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type UserAddonTokensDeleteBadRequest struct {
	Payload *models.ServiceStandardErrorRespModel
}

// IsSuccess returns true when this user addon tokens delete bad request response has a 2xx status code
func (o *UserAddonTokensDeleteBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this user addon tokens delete bad request response has a 3xx status code
func (o *UserAddonTokensDeleteBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this user addon tokens delete bad request response has a 4xx status code
func (o *UserAddonTokensDeleteBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this user addon tokens delete bad request response has a 5xx status code
func (o *UserAddonTokensDeleteBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this user addon tokens delete bad request response a status code equal to that given
func (o *UserAddonTokensDeleteBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *UserAddonTokensDeleteBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /me/addon-tokens/{addon-id}][%d] userAddonTokensDeleteBadRequest  %+v", 400, o.Payload)
}

func (o *UserAddonTokensDeleteBadRequest) String() string {
	return fmt.Sprintf("[DELETE /me/addon-tokens/{addon-id}][%d] userAddonTokensDeleteBadRequest  %+v", 400, o.Payload)
}

func (o *UserAddonTokensDeleteBadRequest) GetPayload() *models.ServiceStandardErrorRespModel {
	return o.Payload
}

func (o *UserAddonTokensDeleteBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ServiceStandardErrorRespModel)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUserAddonTokensDeleteUnauthorized creates a UserAddonTokensDeleteUnauthorized with default headers values
func NewUserAddonTokensDeleteUnauthorized() *UserAddonTokensDeleteUnauthorized {
	return &UserAddonTokensDeleteUnauthorized{}
}

/*
UserAddonTokensDeleteUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type UserAddonTokensDeleteUnauthorized struct {
	Payload *models.ServiceStandardErrorRespModel
}

// IsSuccess returns true when this user addon tokens delete unauthorized response has a 2xx status code
func (o *UserAddonTokensDeleteUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this user addon tokens delete unauthorized response has a 3xx status code
func (o *UserAddonTokensDeleteUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this user addon tokens delete unauthorized response has a 4xx status code
func (o *UserAddonTokensDeleteUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this user addon tokens delete unauthorized response has a 5xx status code
func (o *UserAddonTokensDeleteUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this user addon tokens delete unauthorized response a status code equal to that given
func (o *UserAddonTokensDeleteUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *UserAddonTokensDeleteUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /me/addon-tokens/{addon-id}][%d] userAddonTokensDeleteUnauthorized  %+v", 401, o.Payload)
}

func (o *UserAddonTokensDeleteUnauthorized) String() string {
	return fmt.Sprintf("[DELETE /me/addon-tokens/{addon-id}][%d] userAddonTokensDeleteUnauthorized  %+v", 401, o.Payload)
}

func (o *UserAddonTokensDeleteUnauthorized) GetPayload() *models.ServiceStandardErrorRespModel {
	return o.Payload
}

func (o *UserAddonTokensDeleteUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ServiceStandardErrorRespModel)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUserAddonTokensDeleteNotFound creates a UserAddonTokensDeleteNotFound with default headers values
func NewUserAddonTokensDeleteNotFound() *UserAddonTokensDeleteNotFound {
	return &UserAddonTokensDeleteNotFound{}
}

/*
UserAddonTokensDeleteNotFound describes a response with status code 404, with default header values.

Not Found
*/
type UserAddonTokensDeleteNotFound struct {
	Payload *models.ServiceStandardErrorRespModel
}

// IsSuccess returns true when this user addon tokens delete not found response has a 2xx status code
func (o *UserAddonTokensDeleteNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this user addon tokens delete not found response has a 3xx status code
func (o *UserAddonTokensDeleteNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this user addon tokens delete not found response has a 4xx status code
func (o *UserAddonTokensDeleteNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this user addon tokens delete not found response has a 5xx status code
func (o *UserAddonTokensDeleteNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this user addon tokens delete not found response a status code equal to that given
func (o *UserAddonTokensDeleteNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *UserAddonTokensDeleteNotFound) Error() string {
	return fmt.Sprintf("[DELETE /me/addon-tokens/{addon-id}][%d] userAddonTokensDeleteNotFound  %+v", 404, o.Payload)
}

func (o *UserAddonTokensDeleteNotFound) String() string {
	return fmt.Sprintf("[DELETE /me/addon-tokens/{addon-id}][%d] userAddonTokensDeleteNotFound  %+v", 404, o.Payload)
}

func (o *UserAddonTokensDeleteNotFound) GetPayload() *models.ServiceStandardErrorRespModel {
	return o.Payload
}

func (o *UserAddonTokensDeleteNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ServiceStandardErrorRespModel)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUserAddonTokensDeleteInternalServerError creates a UserAddonTokensDeleteInternalServerError with default headers values
func NewUserAddonTokensDeleteInternalServerError() *UserAddonTokensDeleteInternalServerError {
	return &UserAddonTokensDeleteInternalServerError{}
}

/*
UserAddonTokensDeleteInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type UserAddonTokensDeleteInternalServerError struct {
	Payload *models.ServiceStandardErrorRespModel
}

// IsSuccess returns true when this user addon tokens delete internal server error response has a 2xx status code
func (o *UserAddonTokensDeleteInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this user addon tokens delete internal server error response has a 3xx status code
func (o *UserAddonTokensDeleteInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this user addon tokens delete internal server error response has a 4xx status code
func (o *UserAddonTokensDeleteInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this user addon tokens delete internal server error response has a 5xx status code
func (o *UserAddonTokensDeleteInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this user addon tokens delete internal server error response a status code equal to that given
func (o *UserAddonTokensDeleteInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *UserAddonTokensDeleteInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /me/addon-tokens/{addon-id}][%d] userAddonTokensDeleteInternalServerError  %+v", 500, o.Payload)
}

func (o *UserAddonTokensDeleteInternalServerError) String() string {
	return fmt.Sprintf("[DELETE /me/addon-tokens/{addon-id}][%d] userAddonTokensDeleteInternalServerError  %+v", 500, o.Payload)
}

func (o *UserAddonTokensDeleteInternalServerError) GetPayload() *models.ServiceStandardErrorRespModel {
	return o.Payload
}

func (o *UserAddonTokensDeleteInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ServiceStandardErrorRespModel)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
