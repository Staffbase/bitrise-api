// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Staffbase/bitrise-api/go/models"
)

// ReleaseCreateGooglePlayReader is a Reader for the ReleaseCreateGooglePlay structure.
type ReleaseCreateGooglePlayReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ReleaseCreateGooglePlayReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewReleaseCreateGooglePlayCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewReleaseCreateGooglePlayBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewReleaseCreateGooglePlayUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewReleaseCreateGooglePlayForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewReleaseCreateGooglePlayUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewReleaseCreateGooglePlayInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /apps/{app-slug}/releases/google-play] release-create-google-play", response, response.Code())
	}
}

// NewReleaseCreateGooglePlayCreated creates a ReleaseCreateGooglePlayCreated with default headers values
func NewReleaseCreateGooglePlayCreated() *ReleaseCreateGooglePlayCreated {
	return &ReleaseCreateGooglePlayCreated{}
}

/*
ReleaseCreateGooglePlayCreated describes a response with status code 201, with default header values.

Created
*/
type ReleaseCreateGooglePlayCreated struct {
	Payload *models.V0ReleaseCreateGooglePlayRespModel
}

// IsSuccess returns true when this release create google play created response has a 2xx status code
func (o *ReleaseCreateGooglePlayCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this release create google play created response has a 3xx status code
func (o *ReleaseCreateGooglePlayCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this release create google play created response has a 4xx status code
func (o *ReleaseCreateGooglePlayCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this release create google play created response has a 5xx status code
func (o *ReleaseCreateGooglePlayCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this release create google play created response a status code equal to that given
func (o *ReleaseCreateGooglePlayCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the release create google play created response
func (o *ReleaseCreateGooglePlayCreated) Code() int {
	return 201
}

func (o *ReleaseCreateGooglePlayCreated) Error() string {
	return fmt.Sprintf("[POST /apps/{app-slug}/releases/google-play][%d] releaseCreateGooglePlayCreated  %+v", 201, o.Payload)
}

func (o *ReleaseCreateGooglePlayCreated) String() string {
	return fmt.Sprintf("[POST /apps/{app-slug}/releases/google-play][%d] releaseCreateGooglePlayCreated  %+v", 201, o.Payload)
}

func (o *ReleaseCreateGooglePlayCreated) GetPayload() *models.V0ReleaseCreateGooglePlayRespModel {
	return o.Payload
}

func (o *ReleaseCreateGooglePlayCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.V0ReleaseCreateGooglePlayRespModel)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReleaseCreateGooglePlayBadRequest creates a ReleaseCreateGooglePlayBadRequest with default headers values
func NewReleaseCreateGooglePlayBadRequest() *ReleaseCreateGooglePlayBadRequest {
	return &ReleaseCreateGooglePlayBadRequest{}
}

/*
ReleaseCreateGooglePlayBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type ReleaseCreateGooglePlayBadRequest struct {
	Payload *models.ServiceStandardErrorRespModel
}

// IsSuccess returns true when this release create google play bad request response has a 2xx status code
func (o *ReleaseCreateGooglePlayBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this release create google play bad request response has a 3xx status code
func (o *ReleaseCreateGooglePlayBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this release create google play bad request response has a 4xx status code
func (o *ReleaseCreateGooglePlayBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this release create google play bad request response has a 5xx status code
func (o *ReleaseCreateGooglePlayBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this release create google play bad request response a status code equal to that given
func (o *ReleaseCreateGooglePlayBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the release create google play bad request response
func (o *ReleaseCreateGooglePlayBadRequest) Code() int {
	return 400
}

func (o *ReleaseCreateGooglePlayBadRequest) Error() string {
	return fmt.Sprintf("[POST /apps/{app-slug}/releases/google-play][%d] releaseCreateGooglePlayBadRequest  %+v", 400, o.Payload)
}

func (o *ReleaseCreateGooglePlayBadRequest) String() string {
	return fmt.Sprintf("[POST /apps/{app-slug}/releases/google-play][%d] releaseCreateGooglePlayBadRequest  %+v", 400, o.Payload)
}

func (o *ReleaseCreateGooglePlayBadRequest) GetPayload() *models.ServiceStandardErrorRespModel {
	return o.Payload
}

func (o *ReleaseCreateGooglePlayBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ServiceStandardErrorRespModel)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReleaseCreateGooglePlayUnauthorized creates a ReleaseCreateGooglePlayUnauthorized with default headers values
func NewReleaseCreateGooglePlayUnauthorized() *ReleaseCreateGooglePlayUnauthorized {
	return &ReleaseCreateGooglePlayUnauthorized{}
}

/*
ReleaseCreateGooglePlayUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type ReleaseCreateGooglePlayUnauthorized struct {
	Payload *models.ServiceStandardErrorRespModel
}

// IsSuccess returns true when this release create google play unauthorized response has a 2xx status code
func (o *ReleaseCreateGooglePlayUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this release create google play unauthorized response has a 3xx status code
func (o *ReleaseCreateGooglePlayUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this release create google play unauthorized response has a 4xx status code
func (o *ReleaseCreateGooglePlayUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this release create google play unauthorized response has a 5xx status code
func (o *ReleaseCreateGooglePlayUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this release create google play unauthorized response a status code equal to that given
func (o *ReleaseCreateGooglePlayUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the release create google play unauthorized response
func (o *ReleaseCreateGooglePlayUnauthorized) Code() int {
	return 401
}

func (o *ReleaseCreateGooglePlayUnauthorized) Error() string {
	return fmt.Sprintf("[POST /apps/{app-slug}/releases/google-play][%d] releaseCreateGooglePlayUnauthorized  %+v", 401, o.Payload)
}

func (o *ReleaseCreateGooglePlayUnauthorized) String() string {
	return fmt.Sprintf("[POST /apps/{app-slug}/releases/google-play][%d] releaseCreateGooglePlayUnauthorized  %+v", 401, o.Payload)
}

func (o *ReleaseCreateGooglePlayUnauthorized) GetPayload() *models.ServiceStandardErrorRespModel {
	return o.Payload
}

func (o *ReleaseCreateGooglePlayUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ServiceStandardErrorRespModel)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReleaseCreateGooglePlayForbidden creates a ReleaseCreateGooglePlayForbidden with default headers values
func NewReleaseCreateGooglePlayForbidden() *ReleaseCreateGooglePlayForbidden {
	return &ReleaseCreateGooglePlayForbidden{}
}

/*
ReleaseCreateGooglePlayForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ReleaseCreateGooglePlayForbidden struct {
	Payload *models.ServiceStandardErrorRespModel
}

// IsSuccess returns true when this release create google play forbidden response has a 2xx status code
func (o *ReleaseCreateGooglePlayForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this release create google play forbidden response has a 3xx status code
func (o *ReleaseCreateGooglePlayForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this release create google play forbidden response has a 4xx status code
func (o *ReleaseCreateGooglePlayForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this release create google play forbidden response has a 5xx status code
func (o *ReleaseCreateGooglePlayForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this release create google play forbidden response a status code equal to that given
func (o *ReleaseCreateGooglePlayForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the release create google play forbidden response
func (o *ReleaseCreateGooglePlayForbidden) Code() int {
	return 403
}

func (o *ReleaseCreateGooglePlayForbidden) Error() string {
	return fmt.Sprintf("[POST /apps/{app-slug}/releases/google-play][%d] releaseCreateGooglePlayForbidden  %+v", 403, o.Payload)
}

func (o *ReleaseCreateGooglePlayForbidden) String() string {
	return fmt.Sprintf("[POST /apps/{app-slug}/releases/google-play][%d] releaseCreateGooglePlayForbidden  %+v", 403, o.Payload)
}

func (o *ReleaseCreateGooglePlayForbidden) GetPayload() *models.ServiceStandardErrorRespModel {
	return o.Payload
}

func (o *ReleaseCreateGooglePlayForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ServiceStandardErrorRespModel)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReleaseCreateGooglePlayUnprocessableEntity creates a ReleaseCreateGooglePlayUnprocessableEntity with default headers values
func NewReleaseCreateGooglePlayUnprocessableEntity() *ReleaseCreateGooglePlayUnprocessableEntity {
	return &ReleaseCreateGooglePlayUnprocessableEntity{}
}

/*
ReleaseCreateGooglePlayUnprocessableEntity describes a response with status code 422, with default header values.

Unprocessable Entity
*/
type ReleaseCreateGooglePlayUnprocessableEntity struct {
	Payload *models.ServiceStandardErrorRespModel
}

// IsSuccess returns true when this release create google play unprocessable entity response has a 2xx status code
func (o *ReleaseCreateGooglePlayUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this release create google play unprocessable entity response has a 3xx status code
func (o *ReleaseCreateGooglePlayUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this release create google play unprocessable entity response has a 4xx status code
func (o *ReleaseCreateGooglePlayUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this release create google play unprocessable entity response has a 5xx status code
func (o *ReleaseCreateGooglePlayUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this release create google play unprocessable entity response a status code equal to that given
func (o *ReleaseCreateGooglePlayUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the release create google play unprocessable entity response
func (o *ReleaseCreateGooglePlayUnprocessableEntity) Code() int {
	return 422
}

func (o *ReleaseCreateGooglePlayUnprocessableEntity) Error() string {
	return fmt.Sprintf("[POST /apps/{app-slug}/releases/google-play][%d] releaseCreateGooglePlayUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *ReleaseCreateGooglePlayUnprocessableEntity) String() string {
	return fmt.Sprintf("[POST /apps/{app-slug}/releases/google-play][%d] releaseCreateGooglePlayUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *ReleaseCreateGooglePlayUnprocessableEntity) GetPayload() *models.ServiceStandardErrorRespModel {
	return o.Payload
}

func (o *ReleaseCreateGooglePlayUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ServiceStandardErrorRespModel)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReleaseCreateGooglePlayInternalServerError creates a ReleaseCreateGooglePlayInternalServerError with default headers values
func NewReleaseCreateGooglePlayInternalServerError() *ReleaseCreateGooglePlayInternalServerError {
	return &ReleaseCreateGooglePlayInternalServerError{}
}

/*
ReleaseCreateGooglePlayInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type ReleaseCreateGooglePlayInternalServerError struct {
	Payload *models.ServiceStandardErrorRespModel
}

// IsSuccess returns true when this release create google play internal server error response has a 2xx status code
func (o *ReleaseCreateGooglePlayInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this release create google play internal server error response has a 3xx status code
func (o *ReleaseCreateGooglePlayInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this release create google play internal server error response has a 4xx status code
func (o *ReleaseCreateGooglePlayInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this release create google play internal server error response has a 5xx status code
func (o *ReleaseCreateGooglePlayInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this release create google play internal server error response a status code equal to that given
func (o *ReleaseCreateGooglePlayInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the release create google play internal server error response
func (o *ReleaseCreateGooglePlayInternalServerError) Code() int {
	return 500
}

func (o *ReleaseCreateGooglePlayInternalServerError) Error() string {
	return fmt.Sprintf("[POST /apps/{app-slug}/releases/google-play][%d] releaseCreateGooglePlayInternalServerError  %+v", 500, o.Payload)
}

func (o *ReleaseCreateGooglePlayInternalServerError) String() string {
	return fmt.Sprintf("[POST /apps/{app-slug}/releases/google-play][%d] releaseCreateGooglePlayInternalServerError  %+v", 500, o.Payload)
}

func (o *ReleaseCreateGooglePlayInternalServerError) GetPayload() *models.ServiceStandardErrorRespModel {
	return o.Payload
}

func (o *ReleaseCreateGooglePlayInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ServiceStandardErrorRespModel)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
