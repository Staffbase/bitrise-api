// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Staffbase/bitrise-api/go/models"
)

// ReleaseCreateAppStoreReader is a Reader for the ReleaseCreateAppStore structure.
type ReleaseCreateAppStoreReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ReleaseCreateAppStoreReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewReleaseCreateAppStoreCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewReleaseCreateAppStoreBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewReleaseCreateAppStoreUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewReleaseCreateAppStoreForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewReleaseCreateAppStoreUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewReleaseCreateAppStoreInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /apps/{app-slug}/releases/app-store] release-create-app-store", response, response.Code())
	}
}

// NewReleaseCreateAppStoreCreated creates a ReleaseCreateAppStoreCreated with default headers values
func NewReleaseCreateAppStoreCreated() *ReleaseCreateAppStoreCreated {
	return &ReleaseCreateAppStoreCreated{}
}

/*
ReleaseCreateAppStoreCreated describes a response with status code 201, with default header values.

Created
*/
type ReleaseCreateAppStoreCreated struct {
	Payload *models.V0ReleaseCreateAppStoreRespModel
}

// IsSuccess returns true when this release create app store created response has a 2xx status code
func (o *ReleaseCreateAppStoreCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this release create app store created response has a 3xx status code
func (o *ReleaseCreateAppStoreCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this release create app store created response has a 4xx status code
func (o *ReleaseCreateAppStoreCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this release create app store created response has a 5xx status code
func (o *ReleaseCreateAppStoreCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this release create app store created response a status code equal to that given
func (o *ReleaseCreateAppStoreCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the release create app store created response
func (o *ReleaseCreateAppStoreCreated) Code() int {
	return 201
}

func (o *ReleaseCreateAppStoreCreated) Error() string {
	return fmt.Sprintf("[POST /apps/{app-slug}/releases/app-store][%d] releaseCreateAppStoreCreated  %+v", 201, o.Payload)
}

func (o *ReleaseCreateAppStoreCreated) String() string {
	return fmt.Sprintf("[POST /apps/{app-slug}/releases/app-store][%d] releaseCreateAppStoreCreated  %+v", 201, o.Payload)
}

func (o *ReleaseCreateAppStoreCreated) GetPayload() *models.V0ReleaseCreateAppStoreRespModel {
	return o.Payload
}

func (o *ReleaseCreateAppStoreCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.V0ReleaseCreateAppStoreRespModel)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReleaseCreateAppStoreBadRequest creates a ReleaseCreateAppStoreBadRequest with default headers values
func NewReleaseCreateAppStoreBadRequest() *ReleaseCreateAppStoreBadRequest {
	return &ReleaseCreateAppStoreBadRequest{}
}

/*
ReleaseCreateAppStoreBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type ReleaseCreateAppStoreBadRequest struct {
	Payload *models.ServiceStandardErrorRespModel
}

// IsSuccess returns true when this release create app store bad request response has a 2xx status code
func (o *ReleaseCreateAppStoreBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this release create app store bad request response has a 3xx status code
func (o *ReleaseCreateAppStoreBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this release create app store bad request response has a 4xx status code
func (o *ReleaseCreateAppStoreBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this release create app store bad request response has a 5xx status code
func (o *ReleaseCreateAppStoreBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this release create app store bad request response a status code equal to that given
func (o *ReleaseCreateAppStoreBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the release create app store bad request response
func (o *ReleaseCreateAppStoreBadRequest) Code() int {
	return 400
}

func (o *ReleaseCreateAppStoreBadRequest) Error() string {
	return fmt.Sprintf("[POST /apps/{app-slug}/releases/app-store][%d] releaseCreateAppStoreBadRequest  %+v", 400, o.Payload)
}

func (o *ReleaseCreateAppStoreBadRequest) String() string {
	return fmt.Sprintf("[POST /apps/{app-slug}/releases/app-store][%d] releaseCreateAppStoreBadRequest  %+v", 400, o.Payload)
}

func (o *ReleaseCreateAppStoreBadRequest) GetPayload() *models.ServiceStandardErrorRespModel {
	return o.Payload
}

func (o *ReleaseCreateAppStoreBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ServiceStandardErrorRespModel)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReleaseCreateAppStoreUnauthorized creates a ReleaseCreateAppStoreUnauthorized with default headers values
func NewReleaseCreateAppStoreUnauthorized() *ReleaseCreateAppStoreUnauthorized {
	return &ReleaseCreateAppStoreUnauthorized{}
}

/*
ReleaseCreateAppStoreUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type ReleaseCreateAppStoreUnauthorized struct {
	Payload *models.ServiceStandardErrorRespModel
}

// IsSuccess returns true when this release create app store unauthorized response has a 2xx status code
func (o *ReleaseCreateAppStoreUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this release create app store unauthorized response has a 3xx status code
func (o *ReleaseCreateAppStoreUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this release create app store unauthorized response has a 4xx status code
func (o *ReleaseCreateAppStoreUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this release create app store unauthorized response has a 5xx status code
func (o *ReleaseCreateAppStoreUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this release create app store unauthorized response a status code equal to that given
func (o *ReleaseCreateAppStoreUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the release create app store unauthorized response
func (o *ReleaseCreateAppStoreUnauthorized) Code() int {
	return 401
}

func (o *ReleaseCreateAppStoreUnauthorized) Error() string {
	return fmt.Sprintf("[POST /apps/{app-slug}/releases/app-store][%d] releaseCreateAppStoreUnauthorized  %+v", 401, o.Payload)
}

func (o *ReleaseCreateAppStoreUnauthorized) String() string {
	return fmt.Sprintf("[POST /apps/{app-slug}/releases/app-store][%d] releaseCreateAppStoreUnauthorized  %+v", 401, o.Payload)
}

func (o *ReleaseCreateAppStoreUnauthorized) GetPayload() *models.ServiceStandardErrorRespModel {
	return o.Payload
}

func (o *ReleaseCreateAppStoreUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ServiceStandardErrorRespModel)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReleaseCreateAppStoreForbidden creates a ReleaseCreateAppStoreForbidden with default headers values
func NewReleaseCreateAppStoreForbidden() *ReleaseCreateAppStoreForbidden {
	return &ReleaseCreateAppStoreForbidden{}
}

/*
ReleaseCreateAppStoreForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ReleaseCreateAppStoreForbidden struct {
	Payload *models.ServiceStandardErrorRespModel
}

// IsSuccess returns true when this release create app store forbidden response has a 2xx status code
func (o *ReleaseCreateAppStoreForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this release create app store forbidden response has a 3xx status code
func (o *ReleaseCreateAppStoreForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this release create app store forbidden response has a 4xx status code
func (o *ReleaseCreateAppStoreForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this release create app store forbidden response has a 5xx status code
func (o *ReleaseCreateAppStoreForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this release create app store forbidden response a status code equal to that given
func (o *ReleaseCreateAppStoreForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the release create app store forbidden response
func (o *ReleaseCreateAppStoreForbidden) Code() int {
	return 403
}

func (o *ReleaseCreateAppStoreForbidden) Error() string {
	return fmt.Sprintf("[POST /apps/{app-slug}/releases/app-store][%d] releaseCreateAppStoreForbidden  %+v", 403, o.Payload)
}

func (o *ReleaseCreateAppStoreForbidden) String() string {
	return fmt.Sprintf("[POST /apps/{app-slug}/releases/app-store][%d] releaseCreateAppStoreForbidden  %+v", 403, o.Payload)
}

func (o *ReleaseCreateAppStoreForbidden) GetPayload() *models.ServiceStandardErrorRespModel {
	return o.Payload
}

func (o *ReleaseCreateAppStoreForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ServiceStandardErrorRespModel)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReleaseCreateAppStoreUnprocessableEntity creates a ReleaseCreateAppStoreUnprocessableEntity with default headers values
func NewReleaseCreateAppStoreUnprocessableEntity() *ReleaseCreateAppStoreUnprocessableEntity {
	return &ReleaseCreateAppStoreUnprocessableEntity{}
}

/*
ReleaseCreateAppStoreUnprocessableEntity describes a response with status code 422, with default header values.

Unprocessable Entity
*/
type ReleaseCreateAppStoreUnprocessableEntity struct {
	Payload *models.ServiceStandardErrorRespModel
}

// IsSuccess returns true when this release create app store unprocessable entity response has a 2xx status code
func (o *ReleaseCreateAppStoreUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this release create app store unprocessable entity response has a 3xx status code
func (o *ReleaseCreateAppStoreUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this release create app store unprocessable entity response has a 4xx status code
func (o *ReleaseCreateAppStoreUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this release create app store unprocessable entity response has a 5xx status code
func (o *ReleaseCreateAppStoreUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this release create app store unprocessable entity response a status code equal to that given
func (o *ReleaseCreateAppStoreUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the release create app store unprocessable entity response
func (o *ReleaseCreateAppStoreUnprocessableEntity) Code() int {
	return 422
}

func (o *ReleaseCreateAppStoreUnprocessableEntity) Error() string {
	return fmt.Sprintf("[POST /apps/{app-slug}/releases/app-store][%d] releaseCreateAppStoreUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *ReleaseCreateAppStoreUnprocessableEntity) String() string {
	return fmt.Sprintf("[POST /apps/{app-slug}/releases/app-store][%d] releaseCreateAppStoreUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *ReleaseCreateAppStoreUnprocessableEntity) GetPayload() *models.ServiceStandardErrorRespModel {
	return o.Payload
}

func (o *ReleaseCreateAppStoreUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ServiceStandardErrorRespModel)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReleaseCreateAppStoreInternalServerError creates a ReleaseCreateAppStoreInternalServerError with default headers values
func NewReleaseCreateAppStoreInternalServerError() *ReleaseCreateAppStoreInternalServerError {
	return &ReleaseCreateAppStoreInternalServerError{}
}

/*
ReleaseCreateAppStoreInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type ReleaseCreateAppStoreInternalServerError struct {
	Payload *models.ServiceStandardErrorRespModel
}

// IsSuccess returns true when this release create app store internal server error response has a 2xx status code
func (o *ReleaseCreateAppStoreInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this release create app store internal server error response has a 3xx status code
func (o *ReleaseCreateAppStoreInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this release create app store internal server error response has a 4xx status code
func (o *ReleaseCreateAppStoreInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this release create app store internal server error response has a 5xx status code
func (o *ReleaseCreateAppStoreInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this release create app store internal server error response a status code equal to that given
func (o *ReleaseCreateAppStoreInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the release create app store internal server error response
func (o *ReleaseCreateAppStoreInternalServerError) Code() int {
	return 500
}

func (o *ReleaseCreateAppStoreInternalServerError) Error() string {
	return fmt.Sprintf("[POST /apps/{app-slug}/releases/app-store][%d] releaseCreateAppStoreInternalServerError  %+v", 500, o.Payload)
}

func (o *ReleaseCreateAppStoreInternalServerError) String() string {
	return fmt.Sprintf("[POST /apps/{app-slug}/releases/app-store][%d] releaseCreateAppStoreInternalServerError  %+v", 500, o.Payload)
}

func (o *ReleaseCreateAppStoreInternalServerError) GetPayload() *models.ServiceStandardErrorRespModel {
	return o.Payload
}

func (o *ReleaseCreateAppStoreInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ServiceStandardErrorRespModel)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
