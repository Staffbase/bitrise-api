// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewPipelineListParams creates a new PipelineListParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewPipelineListParams() *PipelineListParams {
	return &PipelineListParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewPipelineListParamsWithTimeout creates a new PipelineListParams object
// with the ability to set a timeout on a request.
func NewPipelineListParamsWithTimeout(timeout time.Duration) *PipelineListParams {
	return &PipelineListParams{
		timeout: timeout,
	}
}

// NewPipelineListParamsWithContext creates a new PipelineListParams object
// with the ability to set a context for a request.
func NewPipelineListParamsWithContext(ctx context.Context) *PipelineListParams {
	return &PipelineListParams{
		Context: ctx,
	}
}

// NewPipelineListParamsWithHTTPClient creates a new PipelineListParams object
// with the ability to set a custom HTTPClient for a request.
func NewPipelineListParamsWithHTTPClient(client *http.Client) *PipelineListParams {
	return &PipelineListParams{
		HTTPClient: client,
	}
}

/*
PipelineListParams contains all the parameters to send to the API endpoint

	for the pipeline list operation.

	Typically these are written to a http.Request.
*/
type PipelineListParams struct {

	/* After.

	   List pipelines/standalone builds run after a given date (RFC3339 time format)
	*/
	After *string

	/* AppSlug.

	   App slug
	*/
	AppSlug string

	/* Before.

	   List pipelines/standalone builds run before a given date (RFC3339 time format) - was called 'next' earlier
	*/
	Before *string

	/* Branch.

	   The branch which was built
	*/
	Branch *string

	/* BuildEnvironment.

	   The build environment of the listed builds (ci, local, all) - default: ci
	*/
	BuildEnvironment *string

	/* BuildNumber.

	   The pipeline/standalone build number
	*/
	BuildNumber *int64

	/* CommitMessage.

	   The commit message of the pipeline/standalone build
	*/
	CommitMessage *string

	/* Limit.

	   Max number of elements per page - default: 10
	*/
	Limit *int64

	/* Next.

	   List pipelines/standalone builds run before a given date (RFC3339 time format) - deprecated
	*/
	Next *string

	/* Pipeline.

	   Name of the pipeline
	*/
	Pipeline *string

	/* Status.

	   The status of the pipeline/standalone build: initializing, on_hold, running, succeeded, failed, aborted, succeeded_with_abort
	*/
	Status *string

	/* TriggerEventType.

	   The event that triggered the pipeline/standalone build (push, pull-request, tag)
	*/
	TriggerEventType *string

	/* Workflow.

	   The name of the workflow used for the pipeline/standalone build
	*/
	Workflow *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the pipeline list params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PipelineListParams) WithDefaults() *PipelineListParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the pipeline list params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PipelineListParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the pipeline list params
func (o *PipelineListParams) WithTimeout(timeout time.Duration) *PipelineListParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the pipeline list params
func (o *PipelineListParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the pipeline list params
func (o *PipelineListParams) WithContext(ctx context.Context) *PipelineListParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the pipeline list params
func (o *PipelineListParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the pipeline list params
func (o *PipelineListParams) WithHTTPClient(client *http.Client) *PipelineListParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the pipeline list params
func (o *PipelineListParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAfter adds the after to the pipeline list params
func (o *PipelineListParams) WithAfter(after *string) *PipelineListParams {
	o.SetAfter(after)
	return o
}

// SetAfter adds the after to the pipeline list params
func (o *PipelineListParams) SetAfter(after *string) {
	o.After = after
}

// WithAppSlug adds the appSlug to the pipeline list params
func (o *PipelineListParams) WithAppSlug(appSlug string) *PipelineListParams {
	o.SetAppSlug(appSlug)
	return o
}

// SetAppSlug adds the appSlug to the pipeline list params
func (o *PipelineListParams) SetAppSlug(appSlug string) {
	o.AppSlug = appSlug
}

// WithBefore adds the before to the pipeline list params
func (o *PipelineListParams) WithBefore(before *string) *PipelineListParams {
	o.SetBefore(before)
	return o
}

// SetBefore adds the before to the pipeline list params
func (o *PipelineListParams) SetBefore(before *string) {
	o.Before = before
}

// WithBranch adds the branch to the pipeline list params
func (o *PipelineListParams) WithBranch(branch *string) *PipelineListParams {
	o.SetBranch(branch)
	return o
}

// SetBranch adds the branch to the pipeline list params
func (o *PipelineListParams) SetBranch(branch *string) {
	o.Branch = branch
}

// WithBuildEnvironment adds the buildEnvironment to the pipeline list params
func (o *PipelineListParams) WithBuildEnvironment(buildEnvironment *string) *PipelineListParams {
	o.SetBuildEnvironment(buildEnvironment)
	return o
}

// SetBuildEnvironment adds the buildEnvironment to the pipeline list params
func (o *PipelineListParams) SetBuildEnvironment(buildEnvironment *string) {
	o.BuildEnvironment = buildEnvironment
}

// WithBuildNumber adds the buildNumber to the pipeline list params
func (o *PipelineListParams) WithBuildNumber(buildNumber *int64) *PipelineListParams {
	o.SetBuildNumber(buildNumber)
	return o
}

// SetBuildNumber adds the buildNumber to the pipeline list params
func (o *PipelineListParams) SetBuildNumber(buildNumber *int64) {
	o.BuildNumber = buildNumber
}

// WithCommitMessage adds the commitMessage to the pipeline list params
func (o *PipelineListParams) WithCommitMessage(commitMessage *string) *PipelineListParams {
	o.SetCommitMessage(commitMessage)
	return o
}

// SetCommitMessage adds the commitMessage to the pipeline list params
func (o *PipelineListParams) SetCommitMessage(commitMessage *string) {
	o.CommitMessage = commitMessage
}

// WithLimit adds the limit to the pipeline list params
func (o *PipelineListParams) WithLimit(limit *int64) *PipelineListParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the pipeline list params
func (o *PipelineListParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithNext adds the next to the pipeline list params
func (o *PipelineListParams) WithNext(next *string) *PipelineListParams {
	o.SetNext(next)
	return o
}

// SetNext adds the next to the pipeline list params
func (o *PipelineListParams) SetNext(next *string) {
	o.Next = next
}

// WithPipeline adds the pipeline to the pipeline list params
func (o *PipelineListParams) WithPipeline(pipeline *string) *PipelineListParams {
	o.SetPipeline(pipeline)
	return o
}

// SetPipeline adds the pipeline to the pipeline list params
func (o *PipelineListParams) SetPipeline(pipeline *string) {
	o.Pipeline = pipeline
}

// WithStatus adds the status to the pipeline list params
func (o *PipelineListParams) WithStatus(status *string) *PipelineListParams {
	o.SetStatus(status)
	return o
}

// SetStatus adds the status to the pipeline list params
func (o *PipelineListParams) SetStatus(status *string) {
	o.Status = status
}

// WithTriggerEventType adds the triggerEventType to the pipeline list params
func (o *PipelineListParams) WithTriggerEventType(triggerEventType *string) *PipelineListParams {
	o.SetTriggerEventType(triggerEventType)
	return o
}

// SetTriggerEventType adds the triggerEventType to the pipeline list params
func (o *PipelineListParams) SetTriggerEventType(triggerEventType *string) {
	o.TriggerEventType = triggerEventType
}

// WithWorkflow adds the workflow to the pipeline list params
func (o *PipelineListParams) WithWorkflow(workflow *string) *PipelineListParams {
	o.SetWorkflow(workflow)
	return o
}

// SetWorkflow adds the workflow to the pipeline list params
func (o *PipelineListParams) SetWorkflow(workflow *string) {
	o.Workflow = workflow
}

// WriteToRequest writes these params to a swagger request
func (o *PipelineListParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.After != nil {

		// query param after
		var qrAfter string

		if o.After != nil {
			qrAfter = *o.After
		}
		qAfter := qrAfter
		if qAfter != "" {

			if err := r.SetQueryParam("after", qAfter); err != nil {
				return err
			}
		}
	}

	// path param app-slug
	if err := r.SetPathParam("app-slug", o.AppSlug); err != nil {
		return err
	}

	if o.Before != nil {

		// query param before
		var qrBefore string

		if o.Before != nil {
			qrBefore = *o.Before
		}
		qBefore := qrBefore
		if qBefore != "" {

			if err := r.SetQueryParam("before", qBefore); err != nil {
				return err
			}
		}
	}

	if o.Branch != nil {

		// query param branch
		var qrBranch string

		if o.Branch != nil {
			qrBranch = *o.Branch
		}
		qBranch := qrBranch
		if qBranch != "" {

			if err := r.SetQueryParam("branch", qBranch); err != nil {
				return err
			}
		}
	}

	if o.BuildEnvironment != nil {

		// query param build_environment
		var qrBuildEnvironment string

		if o.BuildEnvironment != nil {
			qrBuildEnvironment = *o.BuildEnvironment
		}
		qBuildEnvironment := qrBuildEnvironment
		if qBuildEnvironment != "" {

			if err := r.SetQueryParam("build_environment", qBuildEnvironment); err != nil {
				return err
			}
		}
	}

	if o.BuildNumber != nil {

		// query param build_number
		var qrBuildNumber int64

		if o.BuildNumber != nil {
			qrBuildNumber = *o.BuildNumber
		}
		qBuildNumber := swag.FormatInt64(qrBuildNumber)
		if qBuildNumber != "" {

			if err := r.SetQueryParam("build_number", qBuildNumber); err != nil {
				return err
			}
		}
	}

	if o.CommitMessage != nil {

		// query param commit_message
		var qrCommitMessage string

		if o.CommitMessage != nil {
			qrCommitMessage = *o.CommitMessage
		}
		qCommitMessage := qrCommitMessage
		if qCommitMessage != "" {

			if err := r.SetQueryParam("commit_message", qCommitMessage); err != nil {
				return err
			}
		}
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.Next != nil {

		// query param next
		var qrNext string

		if o.Next != nil {
			qrNext = *o.Next
		}
		qNext := qrNext
		if qNext != "" {

			if err := r.SetQueryParam("next", qNext); err != nil {
				return err
			}
		}
	}

	if o.Pipeline != nil {

		// query param pipeline
		var qrPipeline string

		if o.Pipeline != nil {
			qrPipeline = *o.Pipeline
		}
		qPipeline := qrPipeline
		if qPipeline != "" {

			if err := r.SetQueryParam("pipeline", qPipeline); err != nil {
				return err
			}
		}
	}

	if o.Status != nil {

		// query param status
		var qrStatus string

		if o.Status != nil {
			qrStatus = *o.Status
		}
		qStatus := qrStatus
		if qStatus != "" {

			if err := r.SetQueryParam("status", qStatus); err != nil {
				return err
			}
		}
	}

	if o.TriggerEventType != nil {

		// query param trigger_event_type
		var qrTriggerEventType string

		if o.TriggerEventType != nil {
			qrTriggerEventType = *o.TriggerEventType
		}
		qTriggerEventType := qrTriggerEventType
		if qTriggerEventType != "" {

			if err := r.SetQueryParam("trigger_event_type", qTriggerEventType); err != nil {
				return err
			}
		}
	}

	if o.Workflow != nil {

		// query param workflow
		var qrWorkflow string

		if o.Workflow != nil {
			qrWorkflow = *o.Workflow
		}
		qWorkflow := qrWorkflow
		if qWorkflow != "" {

			if err := r.SetQueryParam("workflow", qWorkflow); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
