// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/Staffbase/bitrise-api/go/models"
)

// AppRolesUpdateReader is a Reader for the AppRolesUpdate structure.
type AppRolesUpdateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AppRolesUpdateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAppRolesUpdateOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 422:
		result := NewAppRolesUpdateUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /apps/{app-slug}/roles/{role-name}] app-roles-update", response, response.Code())
	}
}

// NewAppRolesUpdateOK creates a AppRolesUpdateOK with default headers values
func NewAppRolesUpdateOK() *AppRolesUpdateOK {
	return &AppRolesUpdateOK{}
}

/*
AppRolesUpdateOK describes a response with status code 200, with default header values.

List of group slugs
*/
type AppRolesUpdateOK struct {
	Payload *AppRolesUpdateOKBody
}

// IsSuccess returns true when this app roles update o k response has a 2xx status code
func (o *AppRolesUpdateOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this app roles update o k response has a 3xx status code
func (o *AppRolesUpdateOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this app roles update o k response has a 4xx status code
func (o *AppRolesUpdateOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this app roles update o k response has a 5xx status code
func (o *AppRolesUpdateOK) IsServerError() bool {
	return false
}

// IsCode returns true when this app roles update o k response a status code equal to that given
func (o *AppRolesUpdateOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the app roles update o k response
func (o *AppRolesUpdateOK) Code() int {
	return 200
}

func (o *AppRolesUpdateOK) Error() string {
	return fmt.Sprintf("[PUT /apps/{app-slug}/roles/{role-name}][%d] appRolesUpdateOK  %+v", 200, o.Payload)
}

func (o *AppRolesUpdateOK) String() string {
	return fmt.Sprintf("[PUT /apps/{app-slug}/roles/{role-name}][%d] appRolesUpdateOK  %+v", 200, o.Payload)
}

func (o *AppRolesUpdateOK) GetPayload() *AppRolesUpdateOKBody {
	return o.Payload
}

func (o *AppRolesUpdateOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(AppRolesUpdateOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAppRolesUpdateUnprocessableEntity creates a AppRolesUpdateUnprocessableEntity with default headers values
func NewAppRolesUpdateUnprocessableEntity() *AppRolesUpdateUnprocessableEntity {
	return &AppRolesUpdateUnprocessableEntity{}
}

/*
AppRolesUpdateUnprocessableEntity describes a response with status code 422, with default header values.

Unprocessable Entity
*/
type AppRolesUpdateUnprocessableEntity struct {
	Payload *models.ServiceProxyErrorRespModel
}

// IsSuccess returns true when this app roles update unprocessable entity response has a 2xx status code
func (o *AppRolesUpdateUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this app roles update unprocessable entity response has a 3xx status code
func (o *AppRolesUpdateUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this app roles update unprocessable entity response has a 4xx status code
func (o *AppRolesUpdateUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this app roles update unprocessable entity response has a 5xx status code
func (o *AppRolesUpdateUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this app roles update unprocessable entity response a status code equal to that given
func (o *AppRolesUpdateUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the app roles update unprocessable entity response
func (o *AppRolesUpdateUnprocessableEntity) Code() int {
	return 422
}

func (o *AppRolesUpdateUnprocessableEntity) Error() string {
	return fmt.Sprintf("[PUT /apps/{app-slug}/roles/{role-name}][%d] appRolesUpdateUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *AppRolesUpdateUnprocessableEntity) String() string {
	return fmt.Sprintf("[PUT /apps/{app-slug}/roles/{role-name}][%d] appRolesUpdateUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *AppRolesUpdateUnprocessableEntity) GetPayload() *models.ServiceProxyErrorRespModel {
	return o.Payload
}

func (o *AppRolesUpdateUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ServiceProxyErrorRespModel)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
AppRolesUpdateBody app roles update body
swagger:model AppRolesUpdateBody
*/
type AppRolesUpdateBody struct {
	AppRolesUpdateParamsBodyAllOf0

	// groups
	Groups []string `json:"groups"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *AppRolesUpdateBody) UnmarshalJSON(raw []byte) error {
	// AppRolesUpdateParamsBodyAO0
	var appRolesUpdateParamsBodyAO0 AppRolesUpdateParamsBodyAllOf0
	if err := swag.ReadJSON(raw, &appRolesUpdateParamsBodyAO0); err != nil {
		return err
	}
	o.AppRolesUpdateParamsBodyAllOf0 = appRolesUpdateParamsBodyAO0

	// AppRolesUpdateParamsBodyAO1
	var dataAppRolesUpdateParamsBodyAO1 struct {
		Groups []string `json:"groups"`
	}
	if err := swag.ReadJSON(raw, &dataAppRolesUpdateParamsBodyAO1); err != nil {
		return err
	}

	o.Groups = dataAppRolesUpdateParamsBodyAO1.Groups

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o AppRolesUpdateBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	appRolesUpdateParamsBodyAO0, err := swag.WriteJSON(o.AppRolesUpdateParamsBodyAllOf0)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, appRolesUpdateParamsBodyAO0)
	var dataAppRolesUpdateParamsBodyAO1 struct {
		Groups []string `json:"groups"`
	}

	dataAppRolesUpdateParamsBodyAO1.Groups = o.Groups

	jsonDataAppRolesUpdateParamsBodyAO1, errAppRolesUpdateParamsBodyAO1 := swag.WriteJSON(dataAppRolesUpdateParamsBodyAO1)
	if errAppRolesUpdateParamsBodyAO1 != nil {
		return nil, errAppRolesUpdateParamsBodyAO1
	}
	_parts = append(_parts, jsonDataAppRolesUpdateParamsBodyAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this app roles update body
func (o *AppRolesUpdateBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with AppRolesUpdateParamsBodyAllOf0

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this app roles update body based on context it is used
func (o *AppRolesUpdateBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AppRolesUpdateBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AppRolesUpdateBody) UnmarshalBinary(b []byte) error {
	var res AppRolesUpdateBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
AppRolesUpdateOKBody app roles update o k body
swagger:model AppRolesUpdateOKBody
*/
type AppRolesUpdateOKBody struct {
	AppRolesUpdateOKBodyAllOf0

	// groups
	Groups []string `json:"groups"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *AppRolesUpdateOKBody) UnmarshalJSON(raw []byte) error {
	// AppRolesUpdateOKBodyAO0
	var appRolesUpdateOKBodyAO0 AppRolesUpdateOKBodyAllOf0
	if err := swag.ReadJSON(raw, &appRolesUpdateOKBodyAO0); err != nil {
		return err
	}
	o.AppRolesUpdateOKBodyAllOf0 = appRolesUpdateOKBodyAO0

	// AppRolesUpdateOKBodyAO1
	var dataAppRolesUpdateOKBodyAO1 struct {
		Groups []string `json:"groups"`
	}
	if err := swag.ReadJSON(raw, &dataAppRolesUpdateOKBodyAO1); err != nil {
		return err
	}

	o.Groups = dataAppRolesUpdateOKBodyAO1.Groups

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o AppRolesUpdateOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	appRolesUpdateOKBodyAO0, err := swag.WriteJSON(o.AppRolesUpdateOKBodyAllOf0)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, appRolesUpdateOKBodyAO0)
	var dataAppRolesUpdateOKBodyAO1 struct {
		Groups []string `json:"groups"`
	}

	dataAppRolesUpdateOKBodyAO1.Groups = o.Groups

	jsonDataAppRolesUpdateOKBodyAO1, errAppRolesUpdateOKBodyAO1 := swag.WriteJSON(dataAppRolesUpdateOKBodyAO1)
	if errAppRolesUpdateOKBodyAO1 != nil {
		return nil, errAppRolesUpdateOKBodyAO1
	}
	_parts = append(_parts, jsonDataAppRolesUpdateOKBodyAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this app roles update o k body
func (o *AppRolesUpdateOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with AppRolesUpdateOKBodyAllOf0

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this app roles update o k body based on context it is used
func (o *AppRolesUpdateOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AppRolesUpdateOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AppRolesUpdateOKBody) UnmarshalBinary(b []byte) error {
	var res AppRolesUpdateOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
AppRolesUpdateOKBodyAllOf0 app roles update o k body all of0
swagger:model AppRolesUpdateOKBodyAllOf0
*/
type AppRolesUpdateOKBodyAllOf0 interface{}

/*
AppRolesUpdateParamsBodyAllOf0 app roles update params body all of0
swagger:model AppRolesUpdateParamsBodyAllOf0
*/
type AppRolesUpdateParamsBodyAllOf0 interface{}
