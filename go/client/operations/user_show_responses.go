// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Staffbase/bitrise-api/go/models"
)

// UserShowReader is a Reader for the UserShow structure.
type UserShowReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UserShowReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUserShowOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUserShowBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUserShowUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUserShowNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUserShowInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /users/{user-slug}] user-show", response, response.Code())
	}
}

// NewUserShowOK creates a UserShowOK with default headers values
func NewUserShowOK() *UserShowOK {
	return &UserShowOK{}
}

/*
UserShowOK describes a response with status code 200, with default header values.

OK
*/
type UserShowOK struct {
	Payload *models.V0UserProfileRespModel
}

// IsSuccess returns true when this user show o k response has a 2xx status code
func (o *UserShowOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this user show o k response has a 3xx status code
func (o *UserShowOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this user show o k response has a 4xx status code
func (o *UserShowOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this user show o k response has a 5xx status code
func (o *UserShowOK) IsServerError() bool {
	return false
}

// IsCode returns true when this user show o k response a status code equal to that given
func (o *UserShowOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the user show o k response
func (o *UserShowOK) Code() int {
	return 200
}

func (o *UserShowOK) Error() string {
	return fmt.Sprintf("[GET /users/{user-slug}][%d] userShowOK  %+v", 200, o.Payload)
}

func (o *UserShowOK) String() string {
	return fmt.Sprintf("[GET /users/{user-slug}][%d] userShowOK  %+v", 200, o.Payload)
}

func (o *UserShowOK) GetPayload() *models.V0UserProfileRespModel {
	return o.Payload
}

func (o *UserShowOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.V0UserProfileRespModel)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUserShowBadRequest creates a UserShowBadRequest with default headers values
func NewUserShowBadRequest() *UserShowBadRequest {
	return &UserShowBadRequest{}
}

/*
UserShowBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type UserShowBadRequest struct {
	Payload *models.ServiceStandardErrorRespModel
}

// IsSuccess returns true when this user show bad request response has a 2xx status code
func (o *UserShowBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this user show bad request response has a 3xx status code
func (o *UserShowBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this user show bad request response has a 4xx status code
func (o *UserShowBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this user show bad request response has a 5xx status code
func (o *UserShowBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this user show bad request response a status code equal to that given
func (o *UserShowBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the user show bad request response
func (o *UserShowBadRequest) Code() int {
	return 400
}

func (o *UserShowBadRequest) Error() string {
	return fmt.Sprintf("[GET /users/{user-slug}][%d] userShowBadRequest  %+v", 400, o.Payload)
}

func (o *UserShowBadRequest) String() string {
	return fmt.Sprintf("[GET /users/{user-slug}][%d] userShowBadRequest  %+v", 400, o.Payload)
}

func (o *UserShowBadRequest) GetPayload() *models.ServiceStandardErrorRespModel {
	return o.Payload
}

func (o *UserShowBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ServiceStandardErrorRespModel)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUserShowUnauthorized creates a UserShowUnauthorized with default headers values
func NewUserShowUnauthorized() *UserShowUnauthorized {
	return &UserShowUnauthorized{}
}

/*
UserShowUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type UserShowUnauthorized struct {
	Payload *models.ServiceStandardErrorRespModel
}

// IsSuccess returns true when this user show unauthorized response has a 2xx status code
func (o *UserShowUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this user show unauthorized response has a 3xx status code
func (o *UserShowUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this user show unauthorized response has a 4xx status code
func (o *UserShowUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this user show unauthorized response has a 5xx status code
func (o *UserShowUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this user show unauthorized response a status code equal to that given
func (o *UserShowUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the user show unauthorized response
func (o *UserShowUnauthorized) Code() int {
	return 401
}

func (o *UserShowUnauthorized) Error() string {
	return fmt.Sprintf("[GET /users/{user-slug}][%d] userShowUnauthorized  %+v", 401, o.Payload)
}

func (o *UserShowUnauthorized) String() string {
	return fmt.Sprintf("[GET /users/{user-slug}][%d] userShowUnauthorized  %+v", 401, o.Payload)
}

func (o *UserShowUnauthorized) GetPayload() *models.ServiceStandardErrorRespModel {
	return o.Payload
}

func (o *UserShowUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ServiceStandardErrorRespModel)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUserShowNotFound creates a UserShowNotFound with default headers values
func NewUserShowNotFound() *UserShowNotFound {
	return &UserShowNotFound{}
}

/*
UserShowNotFound describes a response with status code 404, with default header values.

Not Found
*/
type UserShowNotFound struct {
	Payload *models.ServiceStandardErrorRespModel
}

// IsSuccess returns true when this user show not found response has a 2xx status code
func (o *UserShowNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this user show not found response has a 3xx status code
func (o *UserShowNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this user show not found response has a 4xx status code
func (o *UserShowNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this user show not found response has a 5xx status code
func (o *UserShowNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this user show not found response a status code equal to that given
func (o *UserShowNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the user show not found response
func (o *UserShowNotFound) Code() int {
	return 404
}

func (o *UserShowNotFound) Error() string {
	return fmt.Sprintf("[GET /users/{user-slug}][%d] userShowNotFound  %+v", 404, o.Payload)
}

func (o *UserShowNotFound) String() string {
	return fmt.Sprintf("[GET /users/{user-slug}][%d] userShowNotFound  %+v", 404, o.Payload)
}

func (o *UserShowNotFound) GetPayload() *models.ServiceStandardErrorRespModel {
	return o.Payload
}

func (o *UserShowNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ServiceStandardErrorRespModel)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUserShowInternalServerError creates a UserShowInternalServerError with default headers values
func NewUserShowInternalServerError() *UserShowInternalServerError {
	return &UserShowInternalServerError{}
}

/*
UserShowInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type UserShowInternalServerError struct {
	Payload *models.ServiceStandardErrorRespModel
}

// IsSuccess returns true when this user show internal server error response has a 2xx status code
func (o *UserShowInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this user show internal server error response has a 3xx status code
func (o *UserShowInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this user show internal server error response has a 4xx status code
func (o *UserShowInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this user show internal server error response has a 5xx status code
func (o *UserShowInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this user show internal server error response a status code equal to that given
func (o *UserShowInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the user show internal server error response
func (o *UserShowInternalServerError) Code() int {
	return 500
}

func (o *UserShowInternalServerError) Error() string {
	return fmt.Sprintf("[GET /users/{user-slug}][%d] userShowInternalServerError  %+v", 500, o.Payload)
}

func (o *UserShowInternalServerError) String() string {
	return fmt.Sprintf("[GET /users/{user-slug}][%d] userShowInternalServerError  %+v", 500, o.Payload)
}

func (o *UserShowInternalServerError) GetPayload() *models.ServiceStandardErrorRespModel {
	return o.Payload
}

func (o *UserShowInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ServiceStandardErrorRespModel)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
