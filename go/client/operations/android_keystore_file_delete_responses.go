// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Staffbase/bitrise-api/go/models"
)

// AndroidKeystoreFileDeleteReader is a Reader for the AndroidKeystoreFileDelete structure.
type AndroidKeystoreFileDeleteReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AndroidKeystoreFileDeleteReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAndroidKeystoreFileDeleteOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewAndroidKeystoreFileDeleteBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewAndroidKeystoreFileDeleteUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewAndroidKeystoreFileDeleteNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewAndroidKeystoreFileDeleteInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[DELETE /apps/{app-slug}/android-keystore-files/{android-keystore-file-slug}] android-keystore-file-delete", response, response.Code())
	}
}

// NewAndroidKeystoreFileDeleteOK creates a AndroidKeystoreFileDeleteOK with default headers values
func NewAndroidKeystoreFileDeleteOK() *AndroidKeystoreFileDeleteOK {
	return &AndroidKeystoreFileDeleteOK{}
}

/*
AndroidKeystoreFileDeleteOK describes a response with status code 200, with default header values.

OK
*/
type AndroidKeystoreFileDeleteOK struct {
	Payload *models.V0ProjectFileStorageResponseModel
}

// IsSuccess returns true when this android keystore file delete o k response has a 2xx status code
func (o *AndroidKeystoreFileDeleteOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this android keystore file delete o k response has a 3xx status code
func (o *AndroidKeystoreFileDeleteOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this android keystore file delete o k response has a 4xx status code
func (o *AndroidKeystoreFileDeleteOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this android keystore file delete o k response has a 5xx status code
func (o *AndroidKeystoreFileDeleteOK) IsServerError() bool {
	return false
}

// IsCode returns true when this android keystore file delete o k response a status code equal to that given
func (o *AndroidKeystoreFileDeleteOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the android keystore file delete o k response
func (o *AndroidKeystoreFileDeleteOK) Code() int {
	return 200
}

func (o *AndroidKeystoreFileDeleteOK) Error() string {
	return fmt.Sprintf("[DELETE /apps/{app-slug}/android-keystore-files/{android-keystore-file-slug}][%d] androidKeystoreFileDeleteOK  %+v", 200, o.Payload)
}

func (o *AndroidKeystoreFileDeleteOK) String() string {
	return fmt.Sprintf("[DELETE /apps/{app-slug}/android-keystore-files/{android-keystore-file-slug}][%d] androidKeystoreFileDeleteOK  %+v", 200, o.Payload)
}

func (o *AndroidKeystoreFileDeleteOK) GetPayload() *models.V0ProjectFileStorageResponseModel {
	return o.Payload
}

func (o *AndroidKeystoreFileDeleteOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.V0ProjectFileStorageResponseModel)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAndroidKeystoreFileDeleteBadRequest creates a AndroidKeystoreFileDeleteBadRequest with default headers values
func NewAndroidKeystoreFileDeleteBadRequest() *AndroidKeystoreFileDeleteBadRequest {
	return &AndroidKeystoreFileDeleteBadRequest{}
}

/*
AndroidKeystoreFileDeleteBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type AndroidKeystoreFileDeleteBadRequest struct {
	Payload *models.ServiceStandardErrorRespModel
}

// IsSuccess returns true when this android keystore file delete bad request response has a 2xx status code
func (o *AndroidKeystoreFileDeleteBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this android keystore file delete bad request response has a 3xx status code
func (o *AndroidKeystoreFileDeleteBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this android keystore file delete bad request response has a 4xx status code
func (o *AndroidKeystoreFileDeleteBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this android keystore file delete bad request response has a 5xx status code
func (o *AndroidKeystoreFileDeleteBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this android keystore file delete bad request response a status code equal to that given
func (o *AndroidKeystoreFileDeleteBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the android keystore file delete bad request response
func (o *AndroidKeystoreFileDeleteBadRequest) Code() int {
	return 400
}

func (o *AndroidKeystoreFileDeleteBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /apps/{app-slug}/android-keystore-files/{android-keystore-file-slug}][%d] androidKeystoreFileDeleteBadRequest  %+v", 400, o.Payload)
}

func (o *AndroidKeystoreFileDeleteBadRequest) String() string {
	return fmt.Sprintf("[DELETE /apps/{app-slug}/android-keystore-files/{android-keystore-file-slug}][%d] androidKeystoreFileDeleteBadRequest  %+v", 400, o.Payload)
}

func (o *AndroidKeystoreFileDeleteBadRequest) GetPayload() *models.ServiceStandardErrorRespModel {
	return o.Payload
}

func (o *AndroidKeystoreFileDeleteBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ServiceStandardErrorRespModel)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAndroidKeystoreFileDeleteUnauthorized creates a AndroidKeystoreFileDeleteUnauthorized with default headers values
func NewAndroidKeystoreFileDeleteUnauthorized() *AndroidKeystoreFileDeleteUnauthorized {
	return &AndroidKeystoreFileDeleteUnauthorized{}
}

/*
AndroidKeystoreFileDeleteUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type AndroidKeystoreFileDeleteUnauthorized struct {
	Payload *models.ServiceStandardErrorRespModel
}

// IsSuccess returns true when this android keystore file delete unauthorized response has a 2xx status code
func (o *AndroidKeystoreFileDeleteUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this android keystore file delete unauthorized response has a 3xx status code
func (o *AndroidKeystoreFileDeleteUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this android keystore file delete unauthorized response has a 4xx status code
func (o *AndroidKeystoreFileDeleteUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this android keystore file delete unauthorized response has a 5xx status code
func (o *AndroidKeystoreFileDeleteUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this android keystore file delete unauthorized response a status code equal to that given
func (o *AndroidKeystoreFileDeleteUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the android keystore file delete unauthorized response
func (o *AndroidKeystoreFileDeleteUnauthorized) Code() int {
	return 401
}

func (o *AndroidKeystoreFileDeleteUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /apps/{app-slug}/android-keystore-files/{android-keystore-file-slug}][%d] androidKeystoreFileDeleteUnauthorized  %+v", 401, o.Payload)
}

func (o *AndroidKeystoreFileDeleteUnauthorized) String() string {
	return fmt.Sprintf("[DELETE /apps/{app-slug}/android-keystore-files/{android-keystore-file-slug}][%d] androidKeystoreFileDeleteUnauthorized  %+v", 401, o.Payload)
}

func (o *AndroidKeystoreFileDeleteUnauthorized) GetPayload() *models.ServiceStandardErrorRespModel {
	return o.Payload
}

func (o *AndroidKeystoreFileDeleteUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ServiceStandardErrorRespModel)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAndroidKeystoreFileDeleteNotFound creates a AndroidKeystoreFileDeleteNotFound with default headers values
func NewAndroidKeystoreFileDeleteNotFound() *AndroidKeystoreFileDeleteNotFound {
	return &AndroidKeystoreFileDeleteNotFound{}
}

/*
AndroidKeystoreFileDeleteNotFound describes a response with status code 404, with default header values.

Not Found
*/
type AndroidKeystoreFileDeleteNotFound struct {
	Payload *models.ServiceStandardErrorRespModel
}

// IsSuccess returns true when this android keystore file delete not found response has a 2xx status code
func (o *AndroidKeystoreFileDeleteNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this android keystore file delete not found response has a 3xx status code
func (o *AndroidKeystoreFileDeleteNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this android keystore file delete not found response has a 4xx status code
func (o *AndroidKeystoreFileDeleteNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this android keystore file delete not found response has a 5xx status code
func (o *AndroidKeystoreFileDeleteNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this android keystore file delete not found response a status code equal to that given
func (o *AndroidKeystoreFileDeleteNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the android keystore file delete not found response
func (o *AndroidKeystoreFileDeleteNotFound) Code() int {
	return 404
}

func (o *AndroidKeystoreFileDeleteNotFound) Error() string {
	return fmt.Sprintf("[DELETE /apps/{app-slug}/android-keystore-files/{android-keystore-file-slug}][%d] androidKeystoreFileDeleteNotFound  %+v", 404, o.Payload)
}

func (o *AndroidKeystoreFileDeleteNotFound) String() string {
	return fmt.Sprintf("[DELETE /apps/{app-slug}/android-keystore-files/{android-keystore-file-slug}][%d] androidKeystoreFileDeleteNotFound  %+v", 404, o.Payload)
}

func (o *AndroidKeystoreFileDeleteNotFound) GetPayload() *models.ServiceStandardErrorRespModel {
	return o.Payload
}

func (o *AndroidKeystoreFileDeleteNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ServiceStandardErrorRespModel)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAndroidKeystoreFileDeleteInternalServerError creates a AndroidKeystoreFileDeleteInternalServerError with default headers values
func NewAndroidKeystoreFileDeleteInternalServerError() *AndroidKeystoreFileDeleteInternalServerError {
	return &AndroidKeystoreFileDeleteInternalServerError{}
}

/*
AndroidKeystoreFileDeleteInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type AndroidKeystoreFileDeleteInternalServerError struct {
	Payload *models.ServiceStandardErrorRespModel
}

// IsSuccess returns true when this android keystore file delete internal server error response has a 2xx status code
func (o *AndroidKeystoreFileDeleteInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this android keystore file delete internal server error response has a 3xx status code
func (o *AndroidKeystoreFileDeleteInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this android keystore file delete internal server error response has a 4xx status code
func (o *AndroidKeystoreFileDeleteInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this android keystore file delete internal server error response has a 5xx status code
func (o *AndroidKeystoreFileDeleteInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this android keystore file delete internal server error response a status code equal to that given
func (o *AndroidKeystoreFileDeleteInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the android keystore file delete internal server error response
func (o *AndroidKeystoreFileDeleteInternalServerError) Code() int {
	return 500
}

func (o *AndroidKeystoreFileDeleteInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /apps/{app-slug}/android-keystore-files/{android-keystore-file-slug}][%d] androidKeystoreFileDeleteInternalServerError  %+v", 500, o.Payload)
}

func (o *AndroidKeystoreFileDeleteInternalServerError) String() string {
	return fmt.Sprintf("[DELETE /apps/{app-slug}/android-keystore-files/{android-keystore-file-slug}][%d] androidKeystoreFileDeleteInternalServerError  %+v", 500, o.Payload)
}

func (o *AndroidKeystoreFileDeleteInternalServerError) GetPayload() *models.ServiceStandardErrorRespModel {
	return o.Payload
}

func (o *AndroidKeystoreFileDeleteInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ServiceStandardErrorRespModel)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
