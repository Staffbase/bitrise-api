// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Staffbase/bitrise-api/go/models"
)

// AppFinishReader is a Reader for the AppFinish structure.
type AppFinishReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AppFinishReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAppFinishOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewAppFinishBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewAppFinishUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewAppFinishNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewAppFinishInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewAppFinishOK creates a AppFinishOK with default headers values
func NewAppFinishOK() *AppFinishOK {
	return &AppFinishOK{}
}

/*
AppFinishOK describes a response with status code 200, with default header values.

OK
*/
type AppFinishOK struct {
	Payload *models.V0AppFinishRespModel
}

// IsSuccess returns true when this app finish o k response has a 2xx status code
func (o *AppFinishOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this app finish o k response has a 3xx status code
func (o *AppFinishOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this app finish o k response has a 4xx status code
func (o *AppFinishOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this app finish o k response has a 5xx status code
func (o *AppFinishOK) IsServerError() bool {
	return false
}

// IsCode returns true when this app finish o k response a status code equal to that given
func (o *AppFinishOK) IsCode(code int) bool {
	return code == 200
}

func (o *AppFinishOK) Error() string {
	return fmt.Sprintf("[POST /apps/{app-slug}/finish][%d] appFinishOK  %+v", 200, o.Payload)
}

func (o *AppFinishOK) String() string {
	return fmt.Sprintf("[POST /apps/{app-slug}/finish][%d] appFinishOK  %+v", 200, o.Payload)
}

func (o *AppFinishOK) GetPayload() *models.V0AppFinishRespModel {
	return o.Payload
}

func (o *AppFinishOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.V0AppFinishRespModel)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAppFinishBadRequest creates a AppFinishBadRequest with default headers values
func NewAppFinishBadRequest() *AppFinishBadRequest {
	return &AppFinishBadRequest{}
}

/*
AppFinishBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type AppFinishBadRequest struct {
	Payload *models.ServiceStandardErrorRespModel
}

// IsSuccess returns true when this app finish bad request response has a 2xx status code
func (o *AppFinishBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this app finish bad request response has a 3xx status code
func (o *AppFinishBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this app finish bad request response has a 4xx status code
func (o *AppFinishBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this app finish bad request response has a 5xx status code
func (o *AppFinishBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this app finish bad request response a status code equal to that given
func (o *AppFinishBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *AppFinishBadRequest) Error() string {
	return fmt.Sprintf("[POST /apps/{app-slug}/finish][%d] appFinishBadRequest  %+v", 400, o.Payload)
}

func (o *AppFinishBadRequest) String() string {
	return fmt.Sprintf("[POST /apps/{app-slug}/finish][%d] appFinishBadRequest  %+v", 400, o.Payload)
}

func (o *AppFinishBadRequest) GetPayload() *models.ServiceStandardErrorRespModel {
	return o.Payload
}

func (o *AppFinishBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ServiceStandardErrorRespModel)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAppFinishUnauthorized creates a AppFinishUnauthorized with default headers values
func NewAppFinishUnauthorized() *AppFinishUnauthorized {
	return &AppFinishUnauthorized{}
}

/*
AppFinishUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type AppFinishUnauthorized struct {
	Payload *models.ServiceStandardErrorRespModel
}

// IsSuccess returns true when this app finish unauthorized response has a 2xx status code
func (o *AppFinishUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this app finish unauthorized response has a 3xx status code
func (o *AppFinishUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this app finish unauthorized response has a 4xx status code
func (o *AppFinishUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this app finish unauthorized response has a 5xx status code
func (o *AppFinishUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this app finish unauthorized response a status code equal to that given
func (o *AppFinishUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *AppFinishUnauthorized) Error() string {
	return fmt.Sprintf("[POST /apps/{app-slug}/finish][%d] appFinishUnauthorized  %+v", 401, o.Payload)
}

func (o *AppFinishUnauthorized) String() string {
	return fmt.Sprintf("[POST /apps/{app-slug}/finish][%d] appFinishUnauthorized  %+v", 401, o.Payload)
}

func (o *AppFinishUnauthorized) GetPayload() *models.ServiceStandardErrorRespModel {
	return o.Payload
}

func (o *AppFinishUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ServiceStandardErrorRespModel)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAppFinishNotFound creates a AppFinishNotFound with default headers values
func NewAppFinishNotFound() *AppFinishNotFound {
	return &AppFinishNotFound{}
}

/*
AppFinishNotFound describes a response with status code 404, with default header values.

Not Found
*/
type AppFinishNotFound struct {
	Payload *models.ServiceStandardErrorRespModel
}

// IsSuccess returns true when this app finish not found response has a 2xx status code
func (o *AppFinishNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this app finish not found response has a 3xx status code
func (o *AppFinishNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this app finish not found response has a 4xx status code
func (o *AppFinishNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this app finish not found response has a 5xx status code
func (o *AppFinishNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this app finish not found response a status code equal to that given
func (o *AppFinishNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *AppFinishNotFound) Error() string {
	return fmt.Sprintf("[POST /apps/{app-slug}/finish][%d] appFinishNotFound  %+v", 404, o.Payload)
}

func (o *AppFinishNotFound) String() string {
	return fmt.Sprintf("[POST /apps/{app-slug}/finish][%d] appFinishNotFound  %+v", 404, o.Payload)
}

func (o *AppFinishNotFound) GetPayload() *models.ServiceStandardErrorRespModel {
	return o.Payload
}

func (o *AppFinishNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ServiceStandardErrorRespModel)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAppFinishInternalServerError creates a AppFinishInternalServerError with default headers values
func NewAppFinishInternalServerError() *AppFinishInternalServerError {
	return &AppFinishInternalServerError{}
}

/*
AppFinishInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type AppFinishInternalServerError struct {
	Payload *models.ServiceStandardErrorRespModel
}

// IsSuccess returns true when this app finish internal server error response has a 2xx status code
func (o *AppFinishInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this app finish internal server error response has a 3xx status code
func (o *AppFinishInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this app finish internal server error response has a 4xx status code
func (o *AppFinishInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this app finish internal server error response has a 5xx status code
func (o *AppFinishInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this app finish internal server error response a status code equal to that given
func (o *AppFinishInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *AppFinishInternalServerError) Error() string {
	return fmt.Sprintf("[POST /apps/{app-slug}/finish][%d] appFinishInternalServerError  %+v", 500, o.Payload)
}

func (o *AppFinishInternalServerError) String() string {
	return fmt.Sprintf("[POST /apps/{app-slug}/finish][%d] appFinishInternalServerError  %+v", 500, o.Payload)
}

func (o *AppFinishInternalServerError) GetPayload() *models.ServiceStandardErrorRespModel {
	return o.Payload
}

func (o *AppFinishInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ServiceStandardErrorRespModel)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
