// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Staffbase/bitrise-api/go/models"
)

// CacheListReader is a Reader for the CacheList structure.
type CacheListReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CacheListReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCacheListOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCacheListBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewCacheListUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCacheListNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCacheListInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /apps/{app-slug}/cache-items] cache-list", response, response.Code())
	}
}

// NewCacheListOK creates a CacheListOK with default headers values
func NewCacheListOK() *CacheListOK {
	return &CacheListOK{}
}

/*
CacheListOK describes a response with status code 200, with default header values.

OK
*/
type CacheListOK struct {
	Payload *models.V0CacheItemListResponseModel
}

// IsSuccess returns true when this cache list o k response has a 2xx status code
func (o *CacheListOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this cache list o k response has a 3xx status code
func (o *CacheListOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cache list o k response has a 4xx status code
func (o *CacheListOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this cache list o k response has a 5xx status code
func (o *CacheListOK) IsServerError() bool {
	return false
}

// IsCode returns true when this cache list o k response a status code equal to that given
func (o *CacheListOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the cache list o k response
func (o *CacheListOK) Code() int {
	return 200
}

func (o *CacheListOK) Error() string {
	return fmt.Sprintf("[GET /apps/{app-slug}/cache-items][%d] cacheListOK  %+v", 200, o.Payload)
}

func (o *CacheListOK) String() string {
	return fmt.Sprintf("[GET /apps/{app-slug}/cache-items][%d] cacheListOK  %+v", 200, o.Payload)
}

func (o *CacheListOK) GetPayload() *models.V0CacheItemListResponseModel {
	return o.Payload
}

func (o *CacheListOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.V0CacheItemListResponseModel)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCacheListBadRequest creates a CacheListBadRequest with default headers values
func NewCacheListBadRequest() *CacheListBadRequest {
	return &CacheListBadRequest{}
}

/*
CacheListBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type CacheListBadRequest struct {
	Payload *models.ServiceStandardErrorRespModel
}

// IsSuccess returns true when this cache list bad request response has a 2xx status code
func (o *CacheListBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this cache list bad request response has a 3xx status code
func (o *CacheListBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cache list bad request response has a 4xx status code
func (o *CacheListBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this cache list bad request response has a 5xx status code
func (o *CacheListBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this cache list bad request response a status code equal to that given
func (o *CacheListBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the cache list bad request response
func (o *CacheListBadRequest) Code() int {
	return 400
}

func (o *CacheListBadRequest) Error() string {
	return fmt.Sprintf("[GET /apps/{app-slug}/cache-items][%d] cacheListBadRequest  %+v", 400, o.Payload)
}

func (o *CacheListBadRequest) String() string {
	return fmt.Sprintf("[GET /apps/{app-slug}/cache-items][%d] cacheListBadRequest  %+v", 400, o.Payload)
}

func (o *CacheListBadRequest) GetPayload() *models.ServiceStandardErrorRespModel {
	return o.Payload
}

func (o *CacheListBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ServiceStandardErrorRespModel)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCacheListUnauthorized creates a CacheListUnauthorized with default headers values
func NewCacheListUnauthorized() *CacheListUnauthorized {
	return &CacheListUnauthorized{}
}

/*
CacheListUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type CacheListUnauthorized struct {
	Payload *models.ServiceStandardErrorRespModel
}

// IsSuccess returns true when this cache list unauthorized response has a 2xx status code
func (o *CacheListUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this cache list unauthorized response has a 3xx status code
func (o *CacheListUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cache list unauthorized response has a 4xx status code
func (o *CacheListUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this cache list unauthorized response has a 5xx status code
func (o *CacheListUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this cache list unauthorized response a status code equal to that given
func (o *CacheListUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the cache list unauthorized response
func (o *CacheListUnauthorized) Code() int {
	return 401
}

func (o *CacheListUnauthorized) Error() string {
	return fmt.Sprintf("[GET /apps/{app-slug}/cache-items][%d] cacheListUnauthorized  %+v", 401, o.Payload)
}

func (o *CacheListUnauthorized) String() string {
	return fmt.Sprintf("[GET /apps/{app-slug}/cache-items][%d] cacheListUnauthorized  %+v", 401, o.Payload)
}

func (o *CacheListUnauthorized) GetPayload() *models.ServiceStandardErrorRespModel {
	return o.Payload
}

func (o *CacheListUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ServiceStandardErrorRespModel)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCacheListNotFound creates a CacheListNotFound with default headers values
func NewCacheListNotFound() *CacheListNotFound {
	return &CacheListNotFound{}
}

/*
CacheListNotFound describes a response with status code 404, with default header values.

Not Found
*/
type CacheListNotFound struct {
	Payload *models.ServiceStandardErrorRespModel
}

// IsSuccess returns true when this cache list not found response has a 2xx status code
func (o *CacheListNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this cache list not found response has a 3xx status code
func (o *CacheListNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cache list not found response has a 4xx status code
func (o *CacheListNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this cache list not found response has a 5xx status code
func (o *CacheListNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this cache list not found response a status code equal to that given
func (o *CacheListNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the cache list not found response
func (o *CacheListNotFound) Code() int {
	return 404
}

func (o *CacheListNotFound) Error() string {
	return fmt.Sprintf("[GET /apps/{app-slug}/cache-items][%d] cacheListNotFound  %+v", 404, o.Payload)
}

func (o *CacheListNotFound) String() string {
	return fmt.Sprintf("[GET /apps/{app-slug}/cache-items][%d] cacheListNotFound  %+v", 404, o.Payload)
}

func (o *CacheListNotFound) GetPayload() *models.ServiceStandardErrorRespModel {
	return o.Payload
}

func (o *CacheListNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ServiceStandardErrorRespModel)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCacheListInternalServerError creates a CacheListInternalServerError with default headers values
func NewCacheListInternalServerError() *CacheListInternalServerError {
	return &CacheListInternalServerError{}
}

/*
CacheListInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type CacheListInternalServerError struct {
	Payload *models.ServiceStandardErrorRespModel
}

// IsSuccess returns true when this cache list internal server error response has a 2xx status code
func (o *CacheListInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this cache list internal server error response has a 3xx status code
func (o *CacheListInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cache list internal server error response has a 4xx status code
func (o *CacheListInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this cache list internal server error response has a 5xx status code
func (o *CacheListInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this cache list internal server error response a status code equal to that given
func (o *CacheListInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the cache list internal server error response
func (o *CacheListInternalServerError) Code() int {
	return 500
}

func (o *CacheListInternalServerError) Error() string {
	return fmt.Sprintf("[GET /apps/{app-slug}/cache-items][%d] cacheListInternalServerError  %+v", 500, o.Payload)
}

func (o *CacheListInternalServerError) String() string {
	return fmt.Sprintf("[GET /apps/{app-slug}/cache-items][%d] cacheListInternalServerError  %+v", 500, o.Payload)
}

func (o *CacheListInternalServerError) GetPayload() *models.ServiceStandardErrorRespModel {
	return o.Payload
}

func (o *CacheListInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ServiceStandardErrorRespModel)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
