// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Staffbase/bitrise-api/go/models"
)

// PipelineListAllReader is a Reader for the PipelineListAll structure.
type PipelineListAllReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PipelineListAllReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPipelineListAllOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPipelineListAllBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPipelineListAllUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPipelineListAllNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPipelineListAllInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /pipelines] pipeline-list-all", response, response.Code())
	}
}

// NewPipelineListAllOK creates a PipelineListAllOK with default headers values
func NewPipelineListAllOK() *PipelineListAllOK {
	return &PipelineListAllOK{}
}

/*
PipelineListAllOK describes a response with status code 200, with default header values.

OK
*/
type PipelineListAllOK struct {
	Payload *models.V0PipelineListAllResponseModel
}

// IsSuccess returns true when this pipeline list all o k response has a 2xx status code
func (o *PipelineListAllOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this pipeline list all o k response has a 3xx status code
func (o *PipelineListAllOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this pipeline list all o k response has a 4xx status code
func (o *PipelineListAllOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this pipeline list all o k response has a 5xx status code
func (o *PipelineListAllOK) IsServerError() bool {
	return false
}

// IsCode returns true when this pipeline list all o k response a status code equal to that given
func (o *PipelineListAllOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the pipeline list all o k response
func (o *PipelineListAllOK) Code() int {
	return 200
}

func (o *PipelineListAllOK) Error() string {
	return fmt.Sprintf("[GET /pipelines][%d] pipelineListAllOK  %+v", 200, o.Payload)
}

func (o *PipelineListAllOK) String() string {
	return fmt.Sprintf("[GET /pipelines][%d] pipelineListAllOK  %+v", 200, o.Payload)
}

func (o *PipelineListAllOK) GetPayload() *models.V0PipelineListAllResponseModel {
	return o.Payload
}

func (o *PipelineListAllOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.V0PipelineListAllResponseModel)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPipelineListAllBadRequest creates a PipelineListAllBadRequest with default headers values
func NewPipelineListAllBadRequest() *PipelineListAllBadRequest {
	return &PipelineListAllBadRequest{}
}

/*
PipelineListAllBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type PipelineListAllBadRequest struct {
	Payload *models.ServiceStandardErrorRespModel
}

// IsSuccess returns true when this pipeline list all bad request response has a 2xx status code
func (o *PipelineListAllBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this pipeline list all bad request response has a 3xx status code
func (o *PipelineListAllBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this pipeline list all bad request response has a 4xx status code
func (o *PipelineListAllBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this pipeline list all bad request response has a 5xx status code
func (o *PipelineListAllBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this pipeline list all bad request response a status code equal to that given
func (o *PipelineListAllBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the pipeline list all bad request response
func (o *PipelineListAllBadRequest) Code() int {
	return 400
}

func (o *PipelineListAllBadRequest) Error() string {
	return fmt.Sprintf("[GET /pipelines][%d] pipelineListAllBadRequest  %+v", 400, o.Payload)
}

func (o *PipelineListAllBadRequest) String() string {
	return fmt.Sprintf("[GET /pipelines][%d] pipelineListAllBadRequest  %+v", 400, o.Payload)
}

func (o *PipelineListAllBadRequest) GetPayload() *models.ServiceStandardErrorRespModel {
	return o.Payload
}

func (o *PipelineListAllBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ServiceStandardErrorRespModel)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPipelineListAllUnauthorized creates a PipelineListAllUnauthorized with default headers values
func NewPipelineListAllUnauthorized() *PipelineListAllUnauthorized {
	return &PipelineListAllUnauthorized{}
}

/*
PipelineListAllUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type PipelineListAllUnauthorized struct {
	Payload *models.ServiceStandardErrorRespModel
}

// IsSuccess returns true when this pipeline list all unauthorized response has a 2xx status code
func (o *PipelineListAllUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this pipeline list all unauthorized response has a 3xx status code
func (o *PipelineListAllUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this pipeline list all unauthorized response has a 4xx status code
func (o *PipelineListAllUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this pipeline list all unauthorized response has a 5xx status code
func (o *PipelineListAllUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this pipeline list all unauthorized response a status code equal to that given
func (o *PipelineListAllUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the pipeline list all unauthorized response
func (o *PipelineListAllUnauthorized) Code() int {
	return 401
}

func (o *PipelineListAllUnauthorized) Error() string {
	return fmt.Sprintf("[GET /pipelines][%d] pipelineListAllUnauthorized  %+v", 401, o.Payload)
}

func (o *PipelineListAllUnauthorized) String() string {
	return fmt.Sprintf("[GET /pipelines][%d] pipelineListAllUnauthorized  %+v", 401, o.Payload)
}

func (o *PipelineListAllUnauthorized) GetPayload() *models.ServiceStandardErrorRespModel {
	return o.Payload
}

func (o *PipelineListAllUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ServiceStandardErrorRespModel)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPipelineListAllNotFound creates a PipelineListAllNotFound with default headers values
func NewPipelineListAllNotFound() *PipelineListAllNotFound {
	return &PipelineListAllNotFound{}
}

/*
PipelineListAllNotFound describes a response with status code 404, with default header values.

Not Found
*/
type PipelineListAllNotFound struct {
	Payload *models.ServiceStandardErrorRespModel
}

// IsSuccess returns true when this pipeline list all not found response has a 2xx status code
func (o *PipelineListAllNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this pipeline list all not found response has a 3xx status code
func (o *PipelineListAllNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this pipeline list all not found response has a 4xx status code
func (o *PipelineListAllNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this pipeline list all not found response has a 5xx status code
func (o *PipelineListAllNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this pipeline list all not found response a status code equal to that given
func (o *PipelineListAllNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the pipeline list all not found response
func (o *PipelineListAllNotFound) Code() int {
	return 404
}

func (o *PipelineListAllNotFound) Error() string {
	return fmt.Sprintf("[GET /pipelines][%d] pipelineListAllNotFound  %+v", 404, o.Payload)
}

func (o *PipelineListAllNotFound) String() string {
	return fmt.Sprintf("[GET /pipelines][%d] pipelineListAllNotFound  %+v", 404, o.Payload)
}

func (o *PipelineListAllNotFound) GetPayload() *models.ServiceStandardErrorRespModel {
	return o.Payload
}

func (o *PipelineListAllNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ServiceStandardErrorRespModel)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPipelineListAllInternalServerError creates a PipelineListAllInternalServerError with default headers values
func NewPipelineListAllInternalServerError() *PipelineListAllInternalServerError {
	return &PipelineListAllInternalServerError{}
}

/*
PipelineListAllInternalServerError describes a response with status code 500, with default header values.

Internal Server Error
*/
type PipelineListAllInternalServerError struct {
	Payload *models.ServiceStandardErrorRespModel
}

// IsSuccess returns true when this pipeline list all internal server error response has a 2xx status code
func (o *PipelineListAllInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this pipeline list all internal server error response has a 3xx status code
func (o *PipelineListAllInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this pipeline list all internal server error response has a 4xx status code
func (o *PipelineListAllInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this pipeline list all internal server error response has a 5xx status code
func (o *PipelineListAllInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this pipeline list all internal server error response a status code equal to that given
func (o *PipelineListAllInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the pipeline list all internal server error response
func (o *PipelineListAllInternalServerError) Code() int {
	return 500
}

func (o *PipelineListAllInternalServerError) Error() string {
	return fmt.Sprintf("[GET /pipelines][%d] pipelineListAllInternalServerError  %+v", 500, o.Payload)
}

func (o *PipelineListAllInternalServerError) String() string {
	return fmt.Sprintf("[GET /pipelines][%d] pipelineListAllInternalServerError  %+v", 500, o.Payload)
}

func (o *PipelineListAllInternalServerError) GetPayload() *models.ServiceStandardErrorRespModel {
	return o.Payload
}

func (o *PipelineListAllInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ServiceStandardErrorRespModel)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
