// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V0ActivityEventResponseItemModel v0 activity event response item model
//
// swagger:model v0.ActivityEventResponseItemModel
type V0ActivityEventResponseItemModel struct {

	// created at
	CreatedAt string `json:"created_at,omitempty"`

	// description
	Description *NullsString `json:"description,omitempty"`

	// event icon
	EventIcon *NullsString `json:"event_icon,omitempty"`

	// event stype
	EventStype *NullsString `json:"event_stype,omitempty"`

	// repository avatar icon url
	RepositoryAvatarIconURL string `json:"repository_avatar_icon_url,omitempty"`

	// repository title
	RepositoryTitle string `json:"repository_title,omitempty"`

	// slug
	Slug string `json:"slug,omitempty"`

	// target path string
	TargetPathString *NullsString `json:"target_path_string,omitempty"`

	// title
	Title *NullsString `json:"title,omitempty"`
}

// Validate validates this v0 activity event response item model
func (m *V0ActivityEventResponseItemModel) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEventIcon(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEventStype(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetPathString(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTitle(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V0ActivityEventResponseItemModel) validateDescription(formats strfmt.Registry) error {
	if swag.IsZero(m.Description) { // not required
		return nil
	}

	if m.Description != nil {
		if err := m.Description.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("description")
			}
			return err
		}
	}

	return nil
}

func (m *V0ActivityEventResponseItemModel) validateEventIcon(formats strfmt.Registry) error {
	if swag.IsZero(m.EventIcon) { // not required
		return nil
	}

	if m.EventIcon != nil {
		if err := m.EventIcon.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("event_icon")
			}
			return err
		}
	}

	return nil
}

func (m *V0ActivityEventResponseItemModel) validateEventStype(formats strfmt.Registry) error {
	if swag.IsZero(m.EventStype) { // not required
		return nil
	}

	if m.EventStype != nil {
		if err := m.EventStype.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("event_stype")
			}
			return err
		}
	}

	return nil
}

func (m *V0ActivityEventResponseItemModel) validateTargetPathString(formats strfmt.Registry) error {
	if swag.IsZero(m.TargetPathString) { // not required
		return nil
	}

	if m.TargetPathString != nil {
		if err := m.TargetPathString.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("target_path_string")
			}
			return err
		}
	}

	return nil
}

func (m *V0ActivityEventResponseItemModel) validateTitle(formats strfmt.Registry) error {
	if swag.IsZero(m.Title) { // not required
		return nil
	}

	if m.Title != nil {
		if err := m.Title.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("title")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this v0 activity event response item model based on the context it is used
func (m *V0ActivityEventResponseItemModel) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDescription(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEventIcon(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEventStype(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTargetPathString(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTitle(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V0ActivityEventResponseItemModel) contextValidateDescription(ctx context.Context, formats strfmt.Registry) error {

	if m.Description != nil {
		if err := m.Description.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("description")
			}
			return err
		}
	}

	return nil
}

func (m *V0ActivityEventResponseItemModel) contextValidateEventIcon(ctx context.Context, formats strfmt.Registry) error {

	if m.EventIcon != nil {
		if err := m.EventIcon.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("event_icon")
			}
			return err
		}
	}

	return nil
}

func (m *V0ActivityEventResponseItemModel) contextValidateEventStype(ctx context.Context, formats strfmt.Registry) error {

	if m.EventStype != nil {
		if err := m.EventStype.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("event_stype")
			}
			return err
		}
	}

	return nil
}

func (m *V0ActivityEventResponseItemModel) contextValidateTargetPathString(ctx context.Context, formats strfmt.Registry) error {

	if m.TargetPathString != nil {
		if err := m.TargetPathString.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("target_path_string")
			}
			return err
		}
	}

	return nil
}

func (m *V0ActivityEventResponseItemModel) contextValidateTitle(ctx context.Context, formats strfmt.Registry) error {

	if m.Title != nil {
		if err := m.Title.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("title")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V0ActivityEventResponseItemModel) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V0ActivityEventResponseItemModel) UnmarshalBinary(b []byte) error {
	var res V0ActivityEventResponseItemModel
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
