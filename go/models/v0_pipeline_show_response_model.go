// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V0PipelineShowResponseModel v0 pipeline show response model
//
// swagger:model v0.PipelineShowResponseModel
type V0PipelineShowResponseModel struct {

	// abort reason
	AbortReason string `json:"abort_reason,omitempty"`

	// app
	App *V0PipelineShowAppResponseModel `json:"app,omitempty"`

	// attempts
	Attempts []*V0PipelineShowAttemptResponseModel `json:"attempts"`

	// credit cost
	CreditCost interface{} `json:"credit_cost,omitempty"`

	// current attempt id
	CurrentAttemptID string `json:"current_attempt_id,omitempty"`

	// finished at
	FinishedAt string `json:"finished_at,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// number in app scope
	NumberInAppScope int64 `json:"number_in_app_scope,omitempty"`

	// put on hold at
	PutOnHoldAt interface{} `json:"put_on_hold_at,omitempty"`

	// stages
	Stages []*V0PipelineShowStageResponseModel `json:"stages"`

	// started at
	StartedAt string `json:"started_at,omitempty"`

	// status
	Status string `json:"status,omitempty"`

	// trigger params
	TriggerParams *V0PipelineShowTriggerParamsResponseModel `json:"trigger_params,omitempty"`

	// triggered at
	TriggeredAt string `json:"triggered_at,omitempty"`

	// triggered by
	TriggeredBy string `json:"triggered_by,omitempty"`
}

// Validate validates this v0 pipeline show response model
func (m *V0PipelineShowResponseModel) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAttempts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStages(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTriggerParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V0PipelineShowResponseModel) validateApp(formats strfmt.Registry) error {
	if swag.IsZero(m.App) { // not required
		return nil
	}

	if m.App != nil {
		if err := m.App.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("app")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("app")
			}
			return err
		}
	}

	return nil
}

func (m *V0PipelineShowResponseModel) validateAttempts(formats strfmt.Registry) error {
	if swag.IsZero(m.Attempts) { // not required
		return nil
	}

	for i := 0; i < len(m.Attempts); i++ {
		if swag.IsZero(m.Attempts[i]) { // not required
			continue
		}

		if m.Attempts[i] != nil {
			if err := m.Attempts[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("attempts" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("attempts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V0PipelineShowResponseModel) validateStages(formats strfmt.Registry) error {
	if swag.IsZero(m.Stages) { // not required
		return nil
	}

	for i := 0; i < len(m.Stages); i++ {
		if swag.IsZero(m.Stages[i]) { // not required
			continue
		}

		if m.Stages[i] != nil {
			if err := m.Stages[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("stages" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("stages" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V0PipelineShowResponseModel) validateTriggerParams(formats strfmt.Registry) error {
	if swag.IsZero(m.TriggerParams) { // not required
		return nil
	}

	if m.TriggerParams != nil {
		if err := m.TriggerParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("trigger_params")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("trigger_params")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this v0 pipeline show response model based on the context it is used
func (m *V0PipelineShowResponseModel) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateApp(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAttempts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStages(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTriggerParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V0PipelineShowResponseModel) contextValidateApp(ctx context.Context, formats strfmt.Registry) error {

	if m.App != nil {
		if err := m.App.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("app")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("app")
			}
			return err
		}
	}

	return nil
}

func (m *V0PipelineShowResponseModel) contextValidateAttempts(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Attempts); i++ {

		if m.Attempts[i] != nil {
			if err := m.Attempts[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("attempts" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("attempts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V0PipelineShowResponseModel) contextValidateStages(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Stages); i++ {

		if m.Stages[i] != nil {
			if err := m.Stages[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("stages" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("stages" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V0PipelineShowResponseModel) contextValidateTriggerParams(ctx context.Context, formats strfmt.Registry) error {

	if m.TriggerParams != nil {
		if err := m.TriggerParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("trigger_params")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("trigger_params")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V0PipelineShowResponseModel) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V0PipelineShowResponseModel) UnmarshalBinary(b []byte) error {
	var res V0PipelineShowResponseModel
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
