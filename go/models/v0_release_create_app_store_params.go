// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// V0ReleaseCreateAppStoreParams v0 release create app store params
//
// swagger:model v0.ReleaseCreateAppStoreParams
type V0ReleaseCreateAppStoreParams struct {

	// Indicates whether or not to upload every release candidate build automatically to TestFlight (default: `false`)
	AutomaticTestflightUpload bool `json:"automatic_testflight_upload,omitempty"`

	// The bundle ID of the app to be released
	// Required: true
	BundleID *string `json:"bundle_id"`

	// An internal description of the release; it won't be propagated to the App Store (default: empty)
	Description string `json:"description,omitempty"`

	// The name/version of the release (e.g. `1.2`)
	// Required: true
	Name *string `json:"name"`

	// The branch used for building the release candidate (default: empty)
	ReleaseBranch string `json:"release_branch,omitempty"`

	// The Slack webhook URL to use for sending Slack notifications (default: empty)
	SlackWebhookURL string `json:"slack_webhook_url,omitempty"`

	// The Teams webhook URL to use for sending MS Teams notifications (default: empty)
	TeamsWebhookURL string `json:"teams_webhook_url,omitempty"`

	// The workflow used for building the release candidate (default: empty)
	Workflow string `json:"workflow,omitempty"`
}

// Validate validates this v0 release create app store params
func (m *V0ReleaseCreateAppStoreParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBundleID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V0ReleaseCreateAppStoreParams) validateBundleID(formats strfmt.Registry) error {

	if err := validate.Required("bundle_id", "body", m.BundleID); err != nil {
		return err
	}

	return nil
}

func (m *V0ReleaseCreateAppStoreParams) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this v0 release create app store params based on context it is used
func (m *V0ReleaseCreateAppStoreParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *V0ReleaseCreateAppStoreParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V0ReleaseCreateAppStoreParams) UnmarshalBinary(b []byte) error {
	var res V0ReleaseCreateAppStoreParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
