// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V0BuildLogInfoResponseModel v0 build log info response model
//
// swagger:model v0.BuildLogInfoResponseModel
type V0BuildLogInfoResponseModel struct {

	// expiring raw log url
	ExpiringRawLogURL string `json:"expiring_raw_log_url,omitempty"`

	// generated log chunks num
	GeneratedLogChunksNum int64 `json:"generated_log_chunks_num,omitempty"`

	// is archived
	IsArchived bool `json:"is_archived,omitempty"`

	// log chunks
	LogChunks []*V0BuildLogChunkItemResponseModel `json:"log_chunks"`

	// timestamp
	Timestamp *NullsString `json:"timestamp,omitempty"`
}

// Validate validates this v0 build log info response model
func (m *V0BuildLogInfoResponseModel) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLogChunks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V0BuildLogInfoResponseModel) validateLogChunks(formats strfmt.Registry) error {
	if swag.IsZero(m.LogChunks) { // not required
		return nil
	}

	for i := 0; i < len(m.LogChunks); i++ {
		if swag.IsZero(m.LogChunks[i]) { // not required
			continue
		}

		if m.LogChunks[i] != nil {
			if err := m.LogChunks[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("log_chunks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V0BuildLogInfoResponseModel) validateTimestamp(formats strfmt.Registry) error {
	if swag.IsZero(m.Timestamp) { // not required
		return nil
	}

	if m.Timestamp != nil {
		if err := m.Timestamp.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("timestamp")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this v0 build log info response model based on the context it is used
func (m *V0BuildLogInfoResponseModel) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLogChunks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTimestamp(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V0BuildLogInfoResponseModel) contextValidateLogChunks(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.LogChunks); i++ {

		if m.LogChunks[i] != nil {
			if err := m.LogChunks[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("log_chunks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V0BuildLogInfoResponseModel) contextValidateTimestamp(ctx context.Context, formats strfmt.Registry) error {

	if m.Timestamp != nil {
		if err := m.Timestamp.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("timestamp")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V0BuildLogInfoResponseModel) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V0BuildLogInfoResponseModel) UnmarshalBinary(b []byte) error {
	var res V0BuildLogInfoResponseModel
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
