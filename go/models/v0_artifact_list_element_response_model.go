// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V0ArtifactListElementResponseModel v0 artifact list element response model
//
// swagger:model v0.ArtifactListElementResponseModel
type V0ArtifactListElementResponseModel struct {

	// artifact meta
	ArtifactMeta []int64 `json:"artifact_meta"`

	// artifact type
	ArtifactType *NullsString `json:"artifact_type,omitempty"`

	// file size bytes
	FileSizeBytes int64 `json:"file_size_bytes,omitempty"`

	// is public page enabled
	IsPublicPageEnabled bool `json:"is_public_page_enabled,omitempty"`

	// slug
	Slug string `json:"slug,omitempty"`

	// title
	Title *NullsString `json:"title,omitempty"`
}

// Validate validates this v0 artifact list element response model
func (m *V0ArtifactListElementResponseModel) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateArtifactType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTitle(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V0ArtifactListElementResponseModel) validateArtifactType(formats strfmt.Registry) error {
	if swag.IsZero(m.ArtifactType) { // not required
		return nil
	}

	if m.ArtifactType != nil {
		if err := m.ArtifactType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("artifact_type")
			}
			return err
		}
	}

	return nil
}

func (m *V0ArtifactListElementResponseModel) validateTitle(formats strfmt.Registry) error {
	if swag.IsZero(m.Title) { // not required
		return nil
	}

	if m.Title != nil {
		if err := m.Title.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("title")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this v0 artifact list element response model based on the context it is used
func (m *V0ArtifactListElementResponseModel) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateArtifactType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTitle(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V0ArtifactListElementResponseModel) contextValidateArtifactType(ctx context.Context, formats strfmt.Registry) error {

	if m.ArtifactType != nil {
		if err := m.ArtifactType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("artifact_type")
			}
			return err
		}
	}

	return nil
}

func (m *V0ArtifactListElementResponseModel) contextValidateTitle(ctx context.Context, formats strfmt.Registry) error {

	if m.Title != nil {
		if err := m.Title.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("title")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V0ArtifactListElementResponseModel) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V0ArtifactListElementResponseModel) UnmarshalBinary(b []byte) error {
	var res V0ArtifactListElementResponseModel
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
