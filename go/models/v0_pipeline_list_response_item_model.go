// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V0PipelineListResponseItemModel v0 pipeline list response item model
//
// swagger:model v0.PipelineListResponseItemModel
type V0PipelineListResponseItemModel struct {

	// artifacts
	Artifacts []*PipelineabledomainArtifactMeta `json:"artifacts"`

	// branch
	Branch *NullsString `json:"branch,omitempty"`

	// build number
	BuildNumber int64 `json:"build_number,omitempty"`

	// build tool invocations
	BuildToolInvocations []*PipelineabledomainBuildToolInvocation `json:"build_tool_invocations"`

	// commit hash
	CommitHash *NullsString `json:"commit_hash,omitempty"`

	// commit message
	CommitMessage *NullsString `json:"commit_message,omitempty"`

	// credit cost
	CreditCost *NullsInt64 `json:"credit_cost,omitempty"`

	// finished at
	FinishedAt string `json:"finished_at,omitempty"`

	// is on hold
	IsOnHold bool `json:"is_on_hold,omitempty"`

	// is pipeline
	IsPipeline bool `json:"is_pipeline,omitempty"`

	// is processed
	IsProcessed bool `json:"is_processed,omitempty"`

	// local config
	LocalConfig *PipelineabledomainLocalConfig `json:"local_config,omitempty"`

	// pull request id
	PullRequestID int64 `json:"pull_request_id,omitempty"`

	// pull request target branch
	PullRequestTargetBranch *NullsString `json:"pull_request_target_branch,omitempty"`

	// slug
	Slug string `json:"slug,omitempty"`

	// started at
	StartedAt string `json:"started_at,omitempty"`

	// status
	Status int64 `json:"status,omitempty"`

	// tag
	Tag *NullsString `json:"tag,omitempty"`

	// trigger params
	TriggerParams *PipelineabledomainTriggerParams `json:"trigger_params,omitempty"`

	// triggered at
	TriggeredAt string `json:"triggered_at,omitempty"`

	// triggered by
	TriggeredBy *NullsString `json:"triggered_by,omitempty"`

	// triggered workflow
	TriggeredWorkflow string `json:"triggered_workflow,omitempty"`
}

// Validate validates this v0 pipeline list response item model
func (m *V0PipelineListResponseItemModel) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateArtifacts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBranch(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBuildToolInvocations(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommitHash(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCommitMessage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreditCost(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocalConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePullRequestTargetBranch(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTag(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTriggerParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTriggeredBy(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V0PipelineListResponseItemModel) validateArtifacts(formats strfmt.Registry) error {
	if swag.IsZero(m.Artifacts) { // not required
		return nil
	}

	for i := 0; i < len(m.Artifacts); i++ {
		if swag.IsZero(m.Artifacts[i]) { // not required
			continue
		}

		if m.Artifacts[i] != nil {
			if err := m.Artifacts[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("artifacts" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("artifacts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V0PipelineListResponseItemModel) validateBranch(formats strfmt.Registry) error {
	if swag.IsZero(m.Branch) { // not required
		return nil
	}

	if m.Branch != nil {
		if err := m.Branch.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("branch")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("branch")
			}
			return err
		}
	}

	return nil
}

func (m *V0PipelineListResponseItemModel) validateBuildToolInvocations(formats strfmt.Registry) error {
	if swag.IsZero(m.BuildToolInvocations) { // not required
		return nil
	}

	for i := 0; i < len(m.BuildToolInvocations); i++ {
		if swag.IsZero(m.BuildToolInvocations[i]) { // not required
			continue
		}

		if m.BuildToolInvocations[i] != nil {
			if err := m.BuildToolInvocations[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("build_tool_invocations" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("build_tool_invocations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V0PipelineListResponseItemModel) validateCommitHash(formats strfmt.Registry) error {
	if swag.IsZero(m.CommitHash) { // not required
		return nil
	}

	if m.CommitHash != nil {
		if err := m.CommitHash.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("commit_hash")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("commit_hash")
			}
			return err
		}
	}

	return nil
}

func (m *V0PipelineListResponseItemModel) validateCommitMessage(formats strfmt.Registry) error {
	if swag.IsZero(m.CommitMessage) { // not required
		return nil
	}

	if m.CommitMessage != nil {
		if err := m.CommitMessage.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("commit_message")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("commit_message")
			}
			return err
		}
	}

	return nil
}

func (m *V0PipelineListResponseItemModel) validateCreditCost(formats strfmt.Registry) error {
	if swag.IsZero(m.CreditCost) { // not required
		return nil
	}

	if m.CreditCost != nil {
		if err := m.CreditCost.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("credit_cost")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("credit_cost")
			}
			return err
		}
	}

	return nil
}

func (m *V0PipelineListResponseItemModel) validateLocalConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.LocalConfig) { // not required
		return nil
	}

	if m.LocalConfig != nil {
		if err := m.LocalConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("local_config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("local_config")
			}
			return err
		}
	}

	return nil
}

func (m *V0PipelineListResponseItemModel) validatePullRequestTargetBranch(formats strfmt.Registry) error {
	if swag.IsZero(m.PullRequestTargetBranch) { // not required
		return nil
	}

	if m.PullRequestTargetBranch != nil {
		if err := m.PullRequestTargetBranch.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pull_request_target_branch")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pull_request_target_branch")
			}
			return err
		}
	}

	return nil
}

func (m *V0PipelineListResponseItemModel) validateTag(formats strfmt.Registry) error {
	if swag.IsZero(m.Tag) { // not required
		return nil
	}

	if m.Tag != nil {
		if err := m.Tag.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tag")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tag")
			}
			return err
		}
	}

	return nil
}

func (m *V0PipelineListResponseItemModel) validateTriggerParams(formats strfmt.Registry) error {
	if swag.IsZero(m.TriggerParams) { // not required
		return nil
	}

	if m.TriggerParams != nil {
		if err := m.TriggerParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("trigger_params")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("trigger_params")
			}
			return err
		}
	}

	return nil
}

func (m *V0PipelineListResponseItemModel) validateTriggeredBy(formats strfmt.Registry) error {
	if swag.IsZero(m.TriggeredBy) { // not required
		return nil
	}

	if m.TriggeredBy != nil {
		if err := m.TriggeredBy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("triggered_by")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("triggered_by")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this v0 pipeline list response item model based on the context it is used
func (m *V0PipelineListResponseItemModel) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateArtifacts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBranch(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBuildToolInvocations(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCommitHash(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCommitMessage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCreditCost(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLocalConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePullRequestTargetBranch(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTag(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTriggerParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTriggeredBy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V0PipelineListResponseItemModel) contextValidateArtifacts(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Artifacts); i++ {

		if m.Artifacts[i] != nil {

			if swag.IsZero(m.Artifacts[i]) { // not required
				return nil
			}

			if err := m.Artifacts[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("artifacts" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("artifacts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V0PipelineListResponseItemModel) contextValidateBranch(ctx context.Context, formats strfmt.Registry) error {

	if m.Branch != nil {

		if swag.IsZero(m.Branch) { // not required
			return nil
		}

		if err := m.Branch.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("branch")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("branch")
			}
			return err
		}
	}

	return nil
}

func (m *V0PipelineListResponseItemModel) contextValidateBuildToolInvocations(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.BuildToolInvocations); i++ {

		if m.BuildToolInvocations[i] != nil {

			if swag.IsZero(m.BuildToolInvocations[i]) { // not required
				return nil
			}

			if err := m.BuildToolInvocations[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("build_tool_invocations" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("build_tool_invocations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *V0PipelineListResponseItemModel) contextValidateCommitHash(ctx context.Context, formats strfmt.Registry) error {

	if m.CommitHash != nil {

		if swag.IsZero(m.CommitHash) { // not required
			return nil
		}

		if err := m.CommitHash.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("commit_hash")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("commit_hash")
			}
			return err
		}
	}

	return nil
}

func (m *V0PipelineListResponseItemModel) contextValidateCommitMessage(ctx context.Context, formats strfmt.Registry) error {

	if m.CommitMessage != nil {

		if swag.IsZero(m.CommitMessage) { // not required
			return nil
		}

		if err := m.CommitMessage.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("commit_message")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("commit_message")
			}
			return err
		}
	}

	return nil
}

func (m *V0PipelineListResponseItemModel) contextValidateCreditCost(ctx context.Context, formats strfmt.Registry) error {

	if m.CreditCost != nil {

		if swag.IsZero(m.CreditCost) { // not required
			return nil
		}

		if err := m.CreditCost.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("credit_cost")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("credit_cost")
			}
			return err
		}
	}

	return nil
}

func (m *V0PipelineListResponseItemModel) contextValidateLocalConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.LocalConfig != nil {

		if swag.IsZero(m.LocalConfig) { // not required
			return nil
		}

		if err := m.LocalConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("local_config")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("local_config")
			}
			return err
		}
	}

	return nil
}

func (m *V0PipelineListResponseItemModel) contextValidatePullRequestTargetBranch(ctx context.Context, formats strfmt.Registry) error {

	if m.PullRequestTargetBranch != nil {

		if swag.IsZero(m.PullRequestTargetBranch) { // not required
			return nil
		}

		if err := m.PullRequestTargetBranch.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pull_request_target_branch")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pull_request_target_branch")
			}
			return err
		}
	}

	return nil
}

func (m *V0PipelineListResponseItemModel) contextValidateTag(ctx context.Context, formats strfmt.Registry) error {

	if m.Tag != nil {

		if swag.IsZero(m.Tag) { // not required
			return nil
		}

		if err := m.Tag.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tag")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tag")
			}
			return err
		}
	}

	return nil
}

func (m *V0PipelineListResponseItemModel) contextValidateTriggerParams(ctx context.Context, formats strfmt.Registry) error {

	if m.TriggerParams != nil {

		if swag.IsZero(m.TriggerParams) { // not required
			return nil
		}

		if err := m.TriggerParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("trigger_params")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("trigger_params")
			}
			return err
		}
	}

	return nil
}

func (m *V0PipelineListResponseItemModel) contextValidateTriggeredBy(ctx context.Context, formats strfmt.Registry) error {

	if m.TriggeredBy != nil {

		if swag.IsZero(m.TriggeredBy) { // not required
			return nil
		}

		if err := m.TriggeredBy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("triggered_by")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("triggered_by")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V0PipelineListResponseItemModel) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V0PipelineListResponseItemModel) UnmarshalBinary(b []byte) error {
	var res V0PipelineListResponseItemModel
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
