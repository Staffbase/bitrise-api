// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V0UserPlanDataModel v0 user plan data model
//
// swagger:model v0.UserPlanDataModel
type V0UserPlanDataModel struct {

	// current plan
	CurrentPlan *V0PlanDataModel `json:"current_plan,omitempty"`

	// pending plan
	PendingPlan *V0PlanDataModel `json:"pending_plan,omitempty"`

	// trial expires at
	TrialExpiresAt string `json:"trial_expires_at,omitempty"`
}

// Validate validates this v0 user plan data model
func (m *V0UserPlanDataModel) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCurrentPlan(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePendingPlan(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V0UserPlanDataModel) validateCurrentPlan(formats strfmt.Registry) error {
	if swag.IsZero(m.CurrentPlan) { // not required
		return nil
	}

	if m.CurrentPlan != nil {
		if err := m.CurrentPlan.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("current_plan")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("current_plan")
			}
			return err
		}
	}

	return nil
}

func (m *V0UserPlanDataModel) validatePendingPlan(formats strfmt.Registry) error {
	if swag.IsZero(m.PendingPlan) { // not required
		return nil
	}

	if m.PendingPlan != nil {
		if err := m.PendingPlan.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pending_plan")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pending_plan")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this v0 user plan data model based on the context it is used
func (m *V0UserPlanDataModel) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCurrentPlan(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePendingPlan(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V0UserPlanDataModel) contextValidateCurrentPlan(ctx context.Context, formats strfmt.Registry) error {

	if m.CurrentPlan != nil {

		if swag.IsZero(m.CurrentPlan) { // not required
			return nil
		}

		if err := m.CurrentPlan.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("current_plan")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("current_plan")
			}
			return err
		}
	}

	return nil
}

func (m *V0UserPlanDataModel) contextValidatePendingPlan(ctx context.Context, formats strfmt.Registry) error {

	if m.PendingPlan != nil {

		if swag.IsZero(m.PendingPlan) { // not required
			return nil
		}

		if err := m.PendingPlan.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pending_plan")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pending_plan")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V0UserPlanDataModel) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V0UserPlanDataModel) UnmarshalBinary(b []byte) error {
	var res V0UserPlanDataModel
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
