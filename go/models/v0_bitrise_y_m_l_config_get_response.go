// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V0BitriseYMLConfigGetResponse v0 bitrise y m l config get response
//
// swagger:model v0.BitriseYMLConfigGetResponse
type V0BitriseYMLConfigGetResponse struct {

	// Location of bitrise.yml file. Enums(bitrise.io, repository)
	Location struct {
		WebsiteBitriseYMLLocation
	} `json:"location,omitempty"`
}

// Validate validates this v0 bitrise y m l config get response
func (m *V0BitriseYMLConfigGetResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLocation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V0BitriseYMLConfigGetResponse) validateLocation(formats strfmt.Registry) error {
	if swag.IsZero(m.Location) { // not required
		return nil
	}

	return nil
}

// ContextValidate validate this v0 bitrise y m l config get response based on the context it is used
func (m *V0BitriseYMLConfigGetResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLocation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V0BitriseYMLConfigGetResponse) contextValidateLocation(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

// MarshalBinary interface implementation
func (m *V0BitriseYMLConfigGetResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V0BitriseYMLConfigGetResponse) UnmarshalBinary(b []byte) error {
	var res V0BitriseYMLConfigGetResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
