// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V0AppAddOnResponseItemModel v0 app add on response item model
//
// swagger:model v0.AppAddOnResponseItemModel
type V0AppAddOnResponseItemModel struct {

	// description
	Description string `json:"description,omitempty"`

	// documentation url
	DocumentationURL string `json:"documentation_url,omitempty"`

	// has ui
	HasUI bool `json:"has_ui,omitempty"`

	// icon
	Icon string `json:"icon,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// is beta
	IsBeta bool `json:"is_beta,omitempty"`

	// is enabled
	IsEnabled bool `json:"is_enabled,omitempty"`

	// login url
	LoginURL string `json:"login_url,omitempty"`

	// plan
	Plan *AddonsPlan `json:"plan,omitempty"`

	// scopes
	Scopes []string `json:"scopes"`

	// setup guide
	SetupGuide *AddonsSetupGuide `json:"setup_guide,omitempty"`

	// summary
	Summary string `json:"summary,omitempty"`

	// terms url
	TermsURL string `json:"terms_url,omitempty"`

	// title
	Title string `json:"title,omitempty"`
}

// Validate validates this v0 app add on response item model
func (m *V0AppAddOnResponseItemModel) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePlan(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSetupGuide(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V0AppAddOnResponseItemModel) validatePlan(formats strfmt.Registry) error {
	if swag.IsZero(m.Plan) { // not required
		return nil
	}

	if m.Plan != nil {
		if err := m.Plan.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("plan")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("plan")
			}
			return err
		}
	}

	return nil
}

func (m *V0AppAddOnResponseItemModel) validateSetupGuide(formats strfmt.Registry) error {
	if swag.IsZero(m.SetupGuide) { // not required
		return nil
	}

	if m.SetupGuide != nil {
		if err := m.SetupGuide.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("setup_guide")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("setup_guide")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this v0 app add on response item model based on the context it is used
func (m *V0AppAddOnResponseItemModel) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePlan(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSetupGuide(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V0AppAddOnResponseItemModel) contextValidatePlan(ctx context.Context, formats strfmt.Registry) error {

	if m.Plan != nil {
		if err := m.Plan.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("plan")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("plan")
			}
			return err
		}
	}

	return nil
}

func (m *V0AppAddOnResponseItemModel) contextValidateSetupGuide(ctx context.Context, formats strfmt.Registry) error {

	if m.SetupGuide != nil {
		if err := m.SetupGuide.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("setup_guide")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("setup_guide")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V0AppAddOnResponseItemModel) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V0AppAddOnResponseItemModel) UnmarshalBinary(b []byte) error {
	var res V0AppAddOnResponseItemModel
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
