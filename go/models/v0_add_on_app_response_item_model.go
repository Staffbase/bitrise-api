// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// V0AddOnAppResponseItemModel v0 add on app response item model
//
// swagger:model v0.AddOnAppResponseItemModel
type V0AddOnAppResponseItemModel struct {

	// icon
	Icon *GithubComMarkbatesPopNullsString `json:"icon,omitempty"`

	// plan
	Plan *AddonsPlan `json:"plan,omitempty"`

	// plan started at
	PlanStartedAt string `json:"plan_started_at,omitempty"`

	// slug
	Slug string `json:"slug,omitempty"`

	// title
	Title string `json:"title,omitempty"`
}

// Validate validates this v0 add on app response item model
func (m *V0AddOnAppResponseItemModel) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIcon(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlan(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V0AddOnAppResponseItemModel) validateIcon(formats strfmt.Registry) error {
	if swag.IsZero(m.Icon) { // not required
		return nil
	}

	if m.Icon != nil {
		if err := m.Icon.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("icon")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("icon")
			}
			return err
		}
	}

	return nil
}

func (m *V0AddOnAppResponseItemModel) validatePlan(formats strfmt.Registry) error {
	if swag.IsZero(m.Plan) { // not required
		return nil
	}

	if m.Plan != nil {
		if err := m.Plan.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("plan")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("plan")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this v0 add on app response item model based on the context it is used
func (m *V0AddOnAppResponseItemModel) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateIcon(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePlan(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *V0AddOnAppResponseItemModel) contextValidateIcon(ctx context.Context, formats strfmt.Registry) error {

	if m.Icon != nil {

		if swag.IsZero(m.Icon) { // not required
			return nil
		}

		if err := m.Icon.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("icon")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("icon")
			}
			return err
		}
	}

	return nil
}

func (m *V0AddOnAppResponseItemModel) contextValidatePlan(ctx context.Context, formats strfmt.Registry) error {

	if m.Plan != nil {

		if swag.IsZero(m.Plan) { // not required
			return nil
		}

		if err := m.Plan.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("plan")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("plan")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *V0AddOnAppResponseItemModel) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *V0AddOnAppResponseItemModel) UnmarshalBinary(b []byte) error {
	var res V0AddOnAppResponseItemModel
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
